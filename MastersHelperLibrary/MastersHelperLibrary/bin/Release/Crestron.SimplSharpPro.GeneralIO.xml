<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Crestron.SimplSharpPro.GeneralIO</name>
    </assembly>
    <members>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventHandler">
            <summary>
            Delegate definition for <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event.
            </summary>
            <param name="device">GLS Cresnet Occupancy Sensor which the event was triggered from.</param>
            <param name="args">Argument class to describe the event.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventArgs">
            <summary>
            Event Argument class used for <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventHandler"/>.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventArgs.#ctor(System.Int32,Crestron.SimplSharpPro.Sig,System.UInt32)">
            <summary>
            Constructor to generate a new Crestron GLS Cresnet Occupancy Sensor's Change Event Argument class.
            </summary>
            <param name="paramNewEventId">Information to indicate what triggered this event.</param>
            <param name="sigDetail">Details of the sig used while handling this event.</param>
            <param name="sigIndex">Index to the sig used while handling this event.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventArgs.EventId">
            <summary>
            Information to describe what triggered the event.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventArgs.SigDetail">
            <summary>
            Output sig related to the event.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventArgs.SigIndex">
            <summary>
            Index in to a collection of feedback sigs. This is only applicable for <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.CommandReceivedFeedbackSigs"/>.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase">
            <summary>
            Base class for GLS Occupancy Sensors.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> events.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc">
            <summary>
            Interface to define the common sigs between GLS and CEN-ODT-C-POE Occupancy Sensors.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.ForceOccupied">
            <summary>
            Method to force the device to report that the room is occupied even if the passive infrared (PIR) sensor does not detect motion.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.VacancyDetectedFeedback"/> sets to false and "OccupancyDetectedFeedback" sets to true. 
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedFeedback"/> is set to true when <see cref="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.ForceOccupied"/> is called. The sensor will then be in the occupied state for the duration of the set timeout.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.ForceVacant">
            <summary>
            Method to force the device to report that the room is vacant even if the passive infrared (PIR) sensor does not detect vacancy.
            "OccupancyDetectedFeedback" sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.VacancyDetectedFeedback"/> sets to true. Upon forcing vacancy, there is a 5 second delay before the sensor begins re-sensing for motion.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.EnableRawStates">
            <summary>
            Method to enable "RawOccupancyDetectedFeedback", <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedByPassiveInfraredSensorFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedByUltrasonicSensorFeedback"/> properties.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.EnableLedFlash">
            <summary>
            Method to enable the red and green feedback LEDs. The red LED turns on as the passive infrared (PIR) sensor detects motion, and the green LED turns on as the ultrasonic (US) sensor detects motion.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.DisableLedFlash">
            <summary>
            Method to disable the red and green feedback LEDs from blinking when motion is detected.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.EnableShortTimeout">
            <summary>
            Method to enable a “walk-through” mode for a shorter timeouts upon periods of minimal occupancy. If the room is occupied for less than 90s, the timeout will revert to 60s.
            If the normally programmed timeout is set less than 60s, that timeout will take precedence. This is useful for rooms with normally a long timeout setting, so if the room is
            only entered for a short period of time, and occupancy is triggered, the lights do not remain on for a longer period than needed.
            Short timeout does not apply if occupancy event was  a ""Grace occupancy"" (previous vacancy time is greater than 15 seconds).
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.DisableShortTimeout">
            <summary>
            Method to disable the short timeout functionality. See <see cref="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.EnableShortTimeout"/> method for description.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.OrWhenVacated">
            <summary>
            Method to trigger either passive infrared (PIR) OR ultrasonic (US) motion sensors to declare initial occupancy and set the sensor to the occupied state, if the room is vacant.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.AndWhenVacated">
            <summary>
            Method to trigger both passive infrared (PIR) OR ultrasonic (US) motion sensors to detect motion to declare initial occupancy, if the room is vacant.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.EnableUltrasonicSensorSideA">
            <summary>
            Method to enable the ultrasonic (US) Sensor side A. Does NOT disable side B. Side A is the side where the majority of the red LED is shown through the dome.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.DisableUltrasonicSensorSideA">
            <summary>
            Method to disable the ultrasonic (US) Sensor side A. This does NOT enable side B.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.EnableUltrasonicSensorSideB">
            <summary>
            Method to enable the ultrasonic (US) Sensor side B. This does NOT disable side A. Side B is the side where the majority of the green LED is shown through the dome and is also identified on the back-housing plastic rim.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.DisableUltrasonicSensorSideB">
            <summary>
            Method to disable the ultrasonic (US) Sensor side B. This does not enable side A.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.EnablePassiveInfraredSensor">
            <summary>
            Method to enable the passive infrared (PIR) Sensor.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.DisablePassiveInfraredSensor">
            <summary>
            Method to disable the passive infrared (PIR) Sensor.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.VacancyDetectedFeedback">
            <summary>
            Property to indicate when the room is vacant.
            "OccupancyDetectedFeedback" sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.VacancyDetectedFeedback"/> sets to true.
            true = Room Vacant ; false = Room Occupied.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomVacantFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.GraceOccupancyDetectedFeedback">
            <summary>
            Property to indicate occupancy event detected within 15s of initial vacancy event. Beyond 15s after the initial vacancy event, this property cannot be triggered.
            This property is most commonly used in an application where a vacancy-only sensor is desired. In such an instance, only this property will be used to turn on the lights, while <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OccupancyDetectedFeedback"/> will remain unused.
            true = Occupancy event detected within 15s of initial vacancy event; false = No occupancy event detected within 15s of initial vacancy event.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GraceOccupancyDetectedFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedFeedback">
            <summary>
            This property value will be set to true if ultrasonic (US) AND/OR passive infrared (PIR) sensors detect motion. The AND/OR determination is decided based upon the chosen logic.
            To see which logic is chosen, look at <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.OrWhenVacatedFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.AndWhenVacatedFeedback"/>.
            For example, in “Vacancy AND” logic both ultrasonic (US) and passive infrared (PIR) technologies must register motion in order to set this property value to true.
            true = motion detected by logical state; false = No motion detected by logical state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedByPassiveInfraredSensorFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the passive infrared (PIR) sensor.
            true = motion detected by passive infrared (PIR) sensor; false = No motion detected by passive infrared (PIR) sensor.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyPirFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedByUltrasonicSensorFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the ultrasonic (US) sensor.
            true = motion detected by ultrasonic (US); false = No motion detected by ultrasonic (US).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyUsFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.InternalPhotoSensorValueFeedback">
            <summary>
            Property to report the internal photosensor value.
            The output range is from 0 to MAXIMIM VALUE TO BE DETERMINED lux, scaled linearly from 0 to 65535.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.LedFlashEnabledFeedback">
            <summary>
            Property to indicate if feedback LEDs are enabled or disabled that indicates if motion is detected.
            true = Feedback LEDs enabled; false = Feedback LEDs disabled.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.ShortTimeoutEnabledFeedback">
            <summary>
            Property to report if the short timeout functionality has been enabled.
            true = Short timeout enabled; false = Short timeout disabled
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.OrWhenVacatedFeedback">
            <summary>
            Property to indicate if either passive infrared (PIR) OR ultrasonic (US) sensor technologies can trigger initial occupancy.
            true = motion sensed needed by only one technology; false = OR logic disabled.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.AndWhenVacatedFeedback">
            <summary>
            Property to indicate if both passive infrared (PIR) OR ultrasonic (US) sensor technologies must register motion to trigger initial room occupancy.
            true = motion sensed needed by both technologies for initial occupancy; false = AND logic disabled.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.UltrasonicSensorSideAEnabledFeedback">
            <summary>
            Property to report if the ultrasonic (US) Sensor side A is enabled.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.UltrasonicSensorSideBEnabledFeedback">
            <summary>
            Property to report if the ultrasonic (US) Sensor side B is enabled.
            true = US Sensor B enabled; false = US Sensor B disabled.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.PassiveInfraredSensorEnabledFeedback">
            <summary>
            Property to report if the passive infrared (PIR) Sensor is enabled.
            true = PIR Sensor enabled; false = PIR Sensor disabled.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.UltrasonicSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report Sensitivity level for ultrasonic (US) while sensor is in occupied state. 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.UltrasonicSensorSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for ultrasonic (US) while sensor is in vacant state.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.PassiveInfraredSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report Sensitivity level for passive infrared (PIR) while sensor is in occupied state.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.PassiveInfraredSensorSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for passive infrared (PIR) while sensor is in vacant state.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.IGlsOccupancySensorsCommonSigs">
            <summary>
            Interface to describe the common sigs for GLS Occupancy Sensors. <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase"/> or <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt"/>.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsOccupancySensorsCommonSigs.GraceOccupancyDetectedFeedback">
            <summary>
            Property to indicate if occupancy is detected within 15s after a vacancy event. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GraceOccupancyDetectedFeedbackEventId"/> for <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase"/> devices and with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.GraceOccupancyStatusReceivedEventId"/> for the <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsOccupancySensorsCommonSigs.VacancyDetectedFeedback">
            <summary>
            Property to indicate vacancy status. Value is true when vacancy is detected, value is false when occupancy is detected.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomVacantFeedbackEventId"/> for <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase"/> devices and with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.VacancyStatusReceived"/> for the <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IGlsOccupancySensorsCommonSigs.LocalTimeoutFeedback">
            <summary>
            Property to indicate the value of the timeout set by the local potentiometer.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.TimeoutLocalFeedbackEventId"/> for <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase"/> devices and with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.LocalTimeoutReceivedEventId"/> for the <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt"/>.</para> 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomOccupiedFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OccupancyDetectedFeedback"/> or "CenOdtCPoe.OccupancyDetectedFeedback"  has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GraceOccupancyDetectedFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GraceOccupancyDetectedFeedback"/> or "CenOdtCPoe.GraceOccupancyDetectedFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomVacantFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.VacancyDetectedFeedback"/> or "CenOdtCPoe.VacancyDetectedFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedback"/> or "CenOdtCPoe.RawOccupancyDetectedFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyPirFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.RawOccupancyPirFeedback"/> or "CenOdtCPoe.RawOccupancyDetectedByPassiveInfraredSensorFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyUsFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.RawOccupancyUsFeedback"/> or "CenOdtCPoe.RawOccupancyDetectedByUltrasonicSensorFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.TimeoutFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.CurrentTimeoutFeedback"/> or "CenOdtCPoe.CurrentTimeoutFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.TimeoutLocalFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LocalTimeoutFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorValueFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorValueFeedback"/> or "CenOdtCPoe.InternalPhotoSensorValueFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ExternalPhotoSensorValueFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ExternalPhotoSensorValueFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LedFlashEnabledFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LedFlashEnabledFeedback"/> or "CenOdtCPoe.LedFlashEnabledFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ShortTimeoutEnabledFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ShortTimeoutEnabledFeedback"/> or "CenOdtCPoe.ShortTimeoutEnabledFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirEnabledFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirEnabledFeedback"/> or "CenOdtCPoe.PassiveInfraredSensorEnabledFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInOccupiedStateFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInOccupiedStateFeedback"/> or "CenOdtCPoe.PassiveInfraredSensorSensitivityInOccupiedStateFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInVacantStateFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInVacantStateFeedback"/> or "CenOdtCPoe.PassiveInfraredSensorSensitivityInVacantStateFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OrWhenVacatedFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.OrWhenVacatedFeedback"/> or "CenOdtCPoe.OrWhenVacatedFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.AndWhenVacatedFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.AndWhenVacatedFeedback"/> or "CenOdtCPoe.AndWhenVacatedFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsAEnabledFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsAEnabledFeedback"/> or "CenOdtCPoe.UltrasonicSensorSideAEnabledFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsBEnabledFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsBEnabledFeedback"/> or "CenOdtCPoe.UltrasonicSensorSideBEnabledFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInOccupiedStateFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsSensitivityInOccupiedStateFeedback"/> or "CenOdtCPoe.UltrasonicSensorSensitivityInOccupiedStateFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInVacantStateFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsSensitivityInVacantStateFeedback"/> or "CenOdtCPoe.UltrasonicSensorSensitivityInVacantStateFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.CommandReceivedFeedbackEventId">
            <summary>
            The state of one of the <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.CommandReceivedFeedbackSigs"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventArgs.SigIndex"/> property set to the sig that changed.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.SystemAddressReceivedFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.SystemAddressReceivedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OrWhenOccupiedFeedbackEventId">
            <summary>
            The state of "CenOdtCPoe.OrWhenOccupiedFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.AndWhenOccupiedFeedbackEventId">
            <summary>
            The state of "CenOdtCPoe.AndWhenOccupiedFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawStatesEnabledFeedbackEventId">
            <summary>
            The state of "CenOdtCPoe.RawStatesEnabledFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.IdentityOnFeedbackEventId">
            <summary>
            The state of "CenOdtCPoe.IdentityOnFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorMinimumChangeFeedbackEventId">
            <summary>
            The value of "CenOdtCPoe.InternalPhotoSensorMinimumChangeFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomIsBrightFeedbackEventId">
            <summary>
            The state of "CenOdtCPoe.RoomIsBrightFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomIsDarkFeedbackEventId">
            <summary>
            The state of "CenOdtCPoe.RoomIsDarkFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.DarkToBrightThresholdFeedbackEventId">
            <summary>
            The value of "CenOdtCPoe.DarkToBrightThresholdFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.BrightToDarkThresholdFeedbackEventId">
            <summary>
            The value of "CenOdtCPoe.BrightToDarkThresholdFeedback" has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.SensorConfigurationSettings">
            <summary>
            Reference to the GLS Cresnet Occupancy Sensor Configuration Settings. 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.SensorIrSettings">
            <summary>
            Reference to the GLS Cresnet Occupancy Sensor IR Settings.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OnGlsOccupancySensorChange(Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorChangeEventArgs)">
            <summary>
            Method to fire the GlsOccupancySensorChange event.
            </summary>
            <param name="paramArgs">Information from the Crestron GLS Cresnet Occupancy Sensor on what changed.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.#ctor(System.String,System.Object)">
            <summary>
            Constructor to generate a new GLS Cresnet Occupancy Sensor device.
            </summary>
            <param name="paramDeviceName">Name of the device.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InitializeSpecificGlsOccupancySensorDevice">
            <summary>
            Method used to initialize specific information of the GLS Cresnet Occupancy Sensor device from the derived classes.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InitializeDevice(Crestron.SimplSharpPro.CrestronDeviceWithEvents)">
            <summary>
            Method to initialize the GLS Occupancy Sensor device.
            </summary>
            <param name="paramGlsOccupancySensorDevice">Device reference to the actual GLS Occupancy Sensor device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InitializeGlsOccupancySensorInputSigs">
            <summary>
            Method to initialize input sigs of GLS Cresnet Occupancy Sensors.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InitializeGlsOccupancySensorOutputSigs">
            <summary>
            Method to initialize output sigs of GLS Cresnet Occupancy Sensors. 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._GlsCresnetOccupancySensorTopLevel_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the GLS Cresnet Occupancy Sensor Top Level Sig change events.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._GlsOccupancySensor_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the GLS Cresnet Occupancy Sensor Sig change events.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._forceOccupied">
            <summary>
            Storage of the ForceOccupied Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._forceVacant">
            <summary>
            Storage of the ForceVacant Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._enableRawStates">
            <summary>
            Storage of the EnableRawStates Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._roomOccupiedFeedback">
            <summary>
            Storage of the RoomOccupiedFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._graceOccupancyDetectedFeedback">
            <summary>
            Storage of the GraceOccupancyDetectedFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._roomVacantFeedback">
            <summary>
            Storage of the RoomVacantFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._rawOccupancyDetectedFeedback">
            <summary>
            Storage of the RawOccupancyFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._rawOccupancyPirFeedback">
            <summary>
            Storage of the RawOccupancyPirFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._rawOccupancyUsFeedback">
            <summary>
            Storage of the RawOccupancyUsFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._timeout">
            <summary>
            Storage of the Timeout Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._internalPhotoSensorMinimumChange">
            <summary>
            Storage of the InternalPhotoSensorMinimumChange Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._externalPhotoSensorMinimumChange">
            <summary>
            Storage of the ExternalPhotoSensorMinimumChange Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._timeoutFeedback">
            <summary>
            Storage of the TimeoutFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._timeoutLocalFeedback">
            <summary>
            Storage of the TimeoutLocalFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._internalPhotoSensorValueFeedback">
            <summary>
            Storage of the InternalPhotoSensorValueFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._externalPhotoSensorValueFeedback">
            <summary>
            Storage of the ExternalPhotoSensorValueFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._enableLedFlash">
            <summary>
            Storage of the EnableLedFlash Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._ledFlashEnabledFeedback">
            <summary>
            Storage of the LedFlashEnabledFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._disableLedFlash">
            <summary>
            Storage of the DisableLedFlash Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._enableShortTimeout">
            <summary>
            Storage of the EnableShortTimeout Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._shortTimeoutEnabledFeedback">
            <summary>
            Storage of the _ShortTimeoutEnabledFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._disableShortTimeout">
            <summary>
            Storage of the DisableShortTimeout Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._enablePir">
            <summary>
            Storage of the EnablePir Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._passiveInfraredSensorEnabledFeedback">
            <summary>
            Storage of the PassiveInfraredSensorEnabledFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._disablePir">
            <summary>
            Storage of the DisablePir Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._incrementPirSensitivityInOccupiedState">
            <summary>
            Storage of the IncrementPirSensitivityInOccupiedState Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._decrementPirSensitivityInOccupiedState">
            <summary>
            Storage of the DecrementPirSensitivityInOccupiedState Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._incrementPirSensitivityInVacantState">
            <summary>
            Storage of the IncrementPirSensitivityInVacantState Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._decrementPirSensitivityInVacantState">
            <summary>
            Storage of the DecrementPirSensitivityInVacantState Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._pirSensitivityInOccupiedStateFeedback">
            <summary>
            Storage of the PirSensitivityInOccupiedStateFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._pirSensitivityInVacantStateFeedback">
            <summary>
            Storage of the PirSensitivityInVacantStateFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._orWhenVacated">
            <summary>
            Storage of the OrWhenVacated Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._orWhenVacatedFeedback">
            <summary>
            Storage of the OrWhenVacatedFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._andWhenVacated">
            <summary>
            Storage of the AndWhenVacated Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._andWhenVacatedFeedback">
            <summary>
            Storage of the AndWhenVacatedFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._enableUsA">
            <summary>
            Storage of the EnableUsA Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._usAEnabledFeedback">
            <summary>
            Storage of the UsAEnabledFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._disableUsA">
            <summary>
            Storage of the DisableUsA Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._enableUsB">
            <summary>
            Storage of the EnableUsB Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._usBEnabledFeedback">
            <summary>
            Storage of the UsBEnabledFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._disableUsB">
            <summary>
            Storage of the DisableUsB Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._incrementUsSensitivityInOccupiedState">
            <summary>
            Storage of the IncrementUsSensitivityInOccupiedState Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._decrementUsSensitivityInOccupiedState">
            <summary>
            Storage of the DecrementUsSensitivityInOccupiedState Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._incrementUsSensitivityInVacantState">
            <summary>
            Storage of the IncrementUsSensitivityInVacantState Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._decrementUsSensitivityInVacantState">
            <summary>
            Storage of the DecrementUsSensitivityInVacantState Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._usSensitivityInOccupiedStateFeedback">
            <summary>
            Storage of the UsSensitivityInOccupiedStateFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._usSensitivityInVacantStateFeedback">
            <summary>
            Storage of the UsSensitivityInVacantStateFeedback Sig for GLS-ODT-C-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._enableToReceiveIrOutputs">
            <summary>
            Storage of the EnableToReceiveIrOutputs Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._commandReceivedFeedbackSigs">
            <summary>
            Storage of the CommandReceivedFeedbackSigs for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase._systemAddressReceivedFeedback">
            <summary>
            Storage of the SystemAddressReceivedFeedback Sig for GLS Cresnet Occupancy Sensor.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#ForceOccupied">
            <summary>
            Method to force the device to report that the room is occupied even if the passive infrared (PIR) sensor does not detect motion.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.VacancyDetectedFeedback"/> sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OccupancyDetectedFeedback"/> sets to true. 
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedFeedback"/> is set to true when <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ForceOccupied"/> is called. The sensor will then be in the occupied state for the duration of the set timeout.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#ForceVacant">
            <summary>
            Method to force the device to report that the room is vacant even if the passive infrared (PIR) sensor does not detect vacancy.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OccupancyDetectedFeedback"/> sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.VacancyDetectedFeedback"/> sets to true. Upon forcing vacancy, there is a 5 second delay before the sensor begins re-sensing for motion.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#EnableRawStates">
            <summary>
            Method to enable <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedFeedback"/>, <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedByPassiveInfraredSensorFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.RawOccupancyDetectedByUltrasonicSensorFeedback"/> properties.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#EnableLedFlash">
            <summary>
            Method to enable the red and green feedback LEDs. The red LED turns on as the passive infrared (PIR) sensor detects motion, and the green LED turns on as the ultrasonic (US) sensor detects motion.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#DisableLedFlash">
            <summary>
            Method to disable the red and green feedback LEDs from blinking when motion is detected.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#EnableShortTimeout">
            <summary>
            Method to enable a “walk-through” mode for a shorter timeouts upon periods of minimal occupancy. If the room is occupied for less than 90s, the timeout will revert to 60s.
            If the normally programmed timeout is set less than 60s, that timeout will take precedence. This is useful for rooms with normally a long timeout setting, so if the room is
            only entered for a short period of time, and occupancy is triggered, the lights do not remain on for a longer period than needed.
            Short timeout does not apply if occupancy event was  a ""Grace occupancy"" (previous vacancy time is greater than 15 seconds).
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#DisableShortTimeout">
            <summary>
            Method to disable the short timeout functionality. See <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.EnableShortTimeout"/> method for description.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#OrWhenVacated">
            <summary>
            Method to trigger either passive infrared (PIR) OR ultrasonic (US) motion sensors to declare initial occupancy and set the sensor to the occupied state, if the room is vacant.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#AndWhenVacated">
            <summary>
            Method to trigger both passive infrared (PIR) OR ultrasonic (US) motion sensors to detect motion to declare initial occupancy, if the room is vacant.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#EnableUltrasonicSensorSideA">
            <summary>
            Method to enable the ultrasonic (US) Sensor side A. Does NOT disable side B. Side A is the side where the majority of the red LED is shown through the dome.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#DisableUltrasonicSensorSideA">
            <summary>
            Method to disable the ultrasonic (US) Sensor side A. This does NOT enable side B.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#EnableUltrasonicSensorSideB">
            <summary>
            Method to enable the ultrasonic (US) Sensor side B. This does NOT disable side A. Side B is the side where the majority of the green LED is shown through the dome and is also identified on the back-housing plastic rim.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#DisableUltrasonicSensorSideB">
            <summary>
            Method to disable the ultrasonic (US) Sensor side B. This does not enable side A.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#EnablePassiveInfraredSensor">
            <summary>
            Method to enable the passive infrared (PIR) Sensor.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#DisablePassiveInfraredSensor">
            <summary>
            Method to disable the passive infrared (PIR) Sensor.
            </summary>
        </member>
        <member name="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange">
            <summary>
            Event triggered when the GLS Cresnet Occupancy Sensor reports information to the Control System.
            <para>Valid event IDs are available in <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase"/></para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#RawOccupancyDetectedFeedback">
            <summary>
            This property value will be set to true if ultrasonic (US) AND/OR passive infrared (PIR) sensors detect motion. The AND/OR determination is decided based upon the chosen logic.
            To see which logic is chosen, look at <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.OrWhenVacatedFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.IGlsCenOcc.AndWhenVacatedFeedback"/>.
            For example, in “Vacancy AND” logic both ultrasonic (US) and passive infrared (PIR) technologies must register motion in order to set this property value to true.
            true = motion detected by logical state; false = No motion detected by logical state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#RawOccupancyDetectedByPassiveInfraredSensorFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the passive infrared (PIR) sensor.
            true = motion detected by passive infrared (PIR) sensor; false = No motion detected by passive infrared (PIR) sensor.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyPirFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#RawOccupancyDetectedByUltrasonicSensorFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the ultrasonic (US) sensor.
            true = motion detected by ultrasonic (US); false = No motion detected by ultrasonic (US).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyUsFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#LedFlashEnabledFeedback">
            <summary>
            Property to indicate if feedback LEDs are enabled or disabled that indicates if motion is detected.
            true = Feedback LEDs enabled; false = Feedback LEDs disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LedFlashEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#OrWhenVacatedFeedback">
            <summary>
            Property to indicate if either passive infrared (PIR) OR ultrasonic (US) sensor technologies can trigger initial occupancy.
            true = motion sensed needed by only one technology; false = OR logic disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OrWhenVacatedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#AndWhenVacatedFeedback">
            <summary>
            Property to indicate if both passive infrared (PIR) OR ultrasonic (US) sensor technologies must register motion to trigger initial room occupancy.
            true = motion sensed needed by both technologies for initial occupancy; false = AND logic disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.AndWhenVacatedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#UltrasonicSensorSideAEnabledFeedback">
            <summary>
            Property to report if the ultrasonic (US) Sensor side A is enabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsAEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#UltrasonicSensorSideBEnabledFeedback">
            <summary>
            Property to report if the ultrasonic (US) Sensor side B is enabled.
            true = US Sensor B enabled; false = US Sensor B disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsBEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PassiveInfraredSensorEnabledFeedback">
            <summary>
            Property to report if the PIR Sensor is enabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#UltrasonicSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report Sensitivity level for ultrasonic (US) while sensor is in occupied state. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInOccupiedStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#UltrasonicSensorSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for ultrasonic (US) while sensor is in vacant state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInVacantStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#PassiveInfraredSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report Sensitivity level for passive infrared (PIR) while sensor is in occupied state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInOccupiedStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.Crestron#SimplSharpPro#GeneralIO#IGlsCenOcc#PassiveInfraredSensorSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for passive infrared (PIR) while sensor is in vacant state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInVacantStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ForceOccupied">
            <summary>
            Property to force the device to report that the room is occupied even if the infrared sensor does not detect motion.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ForceVacant">
            <summary>
            Property to force the sensor into the state of vacancy.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.EnableRawStates">
            <summary>
            Property to enable <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedback"/> property.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OccupancyDetectedFeedback">
            <summary>
            Property to indicate when the room is occupied.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomOccupiedFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GraceOccupancyDetectedFeedback">
            <summary>
            Property to indicate occupancy event detected within 15s of initial vacancy event.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GraceOccupancyDetectedFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.VacancyDetectedFeedback">
            <summary>
            Property to indicate when the room is vacant.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomVacantFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedback">
            <summary>
            Property to return the current occupancy status. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RemoteTimeout">
            <summary>
            Property to set a dynamic timeout.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorMinimumChange">
            <summary>
            Property to set the minimum change in value that the internal Photosensor must sense before reporting a new value.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ExternalPhotoSensorMinimumChange">
            <summary>
            Property to set the minimum change in lux that the external Photosensor must see before reporting a new value.
            This property is not supported by "GlsOirLclCCn" device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.CurrentTimeoutFeedback">
            <summary>
            Property to indicate which timeout being used by the sensor.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.TimeoutFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LocalTimeoutFeedback">
            <summary>
            Property to report the timeout set from the IR remote.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.TimeoutLocalFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorValueFeedback">
            <summary>
            Property to report the internal photosensor value.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorValueFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ExternalPhotoSensorValueFeedback">
            <summary>
            Property to report the external photosensor value.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ExternalPhotoSensorValueFeedbackEventId"/>.</para>
            This property is not supported by "GlsOirLclCCn" device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.EnableLedFlash">
            <summary>
            Property to enable the red feedback LEDs.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LedFlashEnabledFeedback">
            <summary>
            Property to indicate if feedback LED is enabled or disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LedFlashEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.DisableLedFlash">
            <summary>
            Property to disable the red feedback LED from blinking when motion is detected.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.EnableShortTimeout">
            <summary>
            Property to enable a “walk-through” mode for a shorter timeouts upon periods of minimal occupancy.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ShortTimeoutEnabledFeedback">
            <summary>
            Property to report if the short timeout functionality has been enabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ShortTimeoutEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.DisableShortTimeout">
            <summary>
            Property to disable the short timeout functionality.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.EnablePir">
            <summary>
            Property to enable the PIR Sensor.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirEnabledFeedback">
            <summary>
            Property to report if the PIR Sensor is enabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.DisablePir">
            <summary>
            Property to disable the PIR Sensor.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.IncrementPirSensitivityInOccupiedState">
            <summary>
            Property to increase the PIR sensitivity while sensor is in occupied state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.DecrementPirSensitivityInOccupiedState">
            <summary>
            Property to decrease PIR sensitivity while sensor is in occupied state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.IncrementPirSensitivityInVacantState">
            <summary>
            Property to increase the PIR sensitivity while sensor is in vacant state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.DecrementPirSensitivityInVacantState">
            <summary>
            Property to decrease the PIR sensitivity while sensor is in vacant state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report Sensitivity level for PIR while sensor is in occupied state. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInOccupiedStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for PIR while sensor is in vacant state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInVacantStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.EnableToReceiveIrOutputs">
            <summary>
            Property to enable the IR outputs.
            This property is not supported by "GlsOirLclCCn" device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.CommandReceivedFeedbackSigs">
            <summary>
            Property to return a collection of Sigs each corresponding to an command number. Each BoolOutputSig is toggled when the IR receiver hears the corresponding command number.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.CommandReceivedFeedbackEventId"/>.</para>
            This property is not supported by "GlsOirLclCCn" device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.SystemAddressReceivedFeedback">
            <summary>
            Property to return the system address heard by the IR receiver.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.SystemAddressReceivedFeedbackEventId"/>.</para>
            This property is not supported by "GlsOirLclCCn" device.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn">
            <summary>
            Cresnet-based passive infrared (PIR) occupancy sensor.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event.</para>
            </summary>
            <example>
            Refer the example code for "GlsOirLclCCn".
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new GLS-OIR-C-CN Occupancy Sensor that resides on the cresnet bus for the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <exception cref="T:System.ArgumentNullException">The IDeviceBranch specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new GLS-OIR-C-CN Occupancy Sensor that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to. </param>
            <exception cref="T:System.ArgumentNullException">The Control System specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.InitializeSpecificGlsOccupancySensorDevice">
            <summary>
            Method used to initialize specific information of the GLS Cresnet Occupancy Sensor device from the derived classes.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.CresnetGlsOirCCn">
            <summary>
            Auto generated class for GLS-OIR-C-CN and GLS-OIRLCL-C-CN Cresnet Occupancy Sensors.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.CresnetGlsOirCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots,Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase)">
            <summary>
            Constructor used to add this device to a CresnetBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
            <param name="paramParent"></param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.CresnetGlsOirCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramParent"></param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.CresnetGlsOirCCn.GlsOirCCnSensorIrSettings.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCCn.CresnetGlsOirCCn.GlsOirCCnSensorConfigurationSettings.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn">
            <summary>
            Cresnet-based dual technology sensor that uses passive infrared and ultrasonic technologies to detect occupancy.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new GLS-ODT-C-CN Occupancy Sensor that resides on the cresnet bus of a IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <exception cref="T:System.ArgumentNullException">The IDeviceBranch specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new GLS-ODT-C-CN Occupancy Sensor that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to. </param>
            <exception cref="T:System.ArgumentNullException">The Control System specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.InitializeSpecificGlsOccupancySensorDevice">
            <summary>
            Method used to initialize specific information of the GLS-ODT-C-CN Cresnet Occupancy Sensor device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.RawOccupancyPirFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the PIR sensor. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyPirFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.RawOccupancyUsFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the US sensor. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyUsFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.OrWhenVacated">
            <summary>
            Property to trigger either passive infrared (PIR) OR ultrasonic (US) motion sensors to declare 
            initial occupancy and set the sensor to the occupied state, if the room is vacant.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.OrWhenVacatedFeedback">
            <summary>
            Property to indicate if either PIR OR US sensor technologies can trigger initial occupancy.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OrWhenVacatedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.AndWhenVacated">
            <summary>
            Property to trigger both PIR AND US motion sensors to detect motion to declare initial occupancy, if the room is vacant.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.AndWhenVacatedFeedback">
            <summary>
            Property to indicate if both PIR AND US sensor technologies must register motion to trigger initial room occupancy. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.AndWhenVacatedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.EnableUsA">
            <summary>
            Property to enables the US Sensor side A. Does NOT disable side B.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsAEnabledFeedback">
            <summary>
            Property to report if the US Sensor side A is enabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsAEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.DisableUsA">
            <summary>
            Property to disable the US Sensor side A. This does NOT enable side B.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.EnableUsB">
            <summary>
            Property to enable the US Sensor side B. This does NOT disable side A.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsBEnabledFeedback">
            <summary>
            Property to report if the US Sensor side B is enabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsBEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.DisableUsB">
            <summary>
            Property to disable the US Sensor side B. This does not enable side A.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.IncrementUsSensitivityInOccupiedState">
            <summary>
            Property to increase the US sensitivity while sensor is in occupied state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.DecrementUsSensitivityInOccupiedState">
            <summary>
            Property to decrease US sensitivity while sensor is in occupied state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.IncrementUsSensitivityInVacantState">
            <summary>
            Property to increase the US sensitivity while sensor is in vacant state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.DecrementUsSensitivityInVacantState">
            <summary>
            Property to decrease US sensitivity while sensor is in vacant state by 1.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report the Sensitivity level for US while sensor is in occupied state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInOccupiedStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.UsSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for US while sensor is in vacant state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInVacantStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.CresnetGlsOdtCCn">
            <summary>
            Auto generated class for GLS-ODT-C-CN Cresnet Occupancy Sensor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.CresnetGlsOdtCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor to generate this device a part of a CresnetBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.CresnetGlsOdtCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.CresnetGlsOdtCCn.GlsOdtCCnSensorIrSettings.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOdtCCn.CresnetGlsOdtCCn.GlsOdtCCnSensorConfigurationSettings.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.StCom">
             <summary>
             The ST-COM provides two COM ports for controlling serial devices over RS-232, RS-424, or RS-485. 
             This device has to receive string and CTS as feedbacks.
             </summary>
             <example>
             <code>
             static StCom myStCom;
             public ControlSystemStcom()
             {
                 //Register console commands
                 CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateStCom", "This is a StCom2 CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                 CrestronConsole.AddNewConsoleCommand(SendCmd, "SendCOM2", "This is a StCom2 Send command to send string out to a com port", ConsoleAccessLevelEnum.AccessOperator);
                 CrestronConsole.AddNewConsoleCommand(SendShortBreakCmd, "ShrtBrkCOM2", "This is a StCom2 ShrtBrkCOM2 command to send short break to a com port", ConsoleAccessLevelEnum.AccessOperator);
             }
             
             //Function to create the ST-COM device object.
             public void CreateDeviceCmd(String args)
             {
                 myStCom = new StCom(0x17, this);
             
                 ComPort.ComPortSpec spec = new ComPort.ComPortSpec
                 {
                     BaudRate = ComPort.eComBaudRates.ComspecBaudRate115200,
                     Parity = ComPort.eComParityType.ComspecParityEven,
                     Protocol = ComPort.eComProtocolType.ComspecProtocolRS232,
                     DataBits = ComPort.eComDataBits.ComspecDataBits7,
                     StopBits = ComPort.eComStopBits.ComspecStopBits1,
                     SoftwareHandshake = ComPort.eComSoftwareHandshakeType.ComspecSoftwareHandshakeNone,
                     HardwareHandShake = ComPort.eComHardwareHandshakeType.ComspecHardwareHandshakeCTS
                 };
                    
                 myStCom.ComPorts[1].SetComPortSpec(spec);
                 myStCom.Register();
                 CrestronConsole.ConsoleCommandResponse("{0} device successfully registered\r\n", com.ToString()); 
            
                 <![CDATA[for (uint i = 1; i <= myStCom.NumberOfComPorts; i++)]]>
                 {
                     myStCom.ComPorts[i].PropertyChanged += ComPort_PropertyChanged;
                     myStCom.ComPorts[i].SerialDataReceived += ComPort_SerialDataReceived;
                 }
             
                 myStCom.ComPorts[1].TransmitString = "Crestron";
                 myStCom.ComPorts[2].TransmitString = "Electronics";
             }
             
             //Method to handle received serial data from a comport.
             static void ComPort_SerialDataReceived(ComPort receivingComport, ComPortSerialDataEventArgs args)
             {
                CrestronConsole.PrintLine("Com Port data is received{0}\n\r", args.SerialData);
             }
              
             //Method to handle property change from a comport.
             static void ComPort_PropertyChanged(ComPort receivingComport, ComPortPropertyEventArgs args)
             {
                 if (args.Property == eComPortProperty.CTS)
                 {
                     CrestronConsole.PrintLine("ST-COM Port {0} CTS Changed to {1}", receivingComport.ID, receivingComport.CD);
                 }
             }  
               
             //Method to send string to a com port.
             public void SendCmd(string args)
             {
                 if (args == "1")
                 {
                     com.ComPorts[Convert.ToUInt32(args)].Send("Crestron");
                     CrestronConsole.PrintLine("{0} String is sent to device successfully.\r\n", args.ToString());
                 }
                 else if (args == "2")
                 {
                     com.ComPorts[Convert.ToUInt32(args)].Send("Electronics");
                     CrestronConsole.PrintLine("{0} String is sent to device successfully.\r\n", args.ToString());
                 }
             } 
               
             //Method to send a short break to a com port.
             public void SendShortBreakCmd(string args)
             {
                 myStCom.ComPorts[Convert.ToUInt32(args)].SendShortBreak();
                 CrestronConsole.PrintLine("{0} Short break is sent to device successfully.\r\n", args.ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StCom.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate <see cref="T:Crestron.SimplSharpPro.GeneralIO.StCom"/> object.
            </summary>
            <param name="paramCresnetId">Cresnet ID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.StCom"/> is on.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StCom.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate <see cref="T:Crestron.SimplSharpPro.GeneralIO.StCom"/> object.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this <see cref="T:Crestron.SimplSharpPro.GeneralIO.StCom"/> device is a part of.</param>
            <exception cref="T:System.ArgumentNullException">The IDeviceBranch specified is not initialized.</exception>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StCom.ComPorts">
            <summary>
            Collection of serial COM ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StCom.NumberOfComPorts">
            <summary>
            Number of serial COM ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CresnetStCom">
            <summary>
            Actual Device class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.StCom"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStCom.ComPort1">
            <summary>
            Data Bit Support: 7, 8
            Stop Bit Support: 2, 1
            SW HandShaking Support: XONR, XONT, XON, (None)
            Protocol Support: RS485, (RS232), RS422
            Parity Support: Z, O, E, N
            HW HandShaking Support: RTS, CTS, RTS/CTS, (None)
            Baud Rate Support: 300, 600, 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400, 19200, 28800, 38400, 57600, 115200
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStCom.ComPort2">
            <summary>
            Data Bit Support: 7, 8
            Stop Bit Support: 2, 1
            SW HandShaking Support: XONR, XONT, XON, (None)
            Protocol Support: RS485, (RS232), RS422
            Parity Support: Z, O, E, N
            HW HandShaking Support: RTS, CTS, RTS/CTS, (None)
            Baud Rate Support: 300, 600, 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400, 19200, 28800, 38400, 57600, 115200
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetStCom.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,Crestron.SimplSharpPro.GeneralIO.StCom)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">Control system this device is attached to.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetStCom.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots,Crestron.SimplSharpPro.GeneralIO.StCom)">
            <summary>
            Constructor used to add this device to a CresnetBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetStCom.CommonInit(Crestron.SimplSharpPro.GeneralIO.StCom)">
            <summary>
            Method to initialize the comports.
            </summary>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetStCom.ComPorts">
            <summary>
            Collection of serial COM ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetStCom.NumberOfComPorts">
            <summary>
            Number of serial COM ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds">
            <summary>
            Event Ids used on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt"/> that will trigger the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.OccupancyStatusReceivedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.OccupancyDetectedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.GraceOccupancyStatusReceivedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.GraceOccupancyDetectedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.VacancyStatusReceived">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.VacancyDetectedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.BatteryLowStatusReceivedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.BatteryLowFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.LocalTimeoutReceivedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.LocalTimeoutFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.CurrentTimeoutReceivedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.CurrentTimeoutFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt">
            <summary>
            infiNET EX battery-powered occupancy sensor that uses passive infra-red to detect occupancy.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with event IDs from <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds"/>.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new GLS-OIR-CSM-EX-BAT Wireless Occupancy Sensor
            </summary>
            <param name="paramRfId">RFID of this device on the gateway.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">RFID passed is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.InitializeGlsOirCsmExBattSigs">
            <summary>
            Method to initialize sigs of the GLS-OIR-CSM-EX-BATT Wireless Occupancy Sensor. 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._WirelessOccupancySensor_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the GLS-OIR-CSM-EX-BATT Wireless Occupancy Sensor Sig change events.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._occupancyDetectedFeedback">
            <summary>
            Storage of the OccupancyDetectedFeedback Sig for GLS-OIR-CSM-EX-BATT.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._graceOccupancyDetectedFeedback">
            <summary>
            Storage of the GraceOccupancyDetectedFeedback Sig for GLS-OIR-CSM-EX-BATT.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._vacancyDetectedFeedback">
            <summary>
            Storage of the VacancyDetectedFeedback Sig for GLS-OIR-CSM-EX-BATT.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._batteryLowFeedback">
            <summary>
            Storage of the BatteryLowFeedback Sig for GLS-OIR-CSM-EX-BATT.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._remoteTimeout">
            <summary>
            Storage of the RemoteTimeout Sig for GLS-OIR-CSM-EX-BATT.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._localTimeoutFeedback">
            <summary>
            Storage of the LocalTimeoutFeedback Sig for GLS-OIR-CSM-EX-BATT.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt._currentTimeoutFeedback">
            <summary>
            Storage of the CurrentTimeoutFeedback Sig for GLS-OIR-CSM-EX-BATT.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.OccupancyDetectedFeedback">
            <summary>
            Property to indicate the occupancy/vacancy detected status. Value is true when occupancy is detected, and value is false when vacancy is detected. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.OccupancyStatusReceivedEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.GraceOccupancyDetectedFeedback">
            <summary>
            Property to indicate the occupancy detected status after 15s after a vacancy event. 
            This property is most commonly used in an application where a vacancy-only sensor is desired.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.GraceOccupancyStatusReceivedEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.VacancyDetectedFeedback">
            <summary>
            Property to indicate vacancy/occupancy detected status. Value is true when vacancy is detected and value is false occupancy is detected. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.VacancyStatusReceived"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.BatteryLowFeedback">
            <summary>
            Property to report that the sensor’s battery is at low power and should be replaced at the user’s earliest convenience.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.BatteryLowStatusReceivedEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.RemoteTimeout">
            <summary>
            Property to set the timeout. A nonzero value will override the local potentiometer 
            setting and use the value propagating from this sig. Inputting a value of 0 will direct the 
            sensor to use the local potentiometer setting timeout.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.LocalTimeoutFeedback">
            <summary>
            Property to indicate the value of the timeout set by the local potentiometer. The value 
            will be between 30 and 1800 seconds. If changed, this value will not update until the 
            next period of occupancy.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.LocalTimeoutReceivedEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.CurrentTimeoutFeedback">
            <summary>
            Property to indicate which timeout is being used by the sensor. This value will be either the local potentiometer timeout or the <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.RemoteTimeout"/> value. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBattEventIds.CurrentTimeoutReceivedEventId"/>.</para> 
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.RfGlsOirCsmExBatt">
            <summary>
            Auto generated class for GLS-OIR-CSM-EX-BAT Wireless Occupancy Sensor for RF Communication
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirCsmExBatt.RfGlsOirCsmExBatt.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used when the device is added to a external device. 
            </summary>
            <param name="rfId">ID of this device</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <param name="paramBaseDevice">Parent device to add this device to.</param>
            <exception cref="T:System.InvalidOperationException">Unable to add the child device. Possibly invalid ID or device type being added is not supported.</exception>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt">
             <summary>
             Battery operated compact infiNET EX Wireless door sensor.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
             </summary>
             <example>
             <code>
                static InetsIoexDoorBatt _device;
            
                public ControlSystemInetsIoexDoorBatt()
                {
                    //Register console commands
                    CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a INETS-IOEX-DOOR-BATT CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                }
            
                public void CreateDeviceCmd(String args)
                {
                    //For internal gateway, this will work only with MC3 but not for RMC3 or CP3
                    _device = new InetsIoexDoorBatt(0x3, ControllerRFGatewayDevice);
            
                    _device.BaseEvent += DeviceEventHandler;
                    _device.Register();
                }
            
                // Method to handle sig change events for INETS-IOEX-DOOR-BATT infiNET EX Door Sensor Device.
                static void DeviceEventHandler(GenericBase device, BaseEventArgs args)
                {
                    if (args.EventId == InetsIoexDoorBatt.DoorClosedEventId)
                    {
                        CrestronConsole.PrintLine("{0} Door Closed Event Occurred", device.ToString());
                    }
                }
             </code>
             </example>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorClosedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorClosedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorOpenedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorOpenedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.BatteryLowEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.BatteryLowFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>       
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorClosedFeedback">
            <summary>
            Property to indicate that the door is closed.
            'true' = door closed; 'false' = door not closed
            <para>This property will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with <see cref="F:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorClosedEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorOpenedFeedback">
            <summary>
            Property to indicate that the door is opened.
            'true' = door opened; 'false' = door not opened
            <para>This property will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with <see cref="F:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.DoorOpenedEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.BatteryLowFeedback">
            <summary>
            Property to indicate that the door sensor battery level is low.
            'true' = battery level is low; 'false' = battery level is not low
            <para>This property will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with <see cref="F:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.BatteryLowEventId"/>.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetsIoexDoorBatt.RfInetsIoexDoorBatt.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to add the device to any gateway.          
            </summary>
            <param name="rfId">ID of this device</param>            
            <param name="paramBaseDevice"></param>
            <param name="paramGateway"></param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom">
            <summary>
            Compact infiNET EX Wireless IR/RS-232 control interface 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new INET-IOEX-IRCOM that is attached to the specified RF gateway.
            </summary>
            <param name="paramRFID">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>       
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.ExtenderIoexComOverflowControls">
            <summary>
            Access the ComOvercontrols for this IOEX's COM Ports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.IROutputPorts">
            <summary>
            Collection of IR output ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.NumberOfIROutputPorts">
            <summary>
            Number of IR output ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.ComPorts">
            <summary>
             Collection of serial COM ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.NumberOfComPorts">
            <summary>
            Number of serial COM ports this device supports.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.RF_INET_IOEX_IRCOM.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to add the device to any gateway.          
            </summary>
            <param name="RFID">ID of this device</param>            
            <param name="paramBaseDevice"></param>
            <param name="paramGateway"></param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.RF_INET_IOEX_IRCOM.COM.ComPort1">
            <summary>
            SW HandShaking Support: (None), XON, XONT, XONR
            HW HandShaking Support: (None), RTS/CTS, CTS, RTS
            Parity Support: N, O, E
            Protocol Support: (RS232)
            Data Bit Support: 8, 7
            Stop Bit Support: 1, 2
            Baud Rate Support: 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400, 19200, 28800, 38400, 57600, 115200
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetIoexIrcom.RF_INET_IOEX_IRCOM.COM.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice,System.Object)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId"> Id to add the device at</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.IoexComOverflowControls">
            <summary>
            Extender used to detect COM overflow conditions of the IOEX.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IoexComOverflowControls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Constructor to generate a new COM overflow extender.
            </summary>
            <param name="paramParentDevice"></param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IoexComOverflowControls.ClearOverflow">
            <summary>
            Clears the overflow indicator.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.IoexComOverflowControls.InitializeJoins">
            <summary>
            Method to initialize the Cues for this extender.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.IoexComOverflowControls.OverflowStatusFeedback">
            <summary>
            Indicates that there is too much data received over the serial port and that not all data can be send to the control system. 
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsOirLclCCn">
             <summary>
             Cresnet-based passive infrared (PIR) occupancy sensor without the external ambient light level.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GlsOccupancySensorChange"/>event.</para>
              </summary>
             <example>
             <code>
                static GlsOirLclCCn _glsOirCCn;
            
                public ControlSystemGlsOirCCn()
                {
                    //Register console commands
                    CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a GLS-OIRLCL-C-CN CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                }
            
                //Method to create the device object
                public void CreateDeviceCmd(String args)
                {
                    _glsOirCCn = new GlsOirLclCCn(0x17, this);
                    _glsOirCCn.BaseEvent += GlsOirCCnPropertyChangeEventHandler;
                    _glsOirCCn.GlsOccupancySensorChange += OccupancySensorPropertyChange;
            
                    _glsOirCCn.Register();
                }
            
                //Method to handle the Occupancy Sensor slot property change events
                public void OccupancySensorPropertyChange(GlsOccupancySensorBase device, GlsOccupancySensorChangeEventArgs args)
                {
                    if (args.EventId == GlsOccupancySensorBase.LedFlashEnabledFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("Led Flash Enabled Feedback Event Received, LedFlashEnabledFeedback state is {0}", _glsOirCCn.LedFlashEnabledFeedback.BoolValue);
                    }
                }
            
                //Method to handle the top level slot property change events 
                public void GlsOirCCnPropertyChangeEventHandler(GenericBase device, BaseEventArgs args)
                {
                    if (args.EventId == GlsOccupancySensorBase.RoomOccupiedFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("Room Occupied Feedback Event Received, OccupancyDetectedFeedback state is {0}", _glsOirCCn.OccupancyDetectedFeedback.BoolValue);
                    }
                }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirLclCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new GLS-OIRLCL-C-CN Occupancy Sensor that resides on the cresnet bus for the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <exception cref="T:System.ArgumentNullException">The IDeviceBranch specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsOirLclCCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new GLS-OIRLCL-C-CN Occupancy Sensor that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to. </param>
            <exception cref="T:System.ArgumentNullException">The Control System specified is not initialized.</exception>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.StatusSign">
             <summary>
             LED back lit room sign that can be controlled via Cresnet.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
             </summary>
             <example>
             <code>
                static StatusSign statusSignDevice;
            
                public ControlSystemCSign()
                {
                    //Register console commands
                    CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a StatusSign CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                    CrestronConsole.AddNewConsoleCommand(SetControlOnCmd, "SetControlOn", "This is a StatusSign SetControlOn command", ConsoleAccessLevelEnum.AccessOperator);
                }
            
                // Method to handle StatusSign top level sig change events.
                static void StatusSignEventHandler(GenericBase device, BaseEventArgs args)
                {
                    if (args.EventId == StatusSign.LedControlFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("{0} Led Control Feedback Event received, Control State is {1}\r\n", statusSignDevice.Leds[(uint)args.Index].Color, statusSignDevice.Leds[(uint)args.Index].ControlFeedback.BoolValue);
                    }
                }
            
                // Method to create a StatusSign device.
                public void CreateDeviceCmd(String args)
                {
                    //Initialize the StatusSign device
                    statusSignDevice = new StatusSign(0x18, this);
            
                    statusSignDevice.BaseEvent += StatusSignEventHandler;
            
                    //Register the StatusSign with the Control system
                    statusSignDevice.Register();
                }
            
                // Method to set the specified LED control on.
                // How to use the command:  SetControlOn 1-3  To set control to on
                public void SetControlOnCmd(String args)
                {
                    uint i = Convert.ToUInt32(args);
                    <![CDATA[if ((i > 0) && (i <= 3))]]>
                    {
                        statusSignDevice.Leds[i].Control.BoolValue = true;
                        CrestronConsole.PrintLine("{0} device LED {1} Control state is {2}\r\n", statusSignDevice.ToString(), args, statusSignDevice.Leds[i].Control.BoolValue);
                    }
                }
             </code>
             </example>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.LedControlFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.ControlFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.LedBlinkTimeFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.BlinkTimeFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.LedBrightnessFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.BrightnessFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StatusSign.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign"/> device.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StatusSign.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign"/> device.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Leds">
            <summary>
            Collection of <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led"/> objects for <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign"/>.
            This collection contains one of each LED (Red, Green, Blue) and to set the color of the sign the user must set the <see cref="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.Control"/> value to true of each LED and then the <see cref="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.Brightness"/> shall be set to required value.
            <para>This property will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with event IDs defined in <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign"/>.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led">
            <summary>
            LED Class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign"/> LED Control sigs.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.#ctor(Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eLedColor,Crestron.SimplSharpPro.GeneralIO.StatusSign,Crestron.SimplSharpPro.CrestronDeviceWithEvents)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led"/> object.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.Number">
            <summary>
            Returns the LED Number.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.Color">
            <summary>
            Returns the current LED Color.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.Parent">
            <summary>
            The parent that a RemoteEnd object was added to.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.UserSpecifiedObject">
            <summary>
            Can be assigned anything that user wants.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.Control">
            <summary>
            Property to enable the LED.
            true = Enable the LED; false = Disable the LED
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.ControlFeedback">
            <summary>
            Property to indicate that the LED is enabled.
            <para>This property will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with <see cref="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.LedControlFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.BlinkTime">
            <summary>
            Property to set the LED blink time.
            0 = Blinking disabled; 1 - 1000 = Blink rate in 100ms increments
            10 means 10 * 100ms = 1000ms
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.BlinkTimeFeedback">
            <summary>
            Property to report the current LED blink time.
            0 = Blinking disabled; 1 - 1000 = Blink rate in 100ms increments
            10 means 10 * 100ms = 1000ms
            <para>This property will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with <see cref="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.LedBlinkTimeFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.Brightness">
            <summary>
            Property to set the LED brightness value.
            0 - 100% = Brightness changes in 10% increments
            Use "SimplSharpDeviceHelper.PercentToUshort" to convert the percentage to a ushort value or
            "SimplSharpDeviceHelper.UshortToPercent" to convert the ushort value to percentage.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value passed for LED brightness is not defined in the enum <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues"/>.</exception>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.BrightnessFeedback">
            <summary>
            Property to report the current LED brightness value.
            0 - 100% = Brightness changes in 10% increments
            Use "SimplSharpDeviceHelper.PercentToUshort" to convert the percentage to a ushort value or
            "SimplSharpDeviceHelper.UshortToPercent" to convert the ushort value to percentage.
            <para>This property will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event with <see cref="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.LedBrightnessFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eLedColor">
            <summary>
            Enum to define the LED colors for <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eLedColor.Red">
            <summary>
            Red LED
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eLedColor.Green">
            <summary>
            Green LED
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eLedColor.Blue">
            <summary>
            Blue LED
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues">
            <summary>
            Enum to define valid Brightness Percentage values.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.ZeroPercent">
            <summary>
            0 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.TenPercent">
            <summary>
            10 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.TwentyPercent">
            <summary>
            20 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.ThirtyPercent">
            <summary>
            30 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.FortyPercent">
            <summary>
            40 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.FiftyPercent">
            <summary>
            50 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.SixtyPercent">
            <summary>
            60 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.SeventyPercent">
            <summary>
            70 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.EightyPercent">
            <summary>
            80 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.NinetyPercent">
            <summary>
            90 Percent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.StatusSign.Led.eBrightnessPercentageValues.HundredPercent">
            <summary>
            100 Percent
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.StatusSign.CresnetCSign">
            <summary>
            Auto generated class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.StatusSign"/> device for Cresnet Communication.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StatusSign.CresnetCSign.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="cId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StatusSign.CresnetCSign.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor used when the device is added to a external device. (External Gateway, Salve Cresnet, etc.)
            
            </summary>
            <param name="cId">ID of this device.</param>
            /// <param name="paramCresnetBranch">Cresnet ShadePowerSupplyBranch this device is added to.</param>
            <exception cref="T:System.InvalidOperationException">Unable to add the child device. Possibly invalid ID or device type being added is not supported.</exception>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus">
            <summary>
            Enum to define the status on the segments on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/> devices.  The enum represents 
            bitfields that can be tested for.  For example, if Y and Z are both shorted to ground the value returned will be 0x0022.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.YZGood">
            <summary>
            Y and Z lines are good.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.YShortTo24">
            <summary>
            Y line is shorted to 24.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.YShortToGround">
            <summary>
            Y line is shorted to ground.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.YBrokenLine">
            <summary>
            Y line is not connected.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.ZShortTo24">
            <summary>
            Z line is shorted to 24.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.ZShortToGround">
            <summary>
            Z line is shorted to ground.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.ZBrokenLine">
            <summary>
            Z line is not connected.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.YShortToZ">
            <summary>
            Y line is shorted with Z line.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.YCrossedWithZ">
            <summary>
            Y and Z lines are connected switched.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.YZUnbalanced">
            <summary>
            The differential between the Y and Z lines is not consistent
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.RecentPowerFault">
            <summary>
            A power fault was recently detected.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetSegmentStatus.NoDevicesFound">
            <summary>
            No devices were found as a result of running a segment test.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetStatus">
            <summary>
            Enum which defines the values of the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.HubStatusFeedback"/> property on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> 
            and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/> devices
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetStatus.Normal">
            <summary>
            Status is Normal
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetStatus.ShadeRaise">
            <summary>
            Status is Shade Raise
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetStatus.ShadeLower">
            <summary>
            Status is Shade Lower
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetStatus.TestMode">
            <summary>
            Status is Test Mode
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetPowerSupplyErrorStatus">
            <summary>
            Enum which defines the values of the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.PowerSupplyErrorStatusFeedback"/> property on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> 
            and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/> devices.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetPowerSupplyErrorStatus.Nominal">
            <summary>
            Power supply is operating under normal conditions with no faults.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetPowerSupplyErrorStatus.ExceedsContinuousCurrent">
            <summary>
            Power supply has exceeded continuous current rating.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetPowerSupplyErrorStatus.ExceedsDutyCycleLimitedCurrent">
            <summary>
            Power supply has exceeded the duty cycle limited current rating.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetPowerSupplyErrorStatus.FailedOrNotPowered">
            <summary>
            Power supply has failed or has lost power.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubType">
            <summary>
            Which hub type are we using - top level (on the ethernet hub) or the droppable device on the hub, this is used
            to configure the joins correctly internally.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubType.TopLevel">
            <summary>
            Top level device on the ethernet hub.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubType.Slave">
            <summary>
            The device that drops on Cresnet or one of the hub branches.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds">
            <summary>
            Class to define the valid EventIds for the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> events.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.InTestModeFeedbackEventId">
            <summary>
            The hub's test mode feedback has changed.
            <para>This Event Id will trigger on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>.  
            The state can be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.InTestModeFeedback"/> property.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentTestDoneFeedbackEventId">
            <summary>
            The hub's segment test done feedback has changed.
            <para>This Event Id will trigger on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>.  
            The state can be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.SegmentTestDoneFeedback"/> property.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.OverTemperatureFeedbackEventId">
            <summary>
            The hub's over temperature feedback has changed.
            <para>This Event Id will trigger on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>.  
            The state can be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.OverTemperatureFeedback"/> property.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.HubStatusFeedbackEventId">
            <summary>
            The hub's status feedback has changed.
            <para>This Event Id will trigger on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>.  
            The state can be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.HubStatusFeedback"/> property.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.TestResultsFeedbackEventId">
            <summary>
            The hub's test results feedback has changed.
            <para>This Event Id will trigger on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>.  
            The state can be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.TestResultsFeedback"/> property.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.PowerSupplyErrorStatusFeedbackEventId">
            <summary>
            The power supply error status has changed.
            <para>This Event Id will trigger on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>.  
            The state can be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.PowerSupplyErrorStatusFeedback"/> property.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentDisabledFeedbackEventId">
            <summary>
            The disabled state of a hub segment has changed.
            <para>If this Event Id triggers on the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/>, that means it is for one of the hub segments A-E (1-5) and can
            be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.DisabledFeedback"/> property.</para>
            <para>If this event Id triggers on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>, that means it is for the Master segment and can
            be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.MasterSegmentDisableFeedback"/> property.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentStatusFeedbackEventId">
            <summary>
            The status of a segment has changed.
            <para>If this Event Id triggers on the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/>, that means it is for one of the hub segments A-E (1-5) and can
            be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.StatusFeedback"/> property.</para>
            <para>If this event Id triggers on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>, that means it is for the Master segment and can
            be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.MasterSegmentStatusFeedback"/> property.</para>
            </summary>        
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentFrameErrorFeedbackEventId">
            <summary>
            A frame error has occurred on a segment.
            <para>If this Event Id triggers on the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/>, that means it is for one of the hub segments A-E (1-5) and can
            be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.FrameErrorFeedback"/> property.</para>
            <para>If this event Id triggers on the <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/>, that means it is for the Master segment and can
            be read with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.MasterSegmentFrameErrorFeedback"/> property.</para>
            </summary>        
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelFailFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.ChannelFailFeedback"/> on a segment has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event will trigger for this event id.  The 
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.Index"/> member will contain the actual channel number (1 or 2) that has
            changed state.  Channel 1 is the left connector, Channel 2 is the right connector on the segment.</para>
            </summary>       
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelPowerUsageFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.PowerUsageFeedback"/> on a segment has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event will trigger for this event id.  The 
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.Index"/> member will contain the actual channel number (1 or 2) that has
            changed state.  Channel 1 is the left connector, Channel 2 is the right connector on the segment.</para>
            </summary>              
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateChangeEventHandler">
            <summary>
            Delegate to define the event handler for changes individual hub segments.
            </summary>
            <param name="device">Device that the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> occurred on.</param>
            <param name="args">Argument class to describe the change that occurred.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs">
            <summary>
            Event arguments class used for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateChangeEventHandler"/>.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.#ctor(System.Int32,Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment,System.UInt32)">
            <summary>
            Constructor to generate a new segment event argument class.
            </summary>
            <param name="paramEventType">Type of change received on the segment.</param>
            <param name="paramSegment">CsaPws10sHubEnetSegment the event is received for.</param>
            <param name="paramIndex">
            <list type="bullet">
            <item> 
            <description>If the event type <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelFailFeedbackEventId"/>, then Index is the index into the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.ChannelFailFeedback"/></description> 
            </item> 
            <item>
            <description>If the event type <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelPowerUsageFeedbackEventId"/>, then Index is the index into the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.PowerUsageFeedback"/></description> 
            </item>
            <item>
            <description>For all other event types, the Index will be zero.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.Segment">
            <summary>
            Corresponding <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment"/> object that the event was received on.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.Index">
            <summary>
            <list type="bullet">
            <item> 
            <description>If the event type is <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelFailFeedbackEventId"/>, then Index is the index into
            the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.ChannelFailFeedback"/>.  1 is for the left connector on a segment, 2 is for the right connector
            on a segment.</description> 
            </item> 
            <item>
            <description>If the event type is <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelPowerUsageFeedbackEventId"/>, then Index is the index into 
            the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.PowerUsageFeedback"/>.  1 is for the left connector on a segment, 2 is for the right connector
            on a segment.</description> 
            </item>
            <item>
            <description>For all other event types, the Index will be zero.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.EventId">
            <summary>
            Information to describe why the event was triggered. The event IDs are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> class.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment">
            <summary>
            Class containing information for each of the individual segments A-E (1-5) for the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/> devices.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.OnSegmentStateChange(Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs)">
            <summary>
            Method to fire the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event.
            </summary>
            <param name="paramArgs">Information from the Crestron <see cref="T:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch"/> on what changed.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.#ctor(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.GenericDevice,System.UInt32)">
            <summary>
            Constructor for a one of the hub segments - segment numbers range from 1 to 5 (A - E)
            </summary>
            <param name="paramDevice">the internal device that contains the joins for the segment</param>
            <param name="paramParent">the parent that this is part of</param>
            <param name="segmentNumber">the segment number, 1-5 (A-E)</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.PowerCycleChannel(System.UInt32)">
            <summary>
            Cycles power on the given channel number on the segment.
            </summary>
            <param name="channelNumber">The channel number to cycle power on.  Valid numbers are 1 and 2  1 is the left connector on the segment, 2 is the
            right connector on the segment.</param>
            <exception cref="T:System.IndexOutOfRangeException">An invalid value is specified for channelNumber.</exception>
        </member>
        <member name="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange">
            <summary>
            Event fired when one of the feedbacks have changed for this segment.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> class.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.Number">
            <summary>
            This is the segment number and ranges from 1-5.  1 correlates to Segment A, 2 correlates to Segment B, 3 correlates to Segment C,
            4 correlates to Segment D, and 5 correlates to Segment E.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.ChannelFailFeedback">
            <summary>
            Property to indicate if a given channel has failed when a branch test is performed.
            When the value updated from the device, the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event will trigger for with the event Id 
            <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelFailFeedbackEventId"/>.  The <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.Index"/> will be set the
            channel number - 1 or 2.  1 is the left connector on the segment, 2 is the right.
            </summary>
            <remarks>If the channel has failed, the state will remain true until the problem has been fixed and another branch test is performed.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">If an invalid channel number is specified.  Legal values are 1 and 2 for the array index.  1 is the left
            connector, 2 is the right connector on the segment.</exception>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.DisabledFeedback">
            <summary>
            Property to indicate if the segment is disabled.
            When the value updated from the device, the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event will trigger with the event Id 
            <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentDisabledFeedbackEventId"/>.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.FrameErrorFeedback">
            <summary>
            Property to indicate if a frame error has occurred on the segment.
            When the value updated from the device, the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event will trigger with the event Id 
            <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentFrameErrorFeedbackEventId"/>.
            <remarks>true means a framing error has occurred, false means none has occurred.  The segment stays enabled when the error occurs.</remarks>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.StatusFeedback">
            <summary>
            Property to indicate the results of test for the segment.
            When the value updated from the device, the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event will trigger with the event Id 
            <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentStatusFeedbackEventId"/>.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.PowerUsageFeedback">
            <summary>
            Property to indicate the instantaneous power usage in 10s of milliWatts (mW) on a channel.
            When the value updated from the device, the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.SegmentStateChange"/> event will trigger with the event Id 
            <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.ChannelPowerUsageFeedbackEventId"/>.  The <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegmentStateEventArgs.Index"/> will be set the
            channel number - 1 or 2.  1 is the left connector on a segment, 2 is the right.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">If an invalid channel number is specified.  Legal values are 1 and 2 for the array index.  1 is the left
            connector, 2 is the right.</exception>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.Parent">
            <summary>
            Parent for CsaPws10sHubEnetSegment class
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.Crestron#SimplSharpPro#IParentInformation#Parent">
            <summary>
            The parent that a given object was added to.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.UserSpecifiedObject">
            <summary>
            Can be assigned anything that user wants.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase">
            <summary>
            This base class is used for the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/>.  The <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> is the
            an ethernet device, and the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/> is a device that can be dropped onto Cresnet or master/local branch of the 
            <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/>. 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.NumberOfSegments">
            <summary>
            Number of segments on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/> devices.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.CsaPws10sHub_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave"/> Sig change events.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> class.
            </summary>
            <param name="currentDevice">Current <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> Internal device.</param>
            <param name="args">Sig Event Arguments.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.TestAllSegments">
            <summary>
            Method to start electrical testing on all segments.  The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> will trigger with the event ID 
            <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.InTestModeFeedbackEventId"/>.  When the test is complete, the same handler will trigger with the event ID
            <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentTestDoneFeedbackEventId"/>.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.Segments">
            <summary>
            A collection of <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment"/> objects.  Each object contains information about an individual segment, such as the ability to power 
            cycle and get status of the channels on the branch (failure mode and power usage), whether the branch is disabled, 
            whether a framing error exists, the status of the branch.  Note that the collection that contains information about the Cresnet devices on the
            hub is the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet.Branches"/> collection.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.EnablePowerReporting">
            <summary>
            When set to true, this enables the reporting of the power levels on <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.PowerUsageFeedback"/> collections for each
            segment.  This affects all segments.  When false, reporting is disabled.  It is disabled by default.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.FakeUpdateRequest">
            <summary>
            Property to activate fake cresnet update request 
            True = Active; False = InActive
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.PowerMinChange">
            <summary>
            The value in 10s of milliWatts (mW) for reporting changes on the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSegment.PowerUsageFeedback"/> collections for each branch.  This value affects
            reporting on all segments.  Default value is 50, which is 500mW.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.InTestModeFeedback">
            <summary>
            Flag to indicate if this hub is currently running a test.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.InTestModeFeedbackEventId"/>.</para> 
            </summary>
            <remarks>'true' = test is in progress, 'false' = no test in progress.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.SegmentTestDoneFeedback">
            <summary>
            Flag to indicate that all segment testing has completed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentTestDoneFeedbackEventId"/>.</para> 
            </summary>
            <remarks>Note that this value is pulsed - the hub will set it to true for several seconds when the test is done, and then set it to false again.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.MasterSegmentDisableFeedback">
            <summary>
            Property to indicate that the master segment is disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentDisabledFeedbackEventId"/>.</para>
            <remarks>true means the master segment is disabled, false means it is enabled.  This value only will only change as a result of 
            <see cref="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.TestAllSegments"/> being called.</remarks>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.MasterSegmentFrameErrorFeedback">
            <summary>
            Property to indicate that the master segment has experienced a framing error.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentFrameErrorFeedbackEventId"/>.</para>
            <remarks>true means a framing error has occurred, false means none has occurred.  The segment stays enabled when the error occurs.</remarks>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.OverTemperatureFeedback">
            <summary>
            Flag to indicate that the device is running over safe temperature ratings.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.OverTemperatureFeedbackEventId"/>.</para> 
            </summary>
            <remarks>'true' = device is running over temperature, 'false' = device is within normal temperature.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.HubStatusFeedback">
            <summary>
            Flag to indicate an action the hub is currently performing.  See <see cref="T:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetStatus"/> enum for further details.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.HubStatusFeedbackEventId"/> when this value changes.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.PowerSupplyErrorStatusFeedback">
            <summary>
            Flag to indicate an error on the hub power supply.  See <see cref="T:Crestron.SimplSharpPro.GeneralIO.eCsaPws10sHubEnetPowerSupplyErrorStatus"/> enum for further details.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.PowerSupplyErrorStatusFeedbackEventId"/> when this value changes.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.MasterSegmentStatusFeedback">
            <summary>
            Property to indicate the results of test for the segment.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.SegmentStatusFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.TestResultsFeedback">
            <summary>
            Property to indicate the results of the segment test as textual information suitable for reporting to a touch panel, logging to a file, etc.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEventIds.TestResultsFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave">
            <summary>
            Crestron device that provides 5 separate power segment with 2 separate Cresnet connectors on each segment that can be independently controlled.  
            All devices plugged into this shade hub exist in the same Cresnet address space of the device it is attached to (for example, if this is on the main cresnet of an
            RMC3, you can access ID 03 through FE, excluding the Cresnet ID assigned to the hub itself.
            </summary>
            <example>
            The following example instantiates a Hub at Cresnet ID 03 with a C2nSdc at ID 07:
            The devices can be controlled through an XPanel and provide feedback via Console.PrintLine().  Status of the Hub as well as control is also provided via the XPanel.
            <code>
            // For the sample code to work be sure to include the following references:
            // Crestron.SimplSharpPro.GeneralIO for the CsaPws10sHubEnet
            // Crestron.SimplSharpPro.Shades for the C2nSdc
            // Crestron.SimplSharpPro.UI for the XpanelForSmartGraphics
            
            using System;
            using Crestron.SimplSharp;
            using Crestron.SimplSharpPro;
            using Crestron.SimplSharpPro.DeviceSupport;
            using Crestron.SimplSharpPro.GeneralIO;
            using Crestron.SimplSharpPro.Shades;
            using Crestron.SimplSharpPro.UI;
            
            namespace CsaPws10sHubEnetSlaveTest
            {
                public class ControlSystem : CrestronControlSystem
                {
                    // A convenience object used to easily identify which device we are for event handler.  The enum value is also the join number
                    // for the online/offline message text.
                    public enum MyDeviceType
                    {
                        Sdc = 20,
                        Hub = 23
                    };
                    
                    // Cresnet version of the Shade Hub
                    public CsaPws10sHubEnetSlave Hub;
            
                    // SdcShade plugged into the Local segment of the Hub.
                    public C2nSdc SdcShade;
            
                    // Test XPanel
                    public XpanelForSmartGraphics MyXPanel;
            
                    private bool EnablePowerReporting = true;
            
                    public ControlSystem()
                    {
                        InitializeByUser();
                    }
            
                    private void InitializeByUser()
                    {
                        MyXPanel = new XpanelForSmartGraphics(0x05, this);
                        if (MyXPanel.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                        {
                            string reason = string.Format("Could not register XPanel, Reason: {0}", MyXPanel.RegistrationFailureReason);
                            CrestronConsole.PrintLine(reason);
                            throw new Exception(reason);
                        }
            
                        // Initialize Hub at ID 03 on Cresnet.
                        Hub = new CsaPws10sHubEnetSlave(0x03, this);
                        Hub.UserSpecifiedObject = MyDeviceType.Hub;
            
                        // Create SDC on Leg 2 (Local Branch) at Cresnet ID 07.
                        SdcShade = new C2nSdc(0x07, this);
                        SdcShade.UserSpecifiedObject = MyDeviceType.Sdc;
            
                        // Register the hub.
                        if (Hub.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                        {
                            string reason = string.Format("Could not register Hub, Reason: {0}", Hub.RegistrationFailureReason);
                            CrestronConsole.PrintLine(reason);
                            throw new Exception(reason);
                        }
            
                        if(SdcShade.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                        {
                            string reason = string.Format("Could not register SDC, Reason: {0}", SdcShade.RegistrationFailureReason);
                            CrestronConsole.PrintLine(reason);
                            throw new Exception(reason);
                        }
            
                        // Subscribe to the base event handler.
                        Hub.BaseEvent += new BaseEventHandler(Hub_BaseEvent);
            
                        // Subscribe to the 5 event handlers for info about each hub segment (gives status about power, etc.)
                         <![CDATA[for (uint i = 1; i <= Hub.Segments.Count; i++)]]>
                            Hub.Segments[i].SegmentStateChange += new CsaPws10sHubEnetSegmentStateChangeEventHandler(ControlSystem_SegmentStateChange);
            
                        // Subscribe to the Online status event handler for the Hub.
                        Hub.OnlineStatusChange += new OnlineStatusChangeEventHandler(OnlineStatusChange);
            
                        // Setup the power report to the Hub and sync XPanel to the state.
                        Hub.EnablePowerReporting.BoolValue = EnablePowerReporting;
                        MyXPanel.BooleanInput[14].BoolValue = EnablePowerReporting;
            
                        // Subscribe to the event handler for the SDC.
                        SdcShade.BaseEvent += new BaseEventHandler(Shade_BaseEvent);
            
                        // Subscribe to the Online status event handler for the SDC.
                        SdcShade.OnlineStatusChange += new OnlineStatusChangeEventHandler(OnlineStatusChange);
            
                        // Subscribe to the even handler for the XPanel.
                        MyXPanel.SigChange += new SigEventHandler(MyXPanel_SigChange);
                    }
            
                    void OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                    {
                        uint Join = (uint)((MyDeviceType)(currentDevice.UserSpecifiedObject));
                         <![CDATA[if (Join > 0)]]>
                        {
                            if (args.DeviceOnLine == true)
                                MyXPanel.StringInput[Join].StringValue = "Online";
                            else
                                MyXPanel.StringInput[Join].StringValue = "Offline";
                        }
                        else
                        {
                            ErrorLog.Error("Could not determine device from Join for {0}", currentDevice.Name);
                        }
                    }
            
                    void Shade_BaseEvent(GenericBase device, BaseEventArgs args)
                    {
                        switch (args.EventId)
                        {
                            case ShadeDrapeControllerEventIds.LastDirCloseFeedbackEventId:
                                CrestronConsole.PrintLine("Shade SDC: Value for LastDirCloseFeedback on {0} is {1}", args.Index, SdcShade.Controllers[(uint)args.Index].LastDirCloseFeedback.BoolValue);
                                break;
                            case ShadeDrapeControllerEventIds.LastDirOpenFeedbackEventId:
                                CrestronConsole.PrintLine("Shade SDC: Value for LastDirOpenFeedback on {0} is {1}", args.Index, SdcShade.Controllers[(uint)args.Index].LastDirOpenFeedback.BoolValue);
                                break;
                            case ShadeDrapeControllerEventIds.MovingFeedbackEventId:
                                CrestronConsole.PrintLine("Shade SDC: Value for MovingFeedback is on {0} is {1}", args.Index, SdcShade.Controllers[(uint)args.Index].MovingFeedback.BoolValue);
                                break;
                        }
                    }
            
                    void MyXPanel_SigChange(BasicTriList currentDevice, SigEventArgs args)
                    {
                        uint JoinNumber = args.Sig.Number;
                        switch (args.Sig.Type)
                        {
                            case eSigType.Bool:
                                 <![CDATA[if (JoinNumber >= 1 && JoinNumber <= 10)]]>
                                {
                                    if (args.Sig.BoolValue == true)
                                    {
                                        uint SegmentNumber = (JoinNumber - 1) / 2 + 1;
                                        uint ChannelNumber = (JoinNumber - 1) % 2 + 1;
                                        Hub.Segments[SegmentNumber].PowerCycleChannel(ChannelNumber);
                                    }
                                }
                                else
                                {
                                    switch (args.Sig.Number)
                                    {
                                        case 11:
                                            // PowerMinChange set to 150mW
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.PowerMinChange.UShortValue = 15;
                                                MyXPanel.BooleanInput[11].BoolValue = true;
                                                MyXPanel.BooleanInput[12].BoolValue = false;
                                                MyXPanel.BooleanInput[13].BoolValue = false;
                                            }
                                            break;
                                        case 12:
                                            // PowerMinChange set to 500mW
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.PowerMinChange.UShortValue = 50;
                                                MyXPanel.BooleanInput[11].BoolValue = false;
                                                MyXPanel.BooleanInput[12].BoolValue = true;
                                                MyXPanel.BooleanInput[13].BoolValue = false;
                                            }
                                            break;
                                        case 13:
                                            // PowerMinChange set to 1000mW
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.PowerMinChange.UShortValue = 1000;
                                                MyXPanel.BooleanInput[11].BoolValue = false;
                                                MyXPanel.BooleanInput[12].BoolValue = false;
                                                MyXPanel.BooleanInput[13].BoolValue = true;
                                            }
                                            break;
                                        case 14:
                                            // Toggle power reporting state
                                            if (args.Sig.BoolValue == true)
                                            {
            
                                                EnablePowerReporting = !EnablePowerReporting;
                                                Hub.EnablePowerReporting.BoolValue = EnablePowerReporting;
                                                MyXPanel.BooleanInput[14].BoolValue = EnablePowerReporting;
                                            }
                                            break;
                                        case 15:
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.TestAllSegments();
                                            }
                                            break;
                                        case 26:
                                            if (args.Sig.BoolValue == true)
                                                SdcShade.Controllers[1].Open();
                                            else
                                                SdcShade.Controllers[1].Stop();
                                            break;
                                        case 27:
                                            if (args.Sig.BoolValue == true)
                                                SdcShade.Controllers[1].Close();
                                            else
                                                SdcShade.Controllers[1].Stop();
                                            break;
                                    }
            
            
                                }
            
                                break;
                            default:
                                break;
            
                        }
                    }
            
                    void ControlSystem_SegmentStateChange(object device, CsaPws10sHubEnetSegmentStateEventArgs args)
                    {
                        // This will be 1-5, corresponding with Segment A-E.
                        uint SegmentNumber = args.Segment.Number;
            
                        switch (args.EventId)
                        {
                            case CsaPws10sHubEventIds.ChannelFailFeedbackEventId:
                                MyXPanel.UShortInput[(SegmentNumber - 1) * 2 + args.Index].UShortValue = (ushort)((Hub.Segments[SegmentNumber].ChannelFailFeedback[args.Index].BoolValue) ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentDisabledFeedbackEventId:
                                MyXPanel.UShortInput[SegmentNumber + 10].UShortValue = (ushort)(Hub.Segments[SegmentNumber].DisabledFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentFrameErrorFeedbackEventId:
                                MyXPanel.UShortInput[SegmentNumber + 16].UShortValue = (ushort)(Hub.Segments[SegmentNumber].DisabledFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentStatusFeedbackEventId:
                                MyXPanel.UShortInput[SegmentNumber + 41].UShortValue = (ushort)Hub.Segments[SegmentNumber].StatusFeedback;
                                break;
                            case CsaPws10sHubEventIds.ChannelPowerUsageFeedbackEventId:
                                MyXPanel.UShortInput[(SegmentNumber - 1) * 2 + args.Index + 31].UShortValue = Hub.Segments[SegmentNumber].PowerUsageFeedback[args.Index].UShortValue;
                                break;
                        }
                    }
            
                    void Hub_BaseEvent(GenericBase device, BaseEventArgs args)
                    {
                        switch (args.EventId)
                        {
                            case CsaPws10sHubEventIds.InTestModeFeedbackEventId:
                                MyXPanel.UShortInput[23].UShortValue = (ushort)(Hub.InTestModeFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentTestDoneFeedbackEventId:
                                MyXPanel.UShortInput[24].UShortValue = (ushort)(Hub.SegmentTestDoneFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.OverTemperatureFeedbackEventId:
                                MyXPanel.UShortInput[25].UShortValue = (ushort)(Hub.OverTemperatureFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.HubStatusFeedbackEventId:
                                MyXPanel.UShortInput[48].UShortValue = (ushort)Hub.HubStatusFeedback;
                                break;
                            case CsaPws10sHubEventIds.PowerSupplyErrorStatusFeedbackEventId:
                                MyXPanel.UShortInput[49].UShortValue = (ushort)Hub.PowerSupplyErrorStatusFeedback;
                                break;
                            case CsaPws10sHubEventIds.TestResultsFeedbackEventId:
                                MyXPanel.StringInput[19].StringValue = Hub.TestResultsFeedback.StringValue;
                                break;
            
                            case CsaPws10sHubEventIds.SegmentDisabledFeedbackEventId:
                                // This is for the master segment when received at the base event.
                                MyXPanel.UShortInput[16].UShortValue = (ushort)(Hub.MasterSegmentDisableFeedback.BoolValue ? 1 : 0);
                                break;
            
                            case CsaPws10sHubEventIds.SegmentFrameErrorFeedbackEventId:
                                // This is for the master segment when received at the base event.
                                MyXPanel.UShortInput[22].UShortValue = (ushort)(Hub.MasterSegmentFrameErrorFeedback.BoolValue ? 1 : 0);
                                break;
            
                            case CsaPws10sHubEventIds.SegmentStatusFeedbackEventId:
                                // This is for the master segment when received at the base event.
                                MyXPanel.UShortInput[47].UShortValue = (ushort)Hub.MasterSegmentStatusFeedback;
                                break;
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor for creating a CSA-PWS10S-HUB-ENET Slave device that resides on the branch of an ethernet CSA-PWS10S-HUB-ENET device or
            DIN-CEN-CN-2.
            </summary>
            <param name="paramCresnetID">Cresnet of the device.</param>
            <param name="paramCresnetBranch">The Cresnet branch that this device is on.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor for creating a CSA-PWS10S-HUB-ENET Slave device that resides on Cresnet of a control system.
            </summary>
            <param name="paramCresnetID">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to, typically 'this'</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave.CsaPws10sHubEnetSlave_ACTUAL">
            <summary>
            Auto generated class for CSA-PWS10S-HUB device for Cresnet Communication.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave.CsaPws10sHubEnetSlave_ACTUAL.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor used when the device is added to a branch or ethernet to Cresnet bridge.
            </summary>
            <param name="cId">ID of this device.</param>
            /// <param name="paramCresnetBranch">Cresnet ShadePowerSupplyBranch this device is added to.</param>
            <exception cref="T:System.InvalidOperationException">Unable to add the child device. Possibly invalid ID or device type being added is not supported.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetSlave.CsaPws10sHubEnetSlave_ACTUAL.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramCresnetID">ID of this device</param>
            <param name="Owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet">
            <summary>
            Crestron device that provides two independent Cresnet control branches (local and master) as well as 5 separate power segments with 2 separate cresnet connectors on
            each segment that can be independently controlled.  Valid Cresnet ID's for the master branch (branch 1) are 03 through 4F.  Valid Cresnet ID's for the 
            Local branch (branch 2) are 03 through 0C.
            </summary>
            <example>
            The following example instantiates a Hub with the following devices:
            <list type="bullet">
            <item>C2nCbdPKpScene at ID 09 on the Main Branch</item>
            <item>C2nSdc at ID 07 on the Local Branch</item>
            <item>C2nCbdPKpScene at ID 08 on the Local Branch</item>
            </list>
            The devices can be controlled through an XPanel and provide feedback via Console.PrintLine().  Status of the Hub as well as control is also provided via the XPanel.
            <code>
            // For the sample code to work be sure to include the following references:
            // Crestron.SimplSharpPro.GeneralIO for the CsaPws10sHubEnet
            // Crestron.SimplSharpPro.Keypads for the C2nCbdPKpScene
            // Crestron.SimplSharpPro.Shades for the C2nSdc
            // Crestron.SimplSharpPro.UI for the XpanelForSmartGraphics
            
            using System;
            using Crestron.SimplSharp;                          				
            using Crestron.SimplSharpPro;                       				
            using Crestron.SimplSharpPro.DeviceSupport;
            using Crestron.SimplSharpPro.GeneralIO;
            using Crestron.SimplSharpPro.Keypads;
            using Crestron.SimplSharpPro.Shades;
            using Crestron.SimplSharpPro.UI;
            
            namespace CsaPws10sHubEnetTest
            {
                public class ControlSystem : CrestronControlSystem
                {
                    // A convenience object used to easily identify which device we are for event handler.  The enum value is also the join number
                    // for the online/offline message text.
                    public enum MyDeviceType
                    {
                        Sdc = 20,
                        KeypadOnMaster = 21,
                        KeypadOnLocal = 22,
                        Hub = 23
                    };
                    
                    // Ethernet version of the SdcShade Hub
                    public CsaPws10sHubEnet Hub;
            
                    // Keypad plugged into the Local segment of the Hub.
                    public C2nCbdPKpScene KeypadOnLocal;
            
                    // SdcShade plugged into the Local segment of the Hub.
                    public C2nSdc SdcShade;
            
                    // Keypad plugged into the Master segment of the Hub.
                    public C2nCbdPKpScene KeypadOnMaster;
            
                    // Test XPanel
                    public XpanelForSmartGraphics MyXPanel;
            
                    private bool EnablePowerReporting = true;
            
                    public ControlSystem()
                    {
                        InitializeByUser();
                    }
            
                    private void InitializeByUser()
                    {
                        MyXPanel = new XpanelForSmartGraphics(0x05, this);
                        if (MyXPanel.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                        {
                            string reason = string.Format("Could not register XPanel, Reason: {0}", MyXPanel.RegistrationFailureReason);
                            CrestronConsole.PrintLine(reason);
                            throw new Exception(reason);
                        }
            
                        // Initialize Hub at IP ID 03 on Ethernet.
                        Hub = new CsaPws10sHubEnet(0x03, this);
                        Hub.UserSpecifiedObject = MyDeviceType.Hub;
            
                        // If we wanted to, we could cast the hub to an IDeviceBranch collection.  For any arbitrary device, if this case is
                        // successful, it means we have a collection of branches that contain devices.  Currently this would be useful for the CSA-PWS10S-HUB-ENET
                        // and the DIN-CEN-CN-POE.
                        // IDeviceBranchCollection BranchCollection = (IDeviceBranchCollection) Hub;
            
                        // Create Keypad on Leg 1 (Master Branch) at Cresnet ID 09.
                        KeypadOnMaster = new C2nCbdPKpScene(0x09, Hub.Branches[1]);
                        KeypadOnMaster.UserSpecifiedObject = MyDeviceType.KeypadOnMaster;
            
                        // Create SDC on Leg 2 (Local Branch) at Cresnet ID 07.
                        SdcShade = new C2nSdc(0x07, Hub.Branches[2]);
                        SdcShade.UserSpecifiedObject = MyDeviceType.Sdc;
            
                        // Create KeypadOnLocal on Leg 2 (Local Branch) at Cresnet ID 08.
                        KeypadOnLocal = new C2nCbdPKpScene(0x08, Hub.Branches[2]);
                        KeypadOnLocal.UserSpecifiedObject = MyDeviceType.KeypadOnLocal;
            
                        // Register the bridge (this will register all the devices on the 2 branches).
                        if (Hub.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                        {
                            string reason = string.Format("Could not register Hub, Reason: {0}", MyXPanel.RegistrationFailureReason);
                            CrestronConsole.PrintLine(reason);
                            throw new Exception(reason);                
                        }
            
                        // Subscribe to the base event handler.
                        Hub.BaseEvent += new BaseEventHandler(Hub_BaseEvent);
                        
                        // Subscribe to the 5 event handlers for info about each hub segment (gives status about power, etc.)
                         <![CDATA[for(uint i = 1 ; i <= Hub.Segments.Count ; i++)]]>
                            Hub.Segments[i].SegmentStateChange +=new CsaPws10sHubEnetSegmentStateChangeEventHandler(ControlSystem_SegmentStateChange);
                        
                        // Subscribe to the Online status event handler for the Hub.
                        Hub.OnlineStatusChange += new OnlineStatusChangeEventHandler(OnlineStatusChange);
                        
                        // Setup the power report to the Hub and sync XPanel to the state.
                        Hub.EnablePowerReporting.BoolValue = EnablePowerReporting;
                        MyXPanel.BooleanInput[14].BoolValue = EnablePowerReporting;
            
                        // Subscribe to the event handler for the SDC.
                        SdcShade.BaseEvent += new BaseEventHandler(Shade_BaseEvent);
            
                        // Subscribe to the Online status event handler for the SDC.
                        SdcShade.OnlineStatusChange += new OnlineStatusChangeEventHandler(OnlineStatusChange);
            
                        // Subscribe to the keypad's button state handler.
                        KeypadOnMaster.ButtonStateChange += new ButtonEventHandler(Keypad_ButtonStateChange);
            
                        // Subscribe to the Online status event handler for the keypad.
                        KeypadOnMaster.OnlineStatusChange += new OnlineStatusChangeEventHandler(OnlineStatusChange);
                        
                        // Subscribe to the keypad's button state handler.
                        KeypadOnLocal.ButtonStateChange += new ButtonEventHandler(Keypad_ButtonStateChange);
            
                        // Subscribe to the Online status event handler for the keypad.
                        KeypadOnLocal.OnlineStatusChange += new OnlineStatusChangeEventHandler(OnlineStatusChange);
            
                        // Subscribe to the even handler for the XPanel.
                        MyXPanel.SigChange += new SigEventHandler(MyXPanel_SigChange);
                    }
            
                    void OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                    {
                        uint Join = (uint) ((MyDeviceType) (currentDevice.UserSpecifiedObject));
                         <![CDATA[if (Join > 0)]]>
                        {
                            if (args.DeviceOnLine == true)
                                MyXPanel.StringInput[Join].StringValue = "Online";
                            else
                                MyXPanel.StringInput[Join].StringValue = "Offline";
                        }
                        else
                        {
                            ErrorLog.Error("Could not determine device from Join for {0}", currentDevice.Name);
                        }
                    }
            
                    void Shade_BaseEvent(GenericBase device, BaseEventArgs args)
                    {
                        switch (args.EventId)
                        {
                            case ShadeDrapeControllerEventIds.LastDirCloseFeedbackEventId:
                                CrestronConsole.PrintLine("Shade SDC: Value for LastDirCloseFeedback on {0} is {1}", args.Index, SdcShade.Controllers[(uint)args.Index].LastDirCloseFeedback.BoolValue);
                                break;
                            case ShadeDrapeControllerEventIds.LastDirOpenFeedbackEventId:
                                CrestronConsole.PrintLine("Shade SDC: Value for LastDirOpenFeedback on {0} is {1}", args.Index, SdcShade.Controllers[(uint)args.Index].LastDirOpenFeedback.BoolValue);
                                break;
                            case ShadeDrapeControllerEventIds.MovingFeedbackEventId:
                                CrestronConsole.PrintLine("Shade SDC: Value for MovingFeedback is on {0} is {1}", args.Index, SdcShade.Controllers[(uint)args.Index].MovingFeedback.BoolValue);
                                break;
                        }
                    }
            
                    void MyXPanel_SigChange(BasicTriList currentDevice, SigEventArgs args)
                    {
                        uint JoinNumber = args.Sig.Number;
                        switch (args.Sig.Type)
                        {
                            case eSigType.Bool:
                                 <![CDATA[if (JoinNumber >= 1 && JoinNumber <= 10)]]>
                                {
                                    if (args.Sig.BoolValue == true)
                                    {
                                        uint SegmentNumber = (JoinNumber - 1)/2 + 1;
                                        uint ChannelNumber = (JoinNumber - 1)%2 + 1;
                                        Hub.Segments[SegmentNumber].PowerCycleChannel(ChannelNumber);
                                    }
                                }
                                else
                                {
                                    switch (args.Sig.Number)
                                    {
                                        case 11:
                                            // PowerMinChange set to 150mW
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.PowerMinChange.UShortValue = 15;
                                                MyXPanel.BooleanInput[11].BoolValue = true;
                                                MyXPanel.BooleanInput[12].BoolValue = false;
                                                MyXPanel.BooleanInput[13].BoolValue = false;
                                            }
                                            break;
                                        case 12:
                                            // PowerMinChange set to 500mW
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.PowerMinChange.UShortValue = 50;
                                                MyXPanel.BooleanInput[11].BoolValue = false;
                                                MyXPanel.BooleanInput[12].BoolValue = true;
                                                MyXPanel.BooleanInput[13].BoolValue = false;
                                            }
                                            break;
                                        case 13:
                                            // PowerMinChange set to 1000mW
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.PowerMinChange.UShortValue = 1000;
                                                MyXPanel.BooleanInput[11].BoolValue = false;
                                                MyXPanel.BooleanInput[12].BoolValue = false;
                                                MyXPanel.BooleanInput[13].BoolValue = true;
                                            }
                                            break;
                                        case 14:
                                            // Toggle power reporting state
                                            if (args.Sig.BoolValue == true)
                                            {
            
                                                EnablePowerReporting = !EnablePowerReporting;
                                                Hub.EnablePowerReporting.BoolValue = EnablePowerReporting;
                                                MyXPanel.BooleanInput[14].BoolValue = EnablePowerReporting;
                                            }
                                            break;
                                        case 15:
                                            if (args.Sig.BoolValue == true)
                                            {
                                                Hub.TestAllSegments();
                                            }
                                            break;
                                        case 26:
                                            if (args.Sig.BoolValue == true)
                                                SdcShade.Controllers[1].Open();
                                            else
                                                SdcShade.Controllers[1].Stop();
                                            break;
                                        case 27:
                                            if (args.Sig.BoolValue == true)
                                                SdcShade.Controllers[1].Close();
                                            else
                                                SdcShade.Controllers[1].Stop();
                                            break;
            
            
                                        case 28:
                                            KeypadOnLocal.BargraphValue.UShortValue = 0;
                                            break;
                                        case 29:
                                            KeypadOnLocal.BargraphValue.UShortValue = 65535;
                                            break;
            
                                        case 30:
                                            KeypadOnMaster.BargraphValue.UShortValue = 0;
                                            break;
                                        case 31:
                                            KeypadOnMaster.BargraphValue.UShortValue = 65535;
                                            break;
                                    
                                    }
            
            
                                }
            
                                break;
                            default:
                                break;
            
                        }
                    }
            
                    void Keypad_ButtonStateChange(GenericBase device, ButtonEventArgs args)
                    {
                        string WhichKeypad;
                        switch ((MyDeviceType) device.UserSpecifiedObject)
                        {
                            case MyDeviceType.KeypadOnLocal:
                                WhichKeypad = "Local";
                                break;
                            case MyDeviceType.KeypadOnMaster:
                                WhichKeypad = "Master";
                                break;
                            default:
                                WhichKeypad = "UNKNOWN";
                                break;
                        }
            
                        CrestronConsole.PrintLine("Keypad {0}, button {1} {2}", WhichKeypad, args.Button.Number, args.Button.State.ToString());
                    }
            
            
                    void ControlSystem_SegmentStateChange(object device, CsaPws10sHubEnetSegmentStateEventArgs args)
                    {
                        // This will be 1-5, corresponding with Segment A-E.
                        uint SegmentNumber = args.Segment.Number;
            
                        switch (args.EventId)
                        {
                            case CsaPws10sHubEventIds.ChannelFailFeedbackEventId:
                                MyXPanel.UShortInput[(SegmentNumber - 1) * 2 + args.Index].UShortValue = (ushort)((Hub.Segments[SegmentNumber].ChannelFailFeedback[args.Index].BoolValue) ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentDisabledFeedbackEventId:
                                MyXPanel.UShortInput[SegmentNumber + 10].UShortValue = (ushort)(Hub.Segments[SegmentNumber].DisabledFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentFrameErrorFeedbackEventId:
                                MyXPanel.UShortInput[SegmentNumber + 16].UShortValue = (ushort)(Hub.Segments[SegmentNumber].DisabledFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentStatusFeedbackEventId:
                                MyXPanel.UShortInput[SegmentNumber + 41].UShortValue = (ushort)Hub.Segments[SegmentNumber].StatusFeedback;
                                break;
                            case CsaPws10sHubEventIds.ChannelPowerUsageFeedbackEventId:
                                MyXPanel.UShortInput[(SegmentNumber - 1) * 2 + args.Index + 31].UShortValue = Hub.Segments[SegmentNumber].PowerUsageFeedback[args.Index].UShortValue;
                                break;
                        }
                    }
            
                    void Hub_BaseEvent(GenericBase device, BaseEventArgs args)
                    {
                        switch (args.EventId)
                        {
                            case CsaPws10sHubEventIds.InTestModeFeedbackEventId:
                                MyXPanel.UShortInput[23].UShortValue = (ushort) (Hub.InTestModeFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.SegmentTestDoneFeedbackEventId:
                                MyXPanel.UShortInput[24].UShortValue = (ushort)(Hub.SegmentTestDoneFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.OverTemperatureFeedbackEventId:
                                MyXPanel.UShortInput[25].UShortValue = (ushort)(Hub.OverTemperatureFeedback.BoolValue ? 1 : 0);
                                break;
                            case CsaPws10sHubEventIds.HubStatusFeedbackEventId:
                                MyXPanel.UShortInput[48].UShortValue = (ushort)Hub.HubStatusFeedback;
                                break;
                            case CsaPws10sHubEventIds.PowerSupplyErrorStatusFeedbackEventId:
                                MyXPanel.UShortInput[49].UShortValue= (ushort)Hub.PowerSupplyErrorStatusFeedback;
                                break;
                            case CsaPws10sHubEventIds.TestResultsFeedbackEventId:
                                MyXPanel.StringInput[19].StringValue = Hub.TestResultsFeedback.StringValue;
                                break;
            
                            case CsaPws10sHubEventIds.SegmentDisabledFeedbackEventId:
                                // This is for the master segment when received at the base event.
                                MyXPanel.UShortInput[16].UShortValue = (ushort) (Hub.MasterSegmentDisableFeedback.BoolValue ? 1 : 0);
                                break;
            
                            case CsaPws10sHubEventIds.SegmentFrameErrorFeedbackEventId:
                                // This is for the master segment when received at the base event.
                                MyXPanel.UShortInput[22].UShortValue = (ushort)(Hub.MasterSegmentFrameErrorFeedback.BoolValue ? 1 : 0);
                                break;
            
                            case CsaPws10sHubEventIds.SegmentStatusFeedbackEventId:
                                // This is for the master segment when received at the base event.
                                MyXPanel.UShortInput[47].UShortValue = (ushort) Hub.MasterSegmentStatusFeedback;
                                break;
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            This constructor is used to create a CSA-PWS10S-HUB-ENET on a control system's ethernet.
            </summary>
            <param name="paramIpid">The IP ID for the device.</param>
            <param name="paramControlSystem">The control system that this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet"/> is on, typically 'this'</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet.Branches">
            <summary>
            Collection of cresnet <see cref="T:Crestron.SimplSharpPro.DeviceSupport.CsaPws10sHubEnetCresnetBranch"/> objects that are a part of this device.  These collections will contain the Cresnet devices that
            are on the CSA-PWS10S-HUB-ENET.  Note that the collections that contain information about the power states, etc. are in the
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnetBase.Segments"/> collection.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet.Helper">
            <summary>
            Shade hub helper.  This is used to assist in performing various operations on the cresnet of the hub (discover, PPN related, etc.) and return data to the 
            program (such as the devices on the local or master cresnet branch).
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet.Crestron#SimplSharpPro#DeviceSupport#IDeviceBranchCollection#Branches">
            <summary>
            Collection of cresnet branches interfaces as part of this device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet.CSA_PWS10S_HUB_ENET.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new CSA_PWS10S_HUB_ENET
            </summary>
            <param name="paramIPID">Ethernet IPID of the device.</param>        
            <param name="paramControlSystem">Control system this ethernet device is a part of.</param>  
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHubEnet.CSA_PWS10S_HUB_ENET.Helper">
            <summary>
            Cresnet bridge helper reserved sigs extender. 
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi">
            <summary>
            Base class for CEN-IO-DI-104.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoDi.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi"/> is on.</param>
            <param name="paramDeviceName">Name of the device.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoDi.DigitalInputPorts">
            <summary>
            Array of digital input on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoDi.NumberOfDigitalInputPorts">
            <summary>
            Number of digital inputs this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi104">
             <summary>
             Crestron external standalone Digital inputs card that provides digital input control interfaces for remote devices such as garage door openers, sensors, and motorized screens.
             It includes four digital input ports and communicates with the control system network via Ethernet.
             </summary>
             <example>
             <code>
             static CenIoDi104 _di4;
             public ControlSystemCenIoDi4()
             {
                 //Register console commands
                 CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a CEN-IO-DI-104 CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                 CrestronConsole.AddNewConsoleCommand(RegisterCmd, "Register", "This is a CEN-IO-DI-104 Register command", ConsoleAccessLevelEnum.AccessOperator);
             }
             
             //Function to create the CEN-IO-DI-104 device
             public void CreateDeviceCmd(String args)
             {
                 _di4 = new CenIoDi104(0x18, this);
                 _di4.Register();
                 CrestronConsole.ConsoleCommandResponse("{0} device successfully registered\r\n", _di4.ToString());
                 _di4.DigitalInputPorts[i].StateChange += DigitalInputStateChangeEventHandler;
             }
            
             //Function to register digital port 
             public void RegisterCmd(string args)
             {
                 _di4.DigitalInputPorts[Convert.ToUInt32(args)].Register();
                 CrestronConsole.ConsoleCommandResponse("Digital Input port {0} is Registered .\r\n", Convert.ToUInt32(args), _di4.DigitalInputPorts[Convert.ToUInt32(args)].Register());
             }
             
             //Function to handle the digital input state change events
             public void DigitalInputStateChangeEventHandler(DigitalInput digitalInput, DigitalInputEventArgs args)
             {
                 CrestronConsole.PrintLine("Digital Input State changed for port {0}, to {1}", 1, _di4.DigitalInputPorts[1].State);
             }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoDi104.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi104"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi104"/> is on.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4">
            <summary>
            Actual Device class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi104"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi204"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4.DigitalInput1">
            <summary>
            Digital Input1 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4.DigitalInput2">
            <summary>
            Digital Input2 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4.DigitalInput3">
            <summary>
            Digital Input3 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4.DigitalInput4">
            <summary>
            Digital Input4 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.Object)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="ipId">IPID of this device</param>
            <param name="owner">Control system this card is attached to.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4.DigitalInputPorts">
            <summary>
            Collection of digital inputs on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoDi4.NumberOfDigitalInputPorts">
            <summary>
            Number of digital inputs this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsPartCn">
            <summary>
            A Cresnet based partition sensor that uses a reflected IR beam to detect the presence of a partition
            wall. The sensor is powered from the 24V Cresnet bus and has the ability to adjust the detection 
            distance of the wall partition.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.EnableFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.EnableFeedback">EnableFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionSensedFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionSensedFeedback">PartitionSensedFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionNotSensedFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionNotSensedFeedback">PartitionNotSensedFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.SensitivityFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.SensitivityFeedback">SensitivityFeedback</see> has changed.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new GlsPartCn partition sensor. 
            </summary>
            <param name="paramCresnetID">Cresnet ID of the device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new GlsPartCn partition sensor. 
            </summary>
            <param name="paramCresnetID">Cresnet ID of the device.</param>
            <param name="paramControlSystem">Control system that this device is on.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.GlsPartCnSigChangeHandler(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            The GlsPartCn sig change event handler.  
            </summary>
            <param name="currentDevice">Device that triggered the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._enable">
            <summary>
            Storage of the Enable Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._increaseSensitivity">
            <summary>
            Storage of the IncreaseSensitivity Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._decreaseSensitivity">
            <summary>
            Storage of the DecreaseSensitivity Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._enableFeedback">
            <summary>
            Storage of the EnableFeedback Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._partitionSensedFeedback">
            <summary>
            Storage of the PartitionSensedFeedback Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._partitionNotSensedFeedback">
            <summary>
            Storage of the PartitionNotSensedFeedback Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._sensitivity">
            <summary>
            Storage of the Sensitivity Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn._sensitivityFeedback">
            <summary>
            Storage of the SensitivityFeedback Sig for GLS-PART-CN.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.IncreaseSensitivity">
            <summary>
            Increases the Sensitivity of the IR beam.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.DecreaseSensitivity">
            <summary>
            Decreases the Sensitivity of the IR beam.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.Enable">
            <summary>
            Enables the sensor to report partition status.
            </summary>
            <remarks> True = enables the sensor to report partition status;False = disables the sensor reporting.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.EnableFeedback">
            <summary>
            Indicates that sensing is enabled.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.EnableFeedbackEventId">EnableFeedbackEventId</see> will trigger to indicate change.
            </summary>  
            <remarks> True = Sensing is enabled;False = Sensing is disabled.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionSensedFeedback">
            <summary>
            Indicates that Partition is sensed.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionSensedFeedbackEventId">PartitionSensedFeedbackEventId</see> will trigger to indicate change.
            </summary>
            <remarks> True = Partition is sensed;False = No effect.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionNotSensedFeedback">
            <summary>
            Indicates that Partition is not sensed.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.PartitionNotSensedFeedbackEventId">PartitionNotSensedFeedbackEventId</see> will trigger to indicate change.
            </summary>
            <remarks> True = Partition is not sensed;False = No effect.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.Sensitivity">
            <summary>
            Sets the sensitivity level. Levels lower than minimum level shall be set as minimum. Levels 
            higher than maximum level shall be set as maximum.
            </summary>
            <remarks>The sensitivity range shall be between 1(lowest) to 10 (highest).</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.SensitivityFeedback">
            <summary>
            Reports the current sensitivity level.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.SensitivityFeedbackEventId">SensitivityFeedbackEventId</see> will trigger to indicate change.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.CresnetGlsPartCn">
            <summary>
            Auto generated class for GLS-PART-CN Partition sensor that uses IR Beam.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.CresnetGlsPartCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor used to add the device to a CresnetBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device</param>
            <param name="owner">CresnetBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsPartCn.CresnetGlsPartCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt">
            <summary>
            Battery-powered, dual-loop wireless photo sensor designed for daylight harvesting applications to 
            control the balance of natural and artificial lighting in an indoor space. Dual-loop sensing is 
            achieved on the device by two internal photocells—one for open-loop daylight sensing and one for 
            closed-loop ambient light sensing.
            </summary>    
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.CalibrateFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.CalibrateFeedback">CalibrateFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SetupFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SetupFeedback">SetupFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.BatteryLowDetectedEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.BatteryLowFeedback">BatteryLowFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SunLevelReceivedEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SunLevelFeedback">SunLevelFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.RoomLevelReceivedEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.RoomLevelFeedback">RoomLevelFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.LogFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.LogFeedback">LogFeedback</see> has changed.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
            <param name="paramRfId">RFID of this device on the gateway.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.GlsLdlExBattSigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the all the button state change and top level sig change events for GLS-LDL-EX-BATT.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt"/> class.
            </summary>
            <param name="currentDevice">Device that triggered the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.GlsLdlExBattDiagnosticsSigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the all the sig change events for GLS-LDL-EX-BATT Diagnostics Sub-Class.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt"/> class.
            </summary>
            <param name="currentDevice">Device that triggered the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._triggerCalibrate">
            <summary>
            Storage of the TriggerCalibrate Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._calibrateFeedback">
            <summary>
            Storage of the CalibrateFeedback Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._setupFeedback">
            <summary>
            Storage of the SetupFeedback Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._batteryLowFeedback">
            <summary>
            Storage of the BatteryLowFeedback Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._sunMinimumChange">
            <summary>
            Storage of the SunMinimumChange Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._roomMinimumChange">
            <summary>
            Storage of the RoomMinimumChange Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._sensorReportPeriod">
            <summary>
            Storage of the SensorReportPeriod Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._sunLevelFeedback">
            <summary>
            Storage of the SunLevelFeedback Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._roomLevelFeedback">
            <summary>
            Storage of the RoomLevelFeedback Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._logFeedback">
            <summary>
            Storage of the LogFeedback Sig for GLS-LDL-EX-BATT Wireless Photo Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt._buttons">
            <summary>
            Collection of button objects.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.OnButtonStateChange(Crestron.SimplSharpPro.DeviceSupport.ButtonEventArgs)">
            <summary>
            Method to fire the button state change event.
            </summary>
            <param name="args">Information from the GLS-LDL-EX-BATT Photo Sensor on what button state is changed.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.TriggerCalibrate">
            <summary>
            Property to put the sensor into Calibration Mode. This will cause the device to enter 
            calibration mode when its value changes to true from false and exit calibration mode when 
            it changes to false from true.
            The Calibration Mode shall timeout and exit after 10 minutes.
            </summary>
            <remarks>This property only responds while in Setup Mode.</remarks>
            <remarks>Upon exiting Calibration Mode, sensor shall be in Setup Mode for 10 minutes.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.CalibrateFeedback">
            <summary>
            Property to indicate that the sensor is in the Calibration Mode.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.CalibrateFeedbackEventId">CalibrateFeedbackEventId</see> will trigger to indicate change.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SetupFeedback">
            <summary>
            Property to indicate that the sensor is in Setup Mode.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SetupFeedbackEventId">SetupFeedbackEventId</see> will trigger to indicate change.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.BatteryLowFeedback">
            <summary>
            Property to indicate that the sensor battery condition is low.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.BatteryLowDetectedEventId">BatteryLowDetectedEventId</see> will trigger to indicate change.
            </summary>
            <remarks>The panel shall detect when only 10% of battery life remains.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SunMinimumChange">
            <summary>
            Property to set the minimum change required to report the natural light level as read by the
            Sun Sensor. A value of 0 will use the default MIN Change. Units are in Lux.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.RoomMinimumChange">
            <summary>
            Property to set the minimum change required to report the room light level as read by the 
            Room Sensor. A value of 0 will use the default MIN Change. Units are in Lux.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SensorReportPeriod">
            <summary>
            Property to set that maximum rate that the sensor values will be reported.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SunLevelFeedback">
            <summary>
            Property to report the Light level output from the Sun Sensor. This value ranges between 0 to 
            0xFFFF.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.SunLevelReceivedEventId">SunLevelReceivedEventId</see> will trigger to indicate change.
            </summary>
            <remarks>The rate of update for this value is based on MIN Change and internal MAX reporting 
            rate. Units are in Lux.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.RoomLevelFeedback">
            <summary>
            Property to report the Light level output from the Room Sensor. This value ranges between 0 to 
            0xFFFF.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.RoomLevelReceivedEventId">RoomLevelReceivedEventId</see> will trigger to indicate change.
            </summary>
            <remarks>The rate of update for this value is based on MIN Change and internal MAX reporting 
            rate. Units are in Lux.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.LogFeedback">
            <summary>
            Property to return the sensor information logged.
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.LogFeedbackEventId">LogFeedbackEventId</see> will trigger to indicate change.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.Button">
            <summary>
            Get the collection of the Button objects for this device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.UserButton">
            <summary>
            Get the Button object corresponding to the UserButton button 
            for this device.
            </summary>
        </member>
        <member name="E:Crestron.SimplSharpPro.GeneralIO.GlsLdlExBatt.ButtonStateChange">
            <summary>
            Event fired when a button state change was received from the device.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.RfGlsLdlExBatt">
            <summary>
            Auto generated class for GLS-LDL-EX-BATT Battery-Powered Photo Sensor for RF Communication.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.RfGlsLdlExBatt.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="rfId">ID of this device</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <param name="paramBaseDevice">Base device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.RfGlsLdlExBatt.GlsLdlExBattDiagnostics">
            <summary>
            Battery Diagnostics Sub-Class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.RfGlsLdlExBatt.GlsLdlExBattDiagnostics.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.DinIo8">
            <summary>
            Cresnet based device providing eight Versiports, programmable as digital inputs, digital outputs or analog outputs. Each Versiport has a corresponding pull-up resistor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinIo8.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new DIN-IO8 device.
            </summary>
            <param name="paramCresnetID">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinIo8.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new DIN-IO8 device.
            </summary>
            <param name="paramCresnetID">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinIo8.VersiPorts">
            <summary>
            Array of versiports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinIo8.NumberOfVersiPorts">
            <summary>
            Number of versiports this device supports.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort1">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort2">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort3">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort4">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort5">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort6">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort7">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiportPort8">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots,System.Object)">
            <summary>
            Constructor to generate a new device to a CresnetBranch.
            </summary>
            <param name="paramCresnetID">Cresnet ID of this device.</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.Object)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="paramCresnetID">ID of this device</param>
            <param name="Owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.InitializeVersiports(System.Object)">
            <summary>
            Function to initialize the built in versiports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.VersiPorts">
            <summary>
            Array of versiports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinIo8.Cresnet_DIN_IO8.NumberOfVersiPorts">
            <summary>
            Number of versiports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy">
            <summary>
            Base class for CEN-IO-RY-104.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoRy.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy"/> is on.</param>
            <param name="paramDeviceName">Name of the device.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoRy.RelayPorts">
            <summary>
            Collection of relay ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoRy.NumberOfRelayPorts">
            <summary>
            Number of relay ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy104">
            <summary>
            Crestron external standalone Relays card that provides low-voltage relay control interfaces for remote devices such as garage door openers, sensors, and motorized screens.
            It includes four isolated relays and communicates with the control system network via Ethernet.
            </summary>
            <example>
            <code>
            static CenIoRy104 _ry4;
            public ControlSystemCenIoRy4()
            {
                //Register console commands
                CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDeviceRelay", "This is a CEN-IO-RY-104 CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                CrestronConsole.AddNewConsoleCommand(OpenRelayCmd, "OpenRelay", "This is a OpenRelay command", ConsoleAccessLevelEnum.AccessOperator);
                CrestronConsole.AddNewConsoleCommand(RegisterCmd, "RegisterRelay", "This is a Register command to register with device.", ConsoleAccessLevelEnum.AccessOperator);
            }
            
            //Function to create the CEN-IO-RY-104 device
            public void CreateDeviceCmd(String args)
            {
                _ry4 = new CenIoRy104(0x19, this);
                _ry4.Register();
                CrestronConsole.ConsoleCommandResponse("{0} device successfully registered\r\n", _ry4.ToString());
                _ry4.RelayPorts[1].StateChange += RelayStateChangeEventHandler;
            }
            
            //Function to register relay ports.
            public void RegisterCmd(String args)
            {
                _ry4.RelayPorts[Convert.ToUInt32(args)].Register();
                CrestronConsole.ConsoleCommandResponse("Relay port is registered .\r\n");
            }
            
            //Function to make relay open.
            public void OpenRelayCmd(String args)
            {
                _ry4.RelayPorts[Convert.ToUInt32(args)].Open();
                CrestronConsole.ConsoleCommandResponse("Relay port {0} current state is: {1} \r\n", Convert.ToUInt32(args), _ry4.RelayPorts[Convert.ToUInt32(args)].State);
            }
            
            //Function to handle the relay state change events
            static void RelayStateChangeEventHandler(Relay relay, RelayEventArgs args)
            {
                CrestronConsole.PrintLine("Relay State changed for port {0}, to {1}", 1, _ry4.RelayPorts[1].State);
            }
            </code>
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoRy104.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy104"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy104"/> is on.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4">
            <summary>
            Actual Device class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy104"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy204"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4.Relay1">
            <summary>
            Relay Port1
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4.Relay2">
            <summary>
            Relay Port2
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4.Relay3">
            <summary>
            Relay Port3
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4.Relay4">
            <summary>
            Relay Port4
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.Object)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="ipId">IPID of this device</param>
            <param name="owner">Control system this card is attached to.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4.RelayPorts">
            <summary>
            Array of relay ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoRy4.NumberOfRelayPorts">
            <summary>
            Number of relay ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateChangeEventHandler">
            <summary>
            Delegate to define the event handler for changes to the power supply hub branch.
            </summary>
            <param name="device">Device that the <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> occurred on.</param>
            <param name="args">Argument class to describe the change that occurred.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateEventArgs">
            <summary>
            Event arguments class used for <see cref="T:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateChangeEventHandler"/>.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateEventArgs.#ctor(System.Int32,Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch,System.UInt32)">
            <summary>
            Constructor to generate a new branch event argument class.
            </summary>
            <param name="paramEventType">Type of change received on the branch.</param>
            <param name="paramBranch">ShadePowerSupplyBranch the event is received for.</param>
            <param name="paramIndex">Index into the <see cref="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.FuseFailFeedback"/> collection.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateEventArgs.Branch">
            <summary>
            Corresponding <see cref="T:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch"/> object that the event was received on.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateEventArgs.Index">
            <summary>
            Index into <see cref="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.FuseFailFeedback"/> collection for the fuse this event was triggered for. This is applicable for <see cref="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.FuseFailFeedback"/> only and is set to '0' otherwise.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateEventArgs.EventId">
            <summary>
            Information to describe why the event was triggered. The event IDs are located in <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/>.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub">
             <summary>
             Power Supply with Cresnet interface that powers up to 10 Crestron Quiet Motor Technology roller 
             shade or drapery system motors and features a built-in, 5-segment Cresnet hub with network 
             diagnostics capabilities.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> events.</para>
             </summary>
             <example>
             <code>
             static CsaPws10sHub _csaPws10SHub;
            
                public ControlSystemCsaPws10sHub()
                {
                    //Register console commands
                    CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a CSA-PWS10S-HUB CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                }
            
                //Method to create and register the CSA-PWS10S-HUB device with the Control System.
                public void CreateDeviceCmd(String args)
                {
                    //Initialize the CSA-PWS10S-HUB device for Cresnet Communication
                    _csaPws10SHub = new CsaPws10sHub(0x18, this);
            
                    _csaPws10SHub.BaseEvent += CsaPws10sHub_EventHandler;
            
                    <![CDATA[for (uint i = 1; i <= 5; i++)]]>
                    {
                        _csaPws10SHub.HubBranch[i].BranchStateChange += CsaPws10sHub_BranchSigEventHandler;
                    }
            
                    //Register the CSA-PWS10S-HUB with the Control system
                    _csaPws10SHub.Register();
                }
            
                // Method to handle sig change events for CSA-PWS10S-HUB ShadePowerSupplyBranch class.
                static void CsaPws10sHub_BranchSigEventHandler(object device, ShadePowerSupplyBranchStateEventArgs args)
                {
                    if (args.EventId == CsaPws10sHub.FuseFailFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("ShadePowerSupplyBranch {0} fuse {1} fail feedback event received\r\n",
                            args.ShadePowerSupplyBranch.Number, args.Index);
                    }
                }
            
                // Method to handle sig change events for CSA-PWS10S-HUB top level sigs.
                static void CsaPws10sHub_EventHandler(GenericBase device, BaseEventArgs args)
                {
                    switch (args.EventId)
                    {
                        case CsaPws10sHub.PowerSupplyStatusFeedbackEventId:
                            CrestronConsole.PrintLine("Power Supply Status feedback Event received\r\n");
                            break;
                    }
                }
             </code>
             </example>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.NumberOfFusesPerBranch">
            <summary>
            Number of fuses per branch on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> device.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.NumberOfBranches">
            <summary>
            Number of branches on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> device.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.NumberOfPowerSupplies">
            <summary>
            Number of power supplies on the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> device.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.InTestModeFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.InTestModeFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.FuseFailFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.FuseFailFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event will trigger for this event Id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.BranchDisabledFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.DisabledFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event will trigger for this event Id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.HubStatusFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.HubStatusFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.PowerSupplyStatusFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.PowerSupplyStatusFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.BranchStatusFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.StatusFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event will trigger for this event Id.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new CSA-PWS10S-HUB device.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new CSA-PWS10S-HUB device.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.TestAllBranches">
            <summary>
            Property to disconnect all branches from the control system and perform all electrical testing
            on each branch.
             </summary>
            <remarks>The <see cref="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.StatusFeedback"/> property shall be updated to reflect the test 
            results upon test completion and the <see cref="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.InTestModeFeedback"/> property shall return to 
            'false' when all tests are completed and the branches are reconnected to the control system.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.CsaPws10sHub_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the CSA-PWS10S-HUB Sig change events.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> class.
            </summary>
            <param name="currentDevice">Current <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> Internal device.</param>
            <param name="args">Sig Event Arguments.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.InTestModeFeedback">
            <summary>
            Property to indicate if the device is in test mode. Test mode can be triggered by calling 
            <see cref="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.TestAllBranches"/> method or pressing the TEST push button.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.InTestModeFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.HubStatusFeedback">
            <summary>
            Property to indicate the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> status.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.HubStatusFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.HubBranch">
            <summary>
            Power Supply Hub ShadePowerSupplyBranch Collection.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.PowerSupplyStatusFeedback">
            <summary>
            Collection to indicate the power supply status for the device.
            </summary>
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.PowerSupplyStatusFeedbackEventId"/> to indicate a change.</para>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.CresnetCsaPws10sHub">
            <summary>
            Auto generated class for CSA-PWS10S-HUB device for Cresnet Communication.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.CresnetCsaPws10sHub.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="cId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.CresnetCsaPws10sHub.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor used when the device is added to a external device. (External Gateway, Salve Cresnet, etc.)
            
            </summary>
            <param name="cId">ID of this device.</param>
            /// <param name="paramCresnetBranch">Cresnet ShadePowerSupplyBranch this device is added to.</param>
            <exception cref="T:System.InvalidOperationException">Unable to add the child device. Possibly invalid ID or device type being added is not supported.</exception>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch">
            <summary>
            Power Supply Hub ShadePowerSupplyBranch class
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.OnBranchStateChange(Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranchStateEventArgs)">
            <summary>
            Method to fire the <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event.
            </summary>
            <param name="paramArgs">Information from the Crestron <see cref="T:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch"/> on what changed.</param>
        </member>
        <member name="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange">
            <summary>
            Event fired when one of the feedbacks have changed for this branch.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub"/> class.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.Number">
            <summary>
            ShadePowerSupplyBranch Number
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.FuseFailFeedback">
            <summary>
            Property to indicate if the selected fuse has failed. Valid indexes are 1 -2.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.FuseFailFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.DisabledFeedback">
            <summary>
            Property to indicate if the branch is disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.BranchDisabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.StatusFeedback">
            <summary>
            Property to indicate the results of test for the branch.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.BranchStateChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.CsaPws10sHub.BranchStatusFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.Parent">
            <summary>
            Parent for ShadePowerSupplyBranch class
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.Crestron#SimplSharpPro#IParentInformation#Parent">
            <summary>
            The parent that a given object was added to.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.ShadePowerSupplyBranch.UserSpecifiedObject">
            <summary>
            Can be assigned anything that user wants.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio">
            <summary>
            Compact infiNET EX Wireless Relay/Digital Input control interface 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new INET-IOEX-RYIO that is attached to the specified RF gateway.
            </summary>
            <param name="paramRFID">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>       
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.DigitalInputPorts">
            <summary>
            Collection of digital input ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.NumberOfDigitalInputPorts">
            <summary>
             Number of digital input ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.NumberOfRelayPorts">
            <summary>
            Number of relay ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.RelayPorts">
            <summary>
            Collection of relay ports on the device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.RF_INET_IOEX_RYIO.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to add the device to any gateway.          
            </summary>
            <param name="RFID">ID of this device</param>            
            <param name="paramBaseDevice"></param>
            <param name="paramGateway"></param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.RF_INET_IOEX_RYIO.INET_IOEX_RYIO_DI2.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice,System.Object)">
            <summary>
            Device Constructor.
            
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId"> Id to add the device at</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.InetIoexRyio.RF_INET_IOEX_RYIO.RelaySlot.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice,System.Object)">
            <summary>
            Device Constructor.
            
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId"> Id to add the device add</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr">
            <summary>
            Base class for CEN-IO-IR-104.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoIr.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr"/> object.
            </summary>
            <param name="ipId">IPID of this device</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr104"/> is on.</param>
            <param name="paramDeviceName">Name of the device.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoIr.IROutputPorts">
            <summary>
            Collection of IR output ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoIr.NumberOfIROutputPorts">
            <summary>
            Number of IR output ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr104">
            <summary>
            Crestron external standalone IR Outputs card that provides IR remote control interfaces for video displays, AV components, small applications, and other equipment.
            It includes four discrete IR ports and communicates with the control system network via Ethernet.
            </summary>
            <example>
            <code>
            static CenIoIr104 _ir4;
            public uint DriverId = 0;
            
            public ControlSystemCenIoIr4()
            {
                //Register console commands
                CrestronConsole.AddNewConsoleCommand(UnloadIRDriverCmd, "UnloadIRDriver", "This is a CEN-IO-IR-104 UnloadIRDriver command", ConsoleAccessLevelEnum.AccessOperator);
                CrestronConsole.AddNewConsoleCommand(LoadIRDriverCmd, "LoadIRDriver", "This is a CEN-IO-IR-104 LoadIRDriver command", ConsoleAccessLevelEnum.AccessOperator);
                CrestronConsole.AddNewConsoleCommand(RegisterCmd, "Register", "This is a CEN-IO-IR-104 Register command", ConsoleAccessLevelEnum.AccessOperator);
                CrestronConsole.AddNewConsoleCommand(PressAndReleseCmd, "PressAndRelese", "This is a CEN-IO-IR-104 PressAndRelese command", ConsoleAccessLevelEnum.AccessOperator);
            }
            
            //Function to create the CEN-IO-IR-104 device
            public void CreateDeviceCmd(String args)
            {
                _ir4 = new CenIoIr104(0x18, this);
                _ir4.Register();
                CrestronConsole.ConsoleCommandResponse("{0} device successfully registered\r\n", _ir4.ToString());
            }
            
            //Function to register port
            public void RegisterCmd(string args)
            {
                _ir4.IROutputPorts[Convert.ToUInt32(args)].Register();
                CrestronConsole.ConsoleCommandResponse("Relay {0} port  registered\r\n", args);
            }
            
            //Function to load IR driver
            public void LoadIRDriverCmd(string args)
            {
                DriverId = _ir4.IROutputPorts[Convert.ToUInt32(args)].LoadIRDriver(Directory.GetApplicationDirectory() + "\\Samsung_LN_Series.ir");
                CrestronConsole.PrintLine("IR driver is successfully loaded with driverId:{0}.\r\n", DriverId);
            }
            
            //Function to send an IR command for a specified time and to a specific Driver ID
            public void PressAndReleseCmd(string args)
            {
                _ir4.IROutputPorts[Convert.ToUInt32(args)].PressAndRelease("POWER_ON", 100);
                CrestronConsole.PrintLine("Press and Release POWER_ON for 100ms.\r\n");
            }
            
            //Function to unload the First IR Driver loaded to the IR Output Port.
            public void UnloadIRDriverCmd(string args)
            {
                _ir4.IROutputPorts[Convert.ToUInt32(args)].UnloadIRDriver();
                CrestronConsole.PrintLine("Unload first IR driver. \r\n");
            }
            </code>
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoIr104.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr104"/> object.
            </summary>
            <param name="ipId">IPID of this device</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr104"/> is on.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4">
            <summary>
            Actual Device class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr104"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr204"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4.IRPort1">
            <summary>
            IR Output Port1
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4.IRPort2">
            <summary>
            IR Output Port2
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4.IRPort3">
            <summary>
            IR Output Port3
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4.IRPort4">
            <summary>
            IR Output Port4
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.Object)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="ipId">IPID of this device</param>
            <param name="owner">Control system this card is attached to.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4.IROutputPorts">
            <summary>
            Array of IR output ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoIr4.NumberOfIROutputPorts">
            <summary>
            Number of IR output ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.GlsSim">
            <summary>
            Cresnet based compact interface device designed to allow Crestron Green Light sensors to be connected directly to a Cresnet control network, with 2 Versiports.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsSim.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new GLS-SIM Sensor Integration Module.
            </summary>
            <param name="paramCresnetID">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <exception cref="T:System.ArgumentNullException">The IDeviceBranch specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.GlsSim.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new GLS-SIM Sensor Integration Module.
            </summary>
            <param name="paramCresnetID">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this card is attached to.</param>
            <exception cref="T:System.ArgumentNullException">The Control System specified is not initialized.</exception>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsSim.VersiPorts">
            <summary>
            Array of versiports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.GlsSim.NumberOfVersiPorts">
            <summary>
            Number of versiports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim">
            <summary>
            Auto generated class for GLS-SIM Sensor Interface Module.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim.VersiportPort1">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            Versiport1 has a corresponding pull-up resistor.
            DIP switch 1, when ON, disables the pull-up resistor of Versiport1.
            DIP switch 2, when ON, inverts the logical sense of Versiport1.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim.VersiportPort2">
            <summary>
            Versiport that support Digital Input, Digital output, and Analog Input.
            Versiport2 has a corresponding pull-up resistor.
            DIP switch 3, when ON, disables the pull-up resistor of Versiport2.
            DIP switch 4, when ON, inverts the logical sense of Versiport2.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots,System.Object)">
            <summary>
            constructor used to add this device to a CresnetBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.Object)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim.InitializeVersiports(System.Object)">
            <summary>
            Function to initialize the built in versiports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim.VersiPorts">
            <summary>
            Array of versiports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetGlsSim.NumberOfVersiPorts">
            <summary>
            Number of versiports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00">
            <summary>
            Base class for PC-200 and PC-300 Power Conditioners.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/></para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerSwitchOnFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerSwitchOnFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ProtectionCompromisedEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ProtectionCompromisedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.WiringFaultEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.WiringFaultFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SurgeProtectionFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SurgeDetectedFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureOverRangeFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureOverRangeFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputVoltageFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputVoltageFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputCurrentFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputCurrentFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputPowerFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputPowerFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputEnergyFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputEnergyFeedbackRaw"/> or <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputEnergyFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureReportingFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureReportingFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitorEnabledFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitorEnabledFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ShowOutletControlMenuFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ShowOutletControlMenuFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DataLoggingFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DataLoggingFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFormatReportingFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFormatReportingFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageCutoffFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageCutoffFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageCutoffFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageCutoffFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentCutoffFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentCutoffFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureHighCutoffFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureHighCutoffFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SamplingIntervalFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SamplingIntervalFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingIntervalFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingIntervalFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.HostnameOrIPAddressToPingFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.HostnameOrIPAddressToPingFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TargetFeedbackEventId">
            <summary>
            The state of a <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.TargetFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id and <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> will indicate the index into the <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitors"/> collection.</para>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankOnOffFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.OnOffFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankDelayFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.DelayFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankCurrentFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.CurrentFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankPowerFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.PowerFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankEnergyFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.EnergyFeedbackRaw"/> or <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.EnergyFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailureFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailureFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletFeedbackEventId">
            <summary>
            The state of a <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.OutletFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id and <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> will indicate the index into the <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitors"/> collection.</para>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankNameFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.NameFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelLockFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelLockFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayBrightnessFeedbackEventId">
            <summary>
            The value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayBrightnessFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelayFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelayFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureReadingValidFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureReadingValidFeedback"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00._outletBanks">
            <summary>
            Reference to the PcX00OutletBanks object.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00._systemControl">
            <summary>
            Reference to the SystemControl object.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00._systemStatus">
            <summary>
            Reference to the SystemStatus object.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.NumberOfOutletBanks">
            <summary>
            Number of <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank"/> objects in the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBanks"/> collection for this power conditioner.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.NumberOfPingMonitors">
            <summary>
            Number of <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor"/> objects in the <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitors"/> collection for this power conditioner.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String)">
            <summary>
            Constructor for base class <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> that uses Ethernet as interface.
            </summary>
            <param name="paramEthernetId">The ethernet ID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/>.</param>
            <param name="paramControlSystem">Control System this <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> is attached to.</param>
            <param name="paramName">Name of the device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The ethernet ID specified is in use or invalid.</exception> 
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String,System.Boolean)">
            <summary>
            Constructor for base class <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> that uses Cresnet as interface.
            </summary>
            <param name="paramCresnetId">The Cresnet ID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/>.</param>
            <param name="paramControlSystem">Control System this <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> is attached to.</param>
            <param name="paramName">Name of the device.</param>
            <param name="isOnCresnet"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">The ethernet ID specified is in use or invalid.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch,System.String)">
            <summary>
            Constructor for base class <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> that uses Cresnet as interface.
            </summary>
            <param name="paramCresnetId">The Cresnet ID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/>.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <param name="paramName">Name of the device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The ethernet ID specified is in use or invalid.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EnableReportingPingFailure">
            <summary>
            Method to enable reporting of ping failure.
            </summary>
            <remarks> This method needs to be invoked before the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailure"/> property has any effect.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EnablePingMonitor">
            <summary>
            Method to enable the ping monitoring feature of the power condition. 
            <para>This method needs to be invoked before setting any of the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Outlet"/> properties.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DisableReportingPingFailure">
            <summary>
            Method to disable reporting of ping failure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DisablePingMonitor">
            <summary>
            Method to disable the ping monitoring feature of the power condition. 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EnableDataLogging">
            <summary>
            Method to enable logging to internal filesystem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DisableDataLogging">
            <summary>
            Method to disable logging to internal filesystem.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EnableTemperatureReportingInCelsius">
            <summary>
            Method to set that the temperature is specified and reported in Celsius.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EnableTemperatureReportingInFahrenheit">
            <summary>
            Method to set that the temperature is specified and reported in Fahrenheit.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EnableShowOutletControlMenu">
            <summary>
            Method to show outlet control menu on top level (bypass security).
            </summary>
            <remarks> This method is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DisableShowOutletControlMenu">
            <summary>
            Method to hide outlet control menu on top level (bypass security).
            </summary>
            <remarks> This method is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.LockFrontPanel">
            <summary>
            Method to lock the front panel.
            </summary>
            <remarks> This method is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnlockFrontPanel">
            <summary>
            Method to unlock the front panel.
            </summary>
            <remarks> This method is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayOn">
            <summary>
            Method to turn on the front panel display
            </summary>
            <remarks> This method is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayOff">
            <summary>
            Method to turn off the front panel display.
            </summary>
            <remarks> This method is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ResetEnergyCount">
            <summary>
            Method to reset accumulated energy count for all outlets.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycle">
            <summary>
            Method to power cycle all the outlets. The outlets will stay off for the duration specified by the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelay"/> property.
            </summary>
            <remarks> This does not apply to the bank with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property set to true. </remarks>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitors">
            <summary>
            Collection of <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor"/> objects where the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Target"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Outlet"/> can be set.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SystemStatus_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> System Status Sig change events.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> class.
            </summary>
            <param name="currentDevice">Current <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> System Status internal device.</param>
            <param name="args">Sig Event Arguments.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SystemControl_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> System Control Sig change events.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> class.
            </summary>
            <param name="currentDevice">Current <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> System Control internal device.</param>
            <param name="args">Sig Event Arguments.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBanks_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBanks"/> Sig change events.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> class.
            </summary>
            <param name="currentDevice">Current <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> Outlet Bank internal device.</param>
            <param name="args">Sig Event Arguments.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerSwitchOnFeedback">
            <summary>
            Property to indicate that the front panel power switch is activated.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerSwitchOnFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ProtectionCompromisedFeedback">
            <summary>
            Property to indicate that the surge protection has failed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ProtectionCompromisedEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.WiringFaultFeedback">
            <summary>
            Property to indicate that wiring fault detected.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.WiringFaultEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SurgeDetectedFeedback">
            <summary>
            Property to indicate that the surge protection failure is detected.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SurgeProtectionFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureFeedback">
            <summary>
            Property to indicate that a ping attempt has failed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageFeedback">
            <summary>
            Property to indicate that an under voltage condition detected.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageFeedback">
            <summary>
            Property to indicate that a over voltage condition detected.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentFeedback">
            <summary>
            Property to indicate that a over current condition detected.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureOverRangeFeedback">
            <summary>
            Property to indicate that the temperature outside limits.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureOverRangeFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureReadingValidFeedback">
            <summary>
            Property to indicate that the temperature readings are valid.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureReadingValidFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputVoltageFeedback">
            <summary>
            Property to report the latest RMS voltage reading in volts.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputVoltageFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are from 0 250, with 0.1 volt increments. The value 1 volt is represented as 10.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFeedback">
            <summary>
            Property to report the latest temperature reading in Celsius/Fahrenheit.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are from -25 to 225, with 0.1 Celsius/Fahrenheit increments.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputCurrentFeedback">
            <summary>
            Property to report the total RMS Current reading in Amps.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputCurrentFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are from 0 to 75, with 0.1 Amp increments. The value 1 Amp is represented as 10.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputPowerFeedback">
            <summary>
            Property to report the Power reading in Watts.
            This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200"/> devices only.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputPowerFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are from 0 to 2000, with 0.1 Watt increments. The value 1 Watt is represented as 10.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputEnergyFeedbackRaw">
            <summary>
            Property to report the Energy reading formatted as a 9-digit decimal string.
            This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200"/> devices only.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputEnergyFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are from 0 to 999999999 Wh.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputEnergyFeedback">
            <summary>
            Property to report the Energy reading converted to an integer from a 9-digit decimal string format.
            This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200"/> devices only, return value is 0 otherwise.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.InputEnergyFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureReportingFeedback">
            <summary>
            Property to indicate that reporting of ping failure is enabled (true) or disabled (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingFailureReportingFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitorEnabledFeedback">
            <summary>
            Property to indicate if the ping monitor feature is enabled (true) or disabled (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitorEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DataLoggingFeedback">
            <summary>
            Property to indicate that logging to internal filesystem is enabled (true) or disabled (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.DataLoggingFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFormatReportingFeedback">
            <summary>
            Property to indicate that the temperature is specified and reported in Celsius (true) or fahrenheit (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureFormatReportingFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ShowOutletControlMenuFeedback">
            <summary>
            Property to indicate that outlet control menu is enabled on the top level (true) or is hidden (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.ShowOutletControlMenuFeedbackEventId"/>.</para> 
            </summary>
            <remarks> This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelLockFeedback">
            <summary>
            Property to indicate that the front panel is locked (true) or unlocked (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelLockFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayFeedback">
            <summary>
            Property to indicate that the front panel display is ON (true) or OFF (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleFeedback">
            <summary>
            Property to indicate that the power is being cycled to all the outlets.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleFeedbackEventId"/>.</para>
            This property will stay true for the time defined by the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelay"/> property.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageCutoff">
            <summary>
            Property to set the low RMS voltage limit in volts. Automatic shutdown when voltage is below this threshold.
            </summary>
            <remarks>Valid range is 80 to 110.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageCutoffFeedback">
            <summary>
            Property to report the low RMS voltage limit in volts.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.UnderVoltageCutoffFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid range is 80 to 110.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageCutoff">
            <summary>
            Property to set the high RMS voltage limit in volts. Automatic shutdown when voltage is above this threshold.
            </summary>
            <remarks>Valid range is 130 to 160.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageCutoffFeedback">
            <summary>
            Property to report the high RMS voltage limit in volts.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverVoltageCutoffFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid range is 130 to 160.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentCutoff">
            <summary>
            Property to set the high RMS current limit in Amps. Automatic shutdown when total current is above this threshold.
            </summary>
            <remarks>Valid range is 0 to 15.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentCutoffFeedback">
            <summary>
            Property to report the high RMS current limit in Amps.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OverCurrentCutoffFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid range is 0 to 15.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureHighCutoff">
            <summary>
            Property to set high temperature limit. Automatic shutdown when temperature is above this threshold.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureHighCutoffFeedback">
            <summary>
            Property to report the high temperature limit.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TemperatureHighCutoffFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SamplingInterval">
            <summary>
            Property to set the interval between join updates and log entries in seconds.
            </summary>
            <remarks>Valid range is 5 to 3600, with 5 second increments. Value 1 represents 5 seconds.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SamplingIntervalFeedback">
            <summary>
            Property to report the interval between join updates and log entries in seconds.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.SamplingIntervalFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid range is 5 to 3600, with 5 second increments. Value 1 represents 5 seconds.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingInterval">
            <summary>
            Property to set the delay between ping attempts in minutes.
            </summary>
            <remarks>Valid range is 1 to 1440, with 5 minute increments. Value 1 represents 5 minutes.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingIntervalFeedback">
            <summary>
            Property to report the delay between ping attempts in seconds.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingIntervalFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid range is 1 to 1440, with 5 minute increments. Value 1 represents 5 minutes.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailure">
            <summary>
            Property to get/set the outlet bank to shutdown on a ping failure.
            The get returns the last value which was set and not the feedback <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailureFeedback"/> reported by the device
            </summary>
            <remarks> Valid ranges for the banks are 1 to <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.NumberOfOutletBanks"/>. Only banks with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property set to false
            can be shutdown. This property will only take effect if the <see cref="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EnableReportingPingFailure"/> method has been called.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailureFeedback">
            <summary>
            Property to report the outlet bank to shutdown on a ping failure.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailureFeedbackEventId"/>.</para>
            This always reports the last outlet value 
            </summary>
            <remarks>Valid ranges are 1 to <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.NumberOfOutletBanks"/>. Only banks with the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property set to false
            can be shutdown.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayBrightnessFeedback">
            <summary>
            Property to report the Front Panel Display Brightness
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayBrightnessFeedbackEventId"/>.</para>
            Valid range is 0 to 65535. Please use the<see cref="M:Crestron.SimplSharpPro.DeviceSupport.SimplSharpDeviceHelper.UshortToPercent(System.UInt16)"/>to convert
            the ushort to a percentage value.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.FrontPanelDisplayBrightness">
            <summary>
            Property to set the Front Panel Display Brightness
            Valid range is 0 to 65535. Please use the<see cref="M:Crestron.SimplSharpPro.DeviceSupport.SimplSharpDeviceHelper.PercentToUshort(System.Single)"/>to convert
            the percentage to a ushort value
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelay">
            <summary>
            Property to set the power cycle delay. This is the time in seconds, the outlets will be turned off
            when the <see cref="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycle"/> or <see cref="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.PowerCycle"/> method is called.
            </summary>
            <remarks> Valid range is from 1 to 300 seconds with a default value of 1 seconds. Increments of 1 represent 1 seconds.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelayFeedback">
            <summary>
            Property to report the power cycle delay. This is the time in seconds, the outlets will be turned off
            when the <see cref="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycle"/> or <see cref="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.PowerCycle"/> method is called.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelayFeedbackEventId"/>.</para>
            </summary>
            <remarks> Valid range is from 1 to 300 seconds with a default value of 1 seconds . Increments of 1 represent 1 seconds.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.HostnameOrIPAddressToPing">
            <summary>
            Property to set the Hostname or IP address of the device to ping.
            This specifies the device to ping and if the ping fails then the outlet specified by <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletToShutdownOnPingFailure"/> is turned off and on.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.HostnameOrIPAddressToPingFeedback">
            <summary>
            Property to return the Hostname or IP address of device to ping.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.HostnameOrIPAddressToPingFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBanks">
            <summary>
            Collection of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBanks"/> this power condition can control.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.EthernetPcX00.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="ipId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.CresnetPcX00.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="cId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.CresnetPcX00.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots,Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00)">
            <summary>
            Constructor used to add the device to ta CresnetBranch.
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00OutletBanks.Banks">
            <summary>
            Collection of PcX00OutletBank objects.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00OutletBanks.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice,System.UInt32)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
            <param name="paramNumberOfBanks">Number of Outlet Banks.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00OutletBanks.PcX00OutletBank.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00System.SystemStatusSubClass">
            <summary>
            Object of PcX00SystemStatus on the current device.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00System.SystemControlSubClass">
            <summary>
            Object of PcX00SystemControl on the current device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00System.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00System.PcX00SystemStatus.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PcX00System.PcX00SystemControl.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor">
            <summary>
            Controls for an individual ping monitor that is part of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/>.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> with events IDs defined in the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> with <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> is set to the corresponding monitor.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00)">
            <summary>
            Constructor for create anew Ping Monitoring Control class.
            </summary>
            <param name="paramMonitorNumber">The ping monitoring number.</param>
            <param name="paramSystemControl">The device that contains the ping monitoring joins.</param>
            <param name="paramParent">Power conditioner this monitor is apart of.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Number">
            <summary>
            Number of this <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Parent">
            <summary>
            Power conditioner that owns this <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor"/>.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Outlet">
            <summary>
            Property to set the PingOutlet using the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank"/> from the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> class. 
            <para>On the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/>, the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank"/> controls two outlets each. Due to this hardware design, when an <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Outlet"/> is specified it will turn off two physical outlets.</para>
            <para>To clear the current setting, pass in a value of 'null'</para>
            <para>This is equlivant to setting the Raw value to that of the value of <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Number"/>.</para>
            <exception cref="T:System.InvalidOperationException">The specified <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank"/> is not from the same <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00"/> as this <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor"/>.</exception>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.OutletRaw">
            <summary>
            Property to modify the outlet bank that will shutdown on ping failure.
            <para>On the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/>, the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank"/> controls two outlets each. Due to this hardware design, when an <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Outlet"/> is specified it will also turn off two outlets. </para>
            <para>Valid values for the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/> are 0 to 3.</para>
            <para>Valid values for the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> are 0 to 8.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.OutletFeedback">
            <summary>
            Property to indicate the currently set <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank"/> that will shutdown on ping failure.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletFeedbackEventId"/> and <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> gives the index into the <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PingMonitors"/> collection.</para>
            <para>This feature of the power condition is not available for the front panel outlet.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.OutletRawFeedback">
            <summary>
            Property to indicate the currently set outlet bank number that will shutdown on ping failure.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletFeedbackEventId"/> and <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> gives the index into the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBanks"/> collection.</para>
            <para>This feature of the power condition is not available for the front panel outlet.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.Target">
            <summary>
            The IP address or hostname of the device the power condition will ping in order to determine when the turn off the outlet specified by <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.OutletFeedback"/>.
            <para>This feature of the power condition is not available for the front panel outlet. SIMPL# Pro will not validate this input.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.TargetFeedback">
            <summary>
            Property to indicate the currently set IP address of hostname of the device that will be pinged by the power conditioner to determine if the outlet specified by <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.OutletFeedback"/> will be turned off.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.TargetFeedbackEventId"/> and <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> gives the index into the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBanks"/> collection.</para>
            <para>This feature of the power condition is not available for the front panel outlet.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PingMonitor.UserSpecifiedObject">
            <summary>
            Object that can be set to aid in development.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank">
            <summary>
            Outlet Bank class for Power Conditioners.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.On">
            <summary>
            Method to activate power to the outlet bank.
            </summary>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.</remarks>
            <exception cref="T:System.NotSupportedException">Operation not supported</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Off">
            <summary>
            Method to deactivate power to the outlet bank.
            </summary>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.</remarks>
            <exception cref="T:System.NotSupportedException"> Operation not supported</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.PowerCycle">
            <summary>
            Property to cycle power to the outlet bank
            </summary>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.
            The outlet will stay off for the duration specified by the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.PowerCycleDelay"/> property.</remarks>
            <exception cref="T:System.NotSupportedException"> Operation not supported</exception>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Number">
            <summary>
            Outlet Bank Number
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn">
            <summary>
            Indicates whether we can turn the bank on and off.
            <para>On the PC-300, the front panel's outlet can not be turned off.  This outlet is always on.</para>
            This affects the <see cref="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.On"/>, <see cref="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Off"/>, and <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Delay"/> properties on the bank.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.OnOffFeedback">
            <summary>
            Property to indicate that power to the outlet bank is activated (true) or deactivated (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event of the parent will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankOnOffFeedbackEventId"/>.</para>
            </summary>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Delay">
            <summary>
            Property to set power on delay in seconds to the outlet bank.
            </summary>
            <remarks>Valid range is 0.1 to 10 seconds, value 1 = 0.1 seconds, 100 = 10 seconds.</remarks>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.DelayFeedback">
            <summary>
            Property to report the power on delay in seconds of the outlet bank.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event of the parent will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankDelayFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid range is 0.1 to 10 seconds, value 1 = 0.1 seconds, 100 = 10 seconds.</remarks>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.CurrentFeedback">
            <summary>
            Property to report the RMS Current reading in Amps for this outlet.
            This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event of the parent will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankCurrentFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are 0 to 75 Amps.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.PowerFeedback">
            <summary>
            Property to report the Power in reading Watts for this outlet.
            This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event of the parent will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankPowerFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are 0 to 2000 Watts.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Name">
            <summary>
            Property to set the name for the outlet bank.
            </summary>
            <remarks> Name is restricted to 15 characters </remarks>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.NameFeedback">
            <summary>
            Property to return the name for the specified outlet bank.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event of the parent will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankNameFeedbackEventId"/>.</para>
            </summary>
            <remarks> This feature is not available when the <see cref="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.AlwaysOn"/> property is true for the specific bank.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.EnergyFeedbackRaw">
            <summary>
            Property to return the Energy reading formatted as a 9-digit decimal string.
            This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event of the parent will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankEnergyFeedbackEventId"/>.</para>
            </summary>
            <remarks>Valid values are from 0 to 999999999 Wh.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.EnergyFeedback">
            <summary>
            Property to return the Energy reading converted to integer from a 9-digit decimal string format.
            This property is valid for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> devices only, return value is 0 otherwise.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event of the parent will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.PcX00.OutletBankEnergyFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.Parent">
            <summary>
            The parent that a given object was added to.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.OutletBank.UserSpecifiedObject">
            <summary>
            Can be assigned anything that user wants.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200">
             <summary>
             PC-200 Power Conditioner on Ethernet Interface.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
             </summary>
             <example>
             <code>
                static PcX00 _pc200;
            
                public ControlSystemPcX00()
                {
                    //Register console commands
                    CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a PC-X00 CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                }
                
                // Method to handle sig change events for PC-X00
                static void PcX00_EventHandler(GenericBase genericBase, BaseEventArgs args) 
                {
                    if (args.EventId == PcX00.PowerSwitchOnFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("PowerSwitchOnFeedbackEventId event occurred");
                    }
                    else if (args.EventId == PcX00.OutletBankEnergyFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("OutletBankEnergyFeedbackEventId for Outlet Bank {0} event occurred", args.Index);
                    }
                }
            
                public void CreateDeviceCmd(String args)
                {
                    //Initialize the PC-200 device for Ethernet Communication
                    _pc200 = new Pc200(0x16, this);
            
                    _pc200.BaseEvent += PcX00_EventHandler;
            
                    //Register the PC-200 with the Control system
                    //This will enable the gateway connection ("127.0.0.1") in the system at the 
                    //ID specified above that the PC-200 will connect to.
                    _pc200.Register();
                }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/> device.
            </summary>
            <param name="paramIpId">Ethernet IPID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/> device.</param>        
            <param name="paramControlSystem">Control system this ethernet interface is a part of.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200">
            <summary>
            PC-200 Power Conditioner on Cresnet Interface.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
            </summary>
            <example>
            Refer the example code for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/>.
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200"/> device.
            </summary>
            <param name="paramCresnetId">Cresnet ID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200"/> device.</param>        
            <param name="paramControlSystem">Control system this cresnet interface is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200"/> device on IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc200"/> device.</param>        
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300">
            <summary>
            PC-300 Power Conditioner on Ethernet interface.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
            </summary>
            <example>
            Refer the example code for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/>.
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> device.
            </summary>
            <param name="paramIpId">Ethernet IPID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc300"/> device.</param>        
            <param name="paramControlSystem">Control system this ethernet interface is a part of.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300">
            <summary>
            PC-300 Power Conditioner on Cresnet interface.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
            </summary>
            <example>
            Refer the example code for <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.Pc200"/>.
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> device.
            </summary>
            <param name="paramCresnetId">Cresnet ID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> device.</param>        
            <param name="paramControlSystem">Control system this cresnet interface is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> device on IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of the <see cref="T:Crestron.SimplSharpPro.GeneralIO.PowerConditioners.CresnetPc300"/> device.</param>        
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel">
            <summary>
            Enum to define the Sensitivity levels for ultrasonic (US) and passive infrared (PIR) while sensor is in occupied or vacant states.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel.Low">
            <summary>
            Low Sensitivity
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel.Medium">
            <summary>
            Medium Sensitivity
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel.High">
            <summary>
            High Sensitivity
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel.XLow">
            <summary>
            XLow Sensitivity, not applicable for passive infrared (PIR)
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel.TwoXLow">
            <summary>
            2XLow Sensitivity, not applicable for passive infrared (PIR)
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel.ThreeXLow">
            <summary>
            3XLow Sensitivity, not applicable for passive infrared (PIR)
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.C2nIo">
            <summary>
            The C2N-IO is a compact Cresnet control module that adds control ports to any Crestron 2-Series or 3-Series control system.
            <para>This device does not support ComPort extended information events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nIo.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new C2N-IO device.
            </summary>
            <param name="paramCresnetID">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nIo.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new C2N-IO device.
            </summary>
            <param name="paramCresnetID">CresnetID of this device.</param>
            <param name="paramControlSystem">Control system this card is attached to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nIo.ComPorts">
            <summary>
             Collection of serial COM ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nIo.NumberOfComPorts">
            <summary>
            Number of serial COM ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nIo.IROutputPorts">
            <summary>
            Collection of IR output ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nIo.NumberOfIROutputPorts">
            <summary>
            Number of IR output ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nIo.NumberOfRelayPorts">
            <summary>
            Number of relay ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nIo.RelayPorts">
            <summary>
            Collection of relay ports on the device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nIo.Cresnet_C2N_IO.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots,System.Object)">
            <summary>
            Constructor used to add the device to a CresnetBranch.
            </summary>
            <param name="paramCresnetID">ID of this device</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>            
            <param name="paramParent">The parent that a given object was added to.</param>			
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nIo.Cresnet_C2N_IO.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.Object)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="paramCresnetID">ID of this device</param>
            <param name="Owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.C2nIo.Cresnet_C2N_IO.COM.ComPort1">
            <summary>
            Data Bit Support: 8, 7
            Baud Rate Support: 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400, 19200, 28800, 38400, 57600, 115200
            Parity Support: N, O, E
            Protocol Support: (RS232)
            SW HandShaking Support: XONT, XON, XONR, (None)
            Stop Bit Support: 1, 2
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nIo.Cresnet_C2N_IO.RelaySlot.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice,System.Object)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramID">ID of this device.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.StIo">
             <summary>
             The ST-IO provides eight isolated relays for controlling low voltage contact closure devices such as drapes, screens and lifts. 
             It also provides four local digital inputs. The feedbacks for relay ports are simulated.
             </summary>
             <example>
             <code>
              static StIo myStIo;
              public ControlSystemStcom()
              {
                 CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a ST-IO CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                 CrestronConsole.AddNewConsoleCommand(OpenRelayCmd, "OpenRelay", "This is a ST-IO OpenRelay command", ConsoleAccessLevelEnum.AccessOperator);
                 CrestronConsole.AddNewConsoleCommand(CloseRelayCmd, "CloseRelay", "This is a ST-IO CloseRelay command", ConsoleAccessLevelEnum.AccessOperator);
              }
             
              //Function to create the device object.
              public void CreateDeviceCmd(String args)
              {
                 myStIo = new StIo(0x17, this);
                 myStIo.Register();
                 CrestronConsole.ConsoleCommandResponse("{0} device successfully registered.\r\n", myStIo.ToString());
                 
                 <![CDATA[for (uint i = 1; i <= 4; i++)]]>
                 {
                     myStIo.DigitalInputPorts[i].StateChange += DigitalInputStateChangeEventHandler;
                 }
              }
              
              //Function to handle Digital Input state change for ST-IO.
              public void DigitalInputStateChangeEventHandler(DigitalInput digitalInput, DigitalInputEventArgs args)
              {
                 CrestronConsole.PrintLine("Digital Input State changed for port {0}, to {1}", 1, myStIo.DigitalInputPorts[1].State);
                 CrestronConsole.PrintLine("Digital Input State changed for port {0}, to {1}", 2, myStIo.DigitalInputPorts[2].State);
              }
             
              //Function to close a relay port.
              public void CloseRelayCmd(String args)
              {
                 myStIo.RelayPorts[Convert.ToUInt32(args)].Close();
                 CrestronConsole.ConsoleCommandResponse("Relay port close state {0}.\r\n", myStIo.RelayPorts[Convert.ToUInt32(args)].State);
              }
            
              //Function to open a relay port.
              public void OpenRelayCmd(String args)
              {
                 myStIo.RelayPorts[Convert.ToUInt32(args)].Open();
                 CrestronConsole.ConsoleCommandResponse("Relay port open state {0}.\r\n", myStIo.RelayPorts[Convert.ToUInt32(args)].State);
              }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StIo.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to create a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.StIo"/> object.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <exception cref="T:System.ArgumentNullException">The IDeviceBranch specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.StIo.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to create a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.StIo"/> object.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>        
            <param name="paramControlSystem">Control system this ethernet device is a part of.</param>        
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StIo.DigitalInputPorts">
            <summary>
            Collection of digital input ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StIo.NumberOfDigitalInputPorts">
            <summary>
            Number of digital input ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StIo.NumberOfRelayPorts">
            <summary>
            Number of relay ports this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.StIo.RelayPorts">
            <summary>
            Collection of relay ports on the device.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CresnetStIo">
            <summary>
            Actual Device class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.StIo"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.DigitalInput1">
            <summary>
            Digital Input Port1 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.DigitalInput2">
            <summary>
            Digital Input Port2 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.DigitalInput3">
            <summary>
            Digital Input Port3 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.DigitalInput4">
            <summary>
            Digital Input Port4 
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay1">
            <summary>
            Relay Port5
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay2">
            <summary>
            Relay Port6
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay3">
            <summary>
            Relay Port7
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay4">
            <summary>
            Relay Port8
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay5">
            <summary>
            Relay Port9
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay6">
            <summary>
            Relay Port10
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay7">
            <summary>
            Relay Port11
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.Relay8">
            <summary>
            Relay Port12
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,Crestron.SimplSharpPro.GeneralIO.StIo)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramCresnetId">ID of this device.</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots,Crestron.SimplSharpPro.GeneralIO.StIo)">
            <summary>
            Constructor used to add the device to the CresnetBranch.
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.CommonInit(Crestron.SimplSharpPro.GeneralIO.StIo)">
            <summary>
            Method to initialize the digital input ports and relay ports.
            </summary>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.DigitalInputPorts">
            <summary>
            Collection of digital inputs on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.NumberOfDigitalInputPorts">
            <summary>
            Number of digital inputs this device supports.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.RelayPorts">
            <summary>
            Collection of relay ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CresnetStIo.NumberOfRelayPorts">
            <summary>
            Number of relay ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.DinCenCn2Poe">
            <summary>
            Crestron device that provides two independent cresnet control branches.
            </summary>
            <example>
            See <see cref="T:Crestron.SimplSharpPro.GeneralIO.DinCenCn2"/> for example usage.
            </example>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.DinCenCn2">
             <summary>
             Crestron device that provides two independent cresnet control branches.
             </summary>
             <example>
             The following example will initialized a DinCenCn2 and add a cresnet keypad to one of the branches.
             <code>
                //Add reference to Crestron.SimplSharpPro.Keypads for C2nCbdP.
                //Add reference to Crestron.SimplSharpPro.GeneralIO for DinCenCn2.
                public class ControlSystem : CrestronControlSystem
                {
                    //Cresnet bridge
                    public DinCenCn2 BridgeDevice;
                    //Cresnet keypad
                    public C2nCbdP CbdP;
                    
                    //Constructor
                    public ControlSystem()
                    {
                        CrestronConsole.AddNewConsoleCommand(AddDeviceToBridge, "AddDevice", "Add devices to the cresnet bridge.", ConsoleAccessLevelEnum.AccessOperator);
                    }
            
                    //Console Command Handler
                    private void AddDeviceToBridge(string cmdParameters)
                    {
                        if (BridgeDevice != null)
                            return;
            
                        //Initialize bridge
                        BridgeDevice = new DinCenCn2(0x44, this);
            
                        //Initialized Cresnet keypad
                        //Valid Cresnet IDs for a branch are from 0x03 to 0x16. 
                        CbdP = new C2nCbdP(0x10, BridgeDevice.Branches[1]);
            
                        //Register for the Online/Offline status change.
                        BridgeDevice.OnlineStatusChange += DeviceOnOnlineStatusChange;
                        CbdP.OnlineStatusChange += DeviceOnOnlineStatusChange;
            
                        //Register the bridge (this will register the cresnet keypad) 
                        BridgeDevice.Register();
            
                        //If the keypad was added at a later time call register on the device to indicated to the 
                        //bridge that it is going to be used by this program.
                    }
                   
                    //Online/Offline event handler
                    private void DeviceOnOnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                    {
                        //Print indicating the bridge's or keypad's online/offline state.
                        CrestronConsole.PrintLine(String.Format("{1} is {0}", args.DeviceOnLine ? "Online" : "Offline.", currentDevice));
                    }
                }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.TestAllBranches">
            <summary>
            Method to start electrical testing on all branches.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.#ctor(System.String,System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Base constructor to generate a new DIN-CENCN-2.
            </summary>
            <param name="deviceName">Name of the particular Cresnet bridge device.</param>
            <param name="paramIPID">Ethernet IPID of the device.</param>        
            <param name="paramControlSystem">Control system this ethernet interface is a part of.</param>       
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new DIN-CENCN-2.
            </summary>
            <param name="paramIPID">Ethernet IPID of the device.</param>        
            <param name="paramControlSystem">Control system this ethernet interface is a part of.</param>       
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.Helper">
            <summary>
            Cresnet bridge helper. 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.Branches">
            <summary>
            Collection of cresnet branches a part of this device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.FakeUpdateRequest">
            <summary>
            Property to activate fake cresnet update request 
            True = Active; False = InActive
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.InTestModeFeedback">
            <summary>
            Flag to indicate if this bridge is currently running a test.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.CresnetBridgeEventIds.InTestModeFeedbackEventId"/>.</para> 
            </summary>
            <remarks>'true' = test is in progress, 'false' = no test in progress.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.BranchTestDoneFeedback">
            <summary>
            Flag to indicate that all branch testing has completed.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.CresnetBridgeEventIds.BranchTestDoneFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.OverTemperatureFeedback">
            <summary>
            Flag to indicate that the device is running over safe temperature ratings.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.CresnetBridgeEventIds.OverTemperatureFeedbackEventId"/>.</para> 
            </summary>
            <remarks>'true' = device is running over temperature, 'false' = device is within normal temperature.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.PowerSupplyErrorStatusFeedback">
            <summary>
            Bridge's Power Supply Status.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.CresnetBridgeEventIds.PowerSupplyErrorStatusFeedbackEventId"/> and the <See cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> corresponding to the power supply number.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.TestResultsFeedback">
            <summary>
            Results of the electrical test that previous ran.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.CresnetBridgeEventIds.TestResultsFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.PowerSupplyStatusFeedback">
            <summary>
            Get the status of the detected power source.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.CresnetBridgeEventIds.PowerSupplyStatusFeedbackEventId"/> and the <See cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> corresponding to the power supply number.</para> 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.DINCENCN_2.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.UInt32)">
            <summary>
            Constructor to generate a new DIN-CENCN-2    
            </summary>
            <param name="paramIPID">Ethernet IPID of the device.</param>        
            <param name="paramControlSystem">Control system this ethernet device is a part of.</param>  
            <param name="paramNumberOfBranches">number of cresnet branches this device supports.</param>     
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.DinCenCn2.DINCENCN_2.Helper">
            <summary>
            Cresnet bridge helper reserved sigs extender. 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinCenCn2Poe.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new DIN-CENCN-2-POE.
            </summary>
            <param name="paramIPID">Ethernet IPID of the device.</param>        
            <param name="paramControlSystem">Control system this ethernet interface is a part of.</param>       
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.DinCenCn2Poe.#ctor(System.String,System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new DIN-CENCN-2-POE with a custom device name.
            </summary>
            <param name="paramIPID">Ethernet IPID of the device.</param>        
            <param name="paramControlSystem">Control system this ethernet interface is a part of.</param> 
            <param name="deviceName">Name of this POE Ethernet Cresnet Bridge.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe">
             <summary>
             Ethernet-based dual technology sensor that uses passive infrared and ultrasonic technologies to detect occupancy.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> events.</para>
             </summary>
             <example>
             <code>
                static CenOdtCPoe _cenOdtCPoe;
            
                public ControlSystemCenOdtCPoe()
                {
                    //Register console commands
                    CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevice", "This is a CEN-ODT-C-POE CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                }
            
                public void CreateDeviceCmd(String args)
                {
                    _cenOdtCPoe = new CenOdtCPoe(0x25, this);
                    _cenOdtCPoe.BaseEvent += CenOdtCPoePropertyChangeEventHandler;
                    _CenOccupancySensorChange += OccupancySensorPropertyChange;
            
                    _cenOdtCPoe.Register();
                    if (_cenOdtCPoe.Registered)
                    {
                        CrestronConsole.ConsoleCommandResponse("{0} device successfully registered\r\n", _cenOdtCPoe.ToString());
                    }
                }
            
                public void CenOdtCPoePropertyChangeEventHandler(GenericBase device, BaseEventArgs args)
                {
                    if (args.EventId == GlsOccupancySensorBase.RoomOccupiedFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("Room Occupied Feedback Event Received, OccupancyDetectedFeedback is {0}", _cenOdtCPoe.OccupancyDetectedFeedback);
                    }
                }
             
                public void OccupancySensorPropertyChange(CenOdtCPoe device, CenOccupancySensorChangeEventArgs args)
                {
                    if (args.EventId == GlsOccupancySensorBase.LedFlashEnabledFeedbackEventId)
                    {
                        CrestronConsole.PrintLine("Led Flash Enabled Feedback Event Received, LedFlashEnabledFeedback is {0}", _cenOdtCPoe.LedFlashEnabledFeedback);
                    }
                }
             </code>
             </example>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._forceOccupied">
            <summary>
            Storage of the ForceOccupied Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._forceVacant">
            <summary>
            Storage of the ForceVacant Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._enableRawStates">
            <summary>
            Storage of the EnableRawStates Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._rawStatesEnabledFeedback">
            <summary>
            Storage of the RawStatesEnabledFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._disableRawStates">
            <summary>
            Storage of the DisableRawStates Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._roomOccupiedFeedback">
            <summary>
            Storage of the RoomOccupiedFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._graceOccupancyDetectedFeedback">
            <summary>
            Storage of the GraceOccupancyDetectedFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._roomVacantFeedback">
            <summary>
            Storage of the RoomVacantFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._rawOccupancyDetectedFeedback">
            <summary>
            Storage of the RawOccupancyFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._rawOccupancyDetectedByPassiveInfraredSensorFeedback">
            <summary>
            Storage of the RawOccupancyPassiveInfraredFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._rawOccupancyDetectedByUltrasonicSensorFeedback">
            <summary>
            Storage of the RawOccupancyUltrasonicFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._timeout">
            <summary>
            Storage of the Timeout Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._internalPhotoSensorMinimumChange">
            <summary>
            Storage of the InternalPhotoSensorMinimumChange Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._timeoutFeedback">
            <summary>
            Storage of the TimeoutFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._internalPhotoSensorValueFeedback">
            <summary>
            Storage of the InternalPhotoSensorValueFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._internalPhotoSensorMinimumChangeFeedback">
            <summary>
            Storage of the InternalPhotoSensorMinimumChangeFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._enableLedFlash">
            <summary>
            Storage of the EnableLedFlash Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._ledFlashEnabledFeedback">
            <summary>
            Storage of the LedFlashEnabledFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._disableLedFlash">
            <summary>
            Storage of the DisableLedFlash Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._enableShortTimeout">
            <summary>
            Storage of the EnableShortTimeout Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._shortTimeoutEnabledFeedback">
            <summary>
            Storage of the _ShortTimeoutEnabledFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._disableShortTimeout">
            <summary>
            Storage of the DisableShortTimeout Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._enablePassiveInfraredSensor">
            <summary>
            Storage of the EnablePassiveInfraredSensor Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._passiveInfraredSensorEnabledFeedback">
            <summary>
            Storage of the PassiveInfraredSensorEnabledFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._disablePassiveInfraredSensor">
            <summary>
            Storage of the DisablePassiveInfraredSensor Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._passiveInfraredSensorSensitivityInOccupiedState">
            <summary>
            Storage of the PassiveInfraredSensorSensitivityInOccupiedState Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._passiveInfraredSensorSensitivityInVacantState">
            <summary>
            Storage of the PassiveInfraredSensorSensitivityInVacantState Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._passiveInfraredSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Storage of the PassiveInfraredSensorSensitivityInOccupiedStateFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._passiveInfraredSensorSensitivityInVacantStateFeedback">
            <summary>
            Storage of the PassiveInfraredSensorSensitivityInVacantStateFeedback Sig for CEN POE Occupancy Sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._orWhenVacated">
            <summary>
            Storage of the OrWhenVacated Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._orWhenVacatedFeedback">
            <summary>
            Storage of the OrWhenVacatedFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._andWhenVacated">
            <summary>
            Storage of the AndWhenVacated Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._andWhenVacatedFeedback">
            <summary>
            Storage of the AndWhenVacatedFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._orWhenOccupied">
            <summary>
            Storage of the OrWhenOccupied Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._orWhenOccupiedFeedback">
            <summary>
            Storage of the OrWhenOccupiedFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._andWhenOccupied">
            <summary>
            Storage of the AndWhenOccupied Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._andWhenOccupiedFeedback">
            <summary>
            Storage of the AndWhenOccupiedFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._enableUltrasonicSensorSideA">
            <summary>
            Storage of the EnableUltrasonicSideA Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._ultrasonicSensorSideAEnabledFeedback">
            <summary>
            Storage of the UltrasonicSideAEnabledFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._disableUltrasonicSensorSideA">
            <summary>
            Storage of the DisableUltrasonicSideA Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._enableUltrasonicSensorSideB">
            <summary>
            Storage of the EnableUltrasonicSideB Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._ultrasonicSensorSideBEnabledFeedback">
            <summary>
            Storage of the UltrasonicSideBEnabledFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._disableUltrasonicSensorSideB">
            <summary>
            Storage of the DisableUltrasonicSideB Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._identityModeOn">
            <summary>
            Storage of the IdentityModeOn Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._identityModeOnFeedback">
            <summary>
            Storage of the IdentityModeOnFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._identityModeOff">
            <summary>
            Storage of the IdentityModeOff Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._ultrasonicSensorSensitivityInOccupiedState">
            <summary>
            Storage of the UltrasonicSensorSensitivityInOccupiedState Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._ultrasonicSensorSensitivityInVacantState">
            <summary>
            Storage of the UltrasonicSensorSensitivityInVacantState Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._ultrasonicSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Storage of the UltrasonicSensorSensitivityInOccupiedStateFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._ultrasonicSensorSensitivityInVacantStateFeedback">
            <summary>
            Storage of the UltrasonicSensorSensitivityInVacantStateFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._darkToBrightThreshold">
            <summary>
            Storage of the DarkToBrightThreshold Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._darkToBrightThresholdFeedback">
            <summary>
            Storage of the DarkToBrightThresholdFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._brightToDarkThreshold">
            <summary>
            Storage of the BrightToDarkThreshold Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._brightToDarkThresholdFeedback">
            <summary>
            Storage of the BrightToDarkThresholdFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._roomIsDarkFeedback">
            <summary>
            Storage of the RoomIsDarkFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe._roomIsBrightFeedback">
            <summary>
            Storage of the RoomIsBrightFeedback Sig for CEN-ODT-C-POE.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe"/> is on.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.InitializeDevice(Crestron.SimplSharpPro.CrestronDeviceWithEvents)">
            <summary>
            Method to initialize the CEN-ODT-C-POE Occupancy Sensor device.
            </summary>
            <param name="paramCenOccupancySensorDevice">Device reference to the actual CEN Occupancy Sensor device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.InitializeInputSigs">
            <summary>
            Method to initialize input sigs of CEN-ODT-C-POE Occupancy Sensor.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.InitializeOutputSigs">
            <summary>
            Method to initialize output sigs of CEN-ODT-C-POE Occupancy Sensor. 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OnCenOccupancySensorChange(Crestron.SimplSharpPro.DeviceSupport.GenericEventArgs)">
            <summary>
            Method to fire the <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event.
            </summary>
            <param name="paramArgs">Information from the Crestron CEN POE Occupancy Sensor on what changed.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorTopLevel_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the CEN POE Occupancy Sensor Top Level Sig change events.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorConfigurationSettings_SigChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the CEN POE Occupancy Sensor Configuration Settings Sig change events.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.ForceOccupied">
            <summary>
            Method to force the device to report that the room is occupied even if the passive infrared (PIR) sensor does not detect motion.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.VacancyDetectedFeedback"/> sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OccupancyDetectedFeedback"/> sets to true. 
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedFeedback"/> is set to true when <see cref="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.ForceOccupied"/> is called. The sensor will then be in the occupied state for the duration of the set timeout.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.ForceVacant">
            <summary>
            Method to force the device to report that the room is vacant even if the passive infrared (PIR) sensor does not detect vacancy.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OccupancyDetectedFeedback"/> sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.VacancyDetectedFeedback"/> sets to true. Upon forcing vacancy, there is a 5 second delay before the sensor begins re-sensing for motion.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EnableRawStates">
            <summary>
            Method to enable <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedFeedback"/>, <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByPassiveInfraredSensorFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByUltrasonicSensorFeedback"/> properties.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DisableRawStates">
            <summary>
            Method to disable <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedFeedback"/>, <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByPassiveInfraredSensorFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByUltrasonicSensorFeedback"/> properties.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EnableLedFlash">
            <summary>
            Method to enable the red and green feedback LEDs. The red LED turns on as the passive infrared (PIR) sensor detects motion, and the green LED turns on as the ultrasonic (US) sensor detects motion.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DisableLedFlash">
            <summary>
            Method to disable the red and green feedback LEDs from blinking when motion is detected.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EnableShortTimeout">
            <summary>
            Method to enable a “walk-through” mode for a shorter timeouts upon periods of minimal occupancy. If the room is occupied for less than 90s, the timeout will revert to 60s.
            If the normally programmed timeout is set less than 60s, that timeout will take precedence. This is useful for rooms with normally a long timeout setting, so if the room is
            only entered for a short period of time, and occupancy is triggered, the lights do not remain on for a longer period than needed.
            Short timeout does not apply if occupancy event was  a ""Grace occupancy"" (previous vacancy time is greater than 15 seconds).
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DisableShortTimeout">
            <summary>
            Method to disable the short timeout functionality. See <see cref="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EnableShortTimeout"/> method for description.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OrWhenVacated">
            <summary>
            Method to trigger either passive infrared (PIR) OR ultrasonic (US) motion sensors to declare initial occupancy and set the sensor to the occupied state, if the room is vacant.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.AndWhenVacated">
            <summary>
            Method to trigger both passive infrared (PIR) OR ultrasonic (US) motion sensors to detect motion to declare initial occupancy, if the room is vacant.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OrWhenOccupied">
            <summary>
             Method to trigger either passive infrared (PIR) OR ultrasonic (US) motion sensors to determine vacancy and set the sensor to the vacant state, if the room is occupied.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.AndWhenOccupied">
            <summary>
            If the room is occupied, both passive infrared (PIR) OR ultrasonic (US) motion sensors need to not detect motion to declare vacancy.
            Method to trigger both passive infrared (PIR) OR ultrasonic (US) motion sensors to not detect motion to declare vacancy, if the room is occupied.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EnableUltrasonicSensorSideA">
            <summary>
            Method to enable the ultrasonic (US) Sensor side A. Does NOT disable side B. Side A is the side where the majority of the red LED is shown through the dome.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DisableUltrasonicSensorSideA">
            <summary>
            Method to disable the ultrasonic (US) Sensor side A. This does NOT enable side B.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EnableUltrasonicSensorSideB">
            <summary>
            Method to enable the ultrasonic (US) Sensor side B. This does NOT disable side A. Side B is the side where the majority of the green LED is shown through the dome and is also identified on the back-housing plastic rim.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DisableUltrasonicSensorSideB">
            <summary>
            Method to disable the ultrasonic (US) Sensor side B. This does not enable side A.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EnablePassiveInfraredSensor">
            <summary>
            Method to enable the passive infrared (PIR) Sensor.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DisablePassiveInfraredSensor">
            <summary>
            Method to disable the passive infrared (PIR) Sensor.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.IdentityModeOn">
            <summary>
            Method to take the device into Identify Mode. The blue LED blinks.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.IdentityModeOff">
            <summary>
            Methodto take the device out of Identify Mode. Stops the blue LED from blinking.
            </summary>
        </member>
        <member name="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange">
            <summary>
            Event triggered when the CEN Occupancy Sensor reports information to the Control System.
            <para>Valid event IDs are available in <see cref="T:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase"/></para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OccupancyDetectedFeedback">
            <summary>
            Property to indicate when the room is occupied. While occupied, either the passive infrared (PIR) sensor or ultrasonic (US) sensor can be triggered to maintain that state.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.VacancyDetectedFeedback"/> sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OccupancyDetectedFeedback"/> sets to true.
            true = Room Occupied ; false = Room Vacant.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomOccupiedFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.VacancyDetectedFeedback">
            <summary>
            Property to indicate when the room is vacant.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OccupancyDetectedFeedback"/> sets to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.VacancyDetectedFeedback"/> sets to true.
            true = Room Vacant ; false = Room Occupied.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomVacantFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.GraceOccupancyDetectedFeedback">
            <summary>
            Property to indicate occupancy event detected within 15s of initial vacancy event. Beyond 15s after the initial vacancy event, this property cannot be triggered.
            This property is most commonly used in an application where a vacancy-only sensor is desired. In such an instance, only this property will be used to turn on the lights, while <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OccupancyDetectedFeedback"/> will remain unused.
            true = Occupancy event detected within 15s of initial vacancy event; false = No occupancy event detected within 15s of initial vacancy event.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.GraceOccupancyDetectedFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawStatesEnabledFeedback">
            <summary>
            Property to indicate if <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedFeedback"/>, <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByPassiveInfraredSensorFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByUltrasonicSensorFeedback"/> are enabled or disabled.
            true = Raw Occupancy properties are enabled; false = Raw Occupancy properties are disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawStatesEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedFeedback">
            <summary>
            This property value will be set to true if ultrasonic (US) AND/OR passive infrared (PIR) sensors detect motion. The AND/OR determination is decided based upon the chosen logic.
            To see which logic is chosen, look at <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OrWhenVacatedFeedback"/> and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.AndWhenVacatedFeedback"/>.
            For example, in “Vacancy AND” logic both ultrasonic (US) and passive infrared (PIR) technologies must register motion in order to set this property value to true.
            true = motion detected by logical state; false = No motion detected by logical state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByPassiveInfraredSensorFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the passive infrared (PIR) sensor.
            true = motion detected by passive infrared (PIR) sensor; false = No motion detected by passive infrared (PIR) sensor.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyPirFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RawOccupancyDetectedByUltrasonicSensorFeedback">
            <summary>
            Property to indicate if any raw motion registered/detected by the ultrasonic (US) sensor.
            true = motion detected by ultrasonic (US); false = No motion detected by ultrasonic (US).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RawOccupancyUsFeedbackEventId"/>.</para> 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsBrightFeedback">
            <summary>
            Property to indicate when the room is determined to be brightly lit.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> is set to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> is set to true.
            true = Room Bright; false = Room Dark.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomIsBrightFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback">
            <summary>
            Property to indicate when the room is determined to not be brightly lit.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> is set to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> is set to true.
            true = Room Dark; false = Room Bright.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.RoomIsDarkFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RemoteTimeout">
            <summary>
            Property to set a dynamic timeout in seconds. This property is typically used to set different timeouts based upon time of day, or state of room.
            Valid range: 5 (5sec) – 1800 (30min). Any value above 1800 will revert to 1800s and any value below 5 will revert to 5s.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CurrentTimeoutFeedback">
            <summary>
            Property to indicate which timeout being used by the sensor, in seconds.
            The timeout is the elapsed time of raw vacancy needed for the sensor to declare the room vacant and send <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OccupancyDetectedFeedback"/> to false 
            and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.VacancyDetectedFeedback"/> to true.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.TimeoutFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.InternalPhotoSensorValueFeedback">
            <summary>
            Property to report the internal photosensor value.
            The output range is from 0 to MAXIMIM VALUE TO BE DETERMINED lux, scaled linearly from 0 to 65535.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorValueFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.InternalPhotoSensorMinimumChange">
            <summary>
            Property to set the minimum change in value that the internal photosensor must sense before reporting a new value.
            The default minimum change of the device is 655 (1% of the full scale).
            Valid Range: 0 (0 lux) to 65535 (MAXIMUM VALUE O BE DETERMINED lux); if a value of 0 is input, a default of 655 will be applied.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.InternalPhotoSensorMinimumChangeFeedback">
            <summary>
            Reports the minimum change that the photosensor must sense before reporting a new value.
            Valid Range: 0 (0 lux) to 65535 (MAXIMUM VALUE TO BE DETERMINED lux).
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.InternalPhotoSensorMinimumChangeFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DarkToBrightThreshold">
            <summary>
            Property to set the threshold value to transition room from DARK to BRIGHT state.
            When the LightValue rises above this value, a DARK room transitions to BRIGHT.
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> will set to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsBrightFeedback"/> will set to true.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.DarkToBrightThresholdFeedback">
            <summary>
            Property to report the current threshold value set to transition room from DARK to BRIGHT state.
            When the LightValue rises above this value, a DARK room transitions to BRIGHT
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> will set to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsBrightFeedback"/> sets to true.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.DarkToBrightThresholdFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.BrightToDarkThreshold">
            <summary>
            Property to set the threshold value to transition room from BRIGHT to DARK state.
            When the LightValue drops below this value, a BRIGHT room transitions to DARK
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsBrightFeedback"/> will set to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> will set to true.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.BrightToDarkThresholdFeedback">
            <summary>
            Property to report the current threshold value set to transition room from BRIGHT to DARK state.
            When the LightValue rises above this value, a BRIGHT room transitions to DARK
            <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsBrightFeedback"/> will set to false and <see cref="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.RoomIsDarkFeedback"/> will set to true.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.BrightToDarkThresholdFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.LedFlashEnabledFeedback">
            <summary>
            Property to indicate if feedback LEDs are enabled or disabled that indicates if motion is detected.
            true = Feedback LEDs enabled; false = Feedback LEDs disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.LedFlashEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.ShortTimeoutEnabledFeedback">
            <summary>
            Property to report if the short timeout functionality has been enabled.
            true = Short timeout enabled; false = Short timeout disabled
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.ShortTimeoutEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OrWhenVacatedFeedback">
            <summary>
            Property to indicate if either passive infrared (PIR) OR ultrasonic (US) sensor technologies can trigger initial occupancy.
            true = motion sensed needed by only one technology; false = OR logic disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OrWhenVacatedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.AndWhenVacatedFeedback">
            <summary>
            Property to indicate if both passive infrared (PIR) OR ultrasonic (US) sensor technologies must register motion to trigger initial room occupancy.
            true = motion sensed needed by both technologies for initial occupancy; false = AND logic disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.AndWhenVacatedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.OrWhenOccupiedFeedback">
            <summary>
            Indicates if either passive infrared (PIR) OR ultrasonic (US) sensor technologies can un-trigger to determine vacancy.
            true = Vacancy determined by the lack of sense by only one technology; false = OR logic disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.OrWhenOccupiedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.AndWhenOccupiedFeedback">
            <summary>
            Indicates that both passive infrared (PIR) OR ultrasonic (US) sensor technologies must not register motion to trigger room vacancy.
            true = Vacancy determined by the lack of sensed motion by both technologies; false = AND logic disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.AndWhenOccupiedFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.UltrasonicSensorSideAEnabledFeedback">
            <summary>
            Property to report if the ultrasonic (US) Sensor side A is enabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsAEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.UltrasonicSensorSideBEnabledFeedback">
            <summary>
            Property to report if the ultrasonic (US) Sensor side B is enabled.
            true = US Sensor B enabled; false = US Sensor B disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsBEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.PassiveInfraredSensorEnabledFeedback">
            <summary>
            Property to report if the passive infrared (PIR) Sensor is enabled.
            true = PIR Sensor enabled; false = PIR Sensor disabled.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirEnabledFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.IdentityModeOnFeedback">
            <summary>
            Reports if the device is in Identify Mode.
            true = Device is in Identify Mode; false = Device is out of Identify Mode.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.IdentityOnFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.PassiveInfraredSensorSensitivityInOccupiedState">
            <summary>
            Property to set the Sensitivity level for passive infrared (PIR) while sensor in occupied state.
            <exception cref="T:System.InvalidOperationException">Value passed for Sensitivity level is not valid.</exception>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.PassiveInfraredSensorSensitivityInVacantState">
            <summary>
            Property to set the Sensitivity level for passive infrared (PIR) while sensor in vacant state.
            <exception cref="T:System.InvalidOperationException">Value passed for Sensitivity level is not valid.</exception>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.UltrasonicSensorSensitivityInOccupiedState">
            <summary>
            Property to set the Sensitivity level for ultrasonic (US) while sensor is in occupied state.
            <exception cref="T:System.InvalidOperationException">Value passed for Sensitivity level is not defined in the enum <see cref="T:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel"/>.</exception>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.UltrasonicSensorSensitivityInVacantState">
            <summary>
            Property to set the Sensitivity level for ultrasonic (US) while sensor is in vacant state.
            <exception cref="T:System.InvalidOperationException">Value passed for Sensitivity level is not defined in the enum <see cref="T:Crestron.SimplSharpPro.GeneralIO.eSensitivityLevel"/>.</exception>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.UltrasonicSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report Sensitivity level for ultrasonic (US) while sensor is in occupied state. 
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInOccupiedStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.UltrasonicSensorSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for ultrasonic (US) while sensor is in vacant state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.UsSensitivityInVacantStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.PassiveInfraredSensorSensitivityInOccupiedStateFeedback">
            <summary>
            Property to report Sensitivity level for passive infrared (PIR) while sensor is in occupied state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInOccupiedStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.PassiveInfraredSensorSensitivityInVacantStateFeedback">
            <summary>
            Property to report Sensitivity level for passive infrared (PIR) while sensor is in vacant state.
            <para>The <see cref="E:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.CenOccupancySensorChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.GeneralIO.GlsOccupancySensorBase.PirSensitivityInVacantStateFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EthernetCenOdtCPoe">
            <summary>
            Auto generated class for CEN-ODT-C-POE Occupancy Sensor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EthernetCenOdtCPoe.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramIpId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenOdtCPoe.EthernetCenOdtCPoe.CenOdtCPoeSensorConfigurationSettings.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.C2nRths">
            <summary>
            A Cresnet based temperature and humidity sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.C2nRths.TemperatureFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.C2nRths.TemperatureFeedback">TemperatureFeedback</see> has changed.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.C2nRths.HumidityFeedbackEventId">
            <summary>
            Event ID to indicate that <see cref="P:Crestron.SimplSharpPro.GeneralIO.C2nRths.HumidityFeedback">HumidityFeedback</see> has changed.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nRths.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new C2nRths Temperature and Humidity sensor.
            </summary>
            <param name="paramCresnetID">Cresnet ID of the device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nRths.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new C2nRths Temperature and Humidity sensor. 
            </summary>
            <param name="paramCresnetID">Cresnet ID of the device.</param>
            <param name="paramControlSystem">Control system that this device is on.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nRths.C2nRthsSigChangeHandler(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            The C2nRths sig change event handler.  
            </summary>
            <param name="currentDevice">Device that triggered the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.C2nRths._temperatureFormat">
            <summary>
            Storage of the TemperatureFormat Sig for GLS-RTHS temperature and humidity sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.C2nRths._temperatureFeedback">
            <summary>
            Storage of the TemperatureFeedback Sig for GLS-RTHS temperature and humidity sensor.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.C2nRths._humidityFeedback">
            <summary>
            Storage of the HumidityFeedback Sig for GLS-RTHS temperature and humidity sensor.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nRths.TemperatureFormat">
            <summary>
            Sets the temperature scale.
            </summary>
            <remarks> when True, the temperature is reported in degrees Celsius; when False, degrees Fahrenheit.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nRths.TemperatureFeedback">
            <summary>
            Reports the temperature level. 
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.C2nRths.TemperatureFeedbackEventId">TemperatureFeedbackEventId</see> will trigger to indicate change.
            </summary>  
            <remarks> The values will range from -400 to +1760 (for -40° to +176° F) or -400 to +800 (for -40° to +80° C)in tenths of a degree.</remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.C2nRths.HumidityFeedback">
            <summary>
            Reports the relative humidity level. Level ranging from 0 to 100 (for 0% to 100% RH).
            EventIds: <see cref="F:Crestron.SimplSharpPro.GeneralIO.C2nRths.HumidityFeedbackEventId">HumidityFeedbackFeedbackEventId</see> will trigger to indicate change.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.C2nRths.CresnetC2nRths">
            <summary>
            Auto generated class for C2N-RTHS Temperature and Humidity sensor.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nRths.CresnetC2nRths.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor use to add this device to a CresnetBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="cresnetBranch">CresnetBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nRths.CresnetC2nRths.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.C2nRths.CresnetC2nRths.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Constructor used when the device is added to a external device. (External Gateway, Salve Cresnet, etc.)
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device</param>
            <param name="parentDevice">Parent device to add this device to.</param>
            <exception cref="T:System.InvalidOperationException">Unable to add the child device. Possibly invalid ID or device type being added is not supported.</exception>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom">
            <summary>
            Base class for CEN-IO-COM-102.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoCom.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom"/> is on.</param>
            <param name="paramDeviceName">Name of the device.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoCom.ComPorts">
            <summary>
            Collection of serial COM ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.CenIoCom.NumberOfComPorts">
            <summary>
            Number of serial COM ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom102">
            <summary>
            Crestron external standalone serial COM card that provides RS-232 control interfaces for video displays, AV components, small applications, and other equipment.
            It includes two separate bidirectional RS-232 ports and communicates with the control system network via Ethernet.
            </summary>
            <example>
            <code>
            static CenIoCom102 _com2;
            public ControlSystemCenIoCom2()
            {
                CrestronConsole.AddNewConsoleCommand(CreateDeviceCmd, "CreateDevCom2", "This is a CEN-IO-COM-102 CreateDevice command", ConsoleAccessLevelEnum.AccessOperator);
                CrestronConsole.AddNewConsoleCommand(RegisterCmd, "RegisterCOM2", "This is Register CEN-IO-COM-102 command", ConsoleAccessLevelEnum.AccessOperator);
            }
            
            //Function to create the CEN-IO-COM-102 device.
            public void CreateDeviceCmd(String args)
            {
                _com2 = new CenIoCom102(0x33, this);
                _com2.Register();
                CrestronConsole.ConsoleCommandResponse("{0} device successfully registered\r\n", _com2.ToString());
                _com2.ComPorts[1].TransmitString = "Crestron";
             
                _com2.ComPorts[1].PropertyChanged += ComPort_PropertyChanged;
            }
            
            //Function to handle the com port property change events.
            static void ComPort_PropertyChanged(ComPort comport, ComPortPropertyEventArgs args)
            {
                if (args.Property == eComPortProperty.CD)
                {
                    CrestronConsole.PrintLine("CEN-IO COM Port {0} CD Changed to {1}", comport.ID, comport.CD);
                }
            }
             
            //Function to register comport.
            public void RegisterCmd(string args)
            {
                _com2.ComPorts[Convert.ToUInt32(args)].Register();
                CrestronConsole.ConsoleCommandResponse("Comport{0} device successfully registered\r\n",Convert.ToUInt32(args));
            }
            </code>
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoCom102.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom102"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom102"/> is on.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoCom2">
            <summary>
            Actual Device class for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom102"/> and <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom202"/>.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoCom2.ComPort1">
            <summary>
            Protocol Support: (RS232)
            Data Bit Support: 8, 7
            Stop Bit Support: 1, 2
            SW HandShaking Support: XONT, (None), XON, XONR
            HW HandShaking Support: (None), CTS, RTS, RTS/CTS
            Baud Rate Support: 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400, 19200, 28800, 38400, 57600, 115200
            Parity Support: O, N, E
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoCom2.ComPort2">
            <summary>
            Protocol Support: (RS232)
            Data Bit Support: 8, 7
            Stop Bit Support: 1, 2
            SW HandShaking Support: XONT, (None), XON, XONR
            HW HandShaking Support: (None), CTS, RTS, RTS/CTS
            Baud Rate Support: 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400, 19200, 28800, 38400, 57600, 115200
            Parity Support: O, N, E
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoCom2.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.Object)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="ipId">IPID of this device</param>
            <param name="owner">Control system this device is attached to.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoCom2.ComPorts">
            <summary>
            Collection of serial COM ports on the device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.GeneralIO.EthernetCenIoCom2.NumberOfComPorts">
            <summary>
            Number of serial COM ports this device supports.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom202">
            <summary>
            Crestron external standalone serial COM card that provides RS-232 control interfaces for video displays, AV components, small applications, and other equipment.
            It includes two separate bidirectional RS-232 ports and communicates with the control system network via WiFi.
            </summary>
            <example>
            Refer the example for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom102"/>
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoCom202.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom202"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoCom202"/> is on.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi204">
            <summary>
            Crestron external standalone Digital inputs card that provides digital input control interfaces for remote devices such as garage door openers, sensors, and motorized screens.
            It includes four digital input ports and communicates with the control system network via WiFi.
            </summary>
            <example>
            Refer the example for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi104"/>.
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoDi204.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi204"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoDi104"/> is on.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr204">
            <summary>
            Crestron external standalone IR Outputs card that provides IR remote control interfaces for video displays, AV components, small applications, and other equipment.
            It includes four discrete IR ports and communicates with the control system network via WiFi.
            </summary>
            <example>
            Refer example for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr104"/>.
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoIr204.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr204"/> object.
            </summary>
            <param name="ipId">IPID of this device</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoIr204"/> is on.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy204">
            <summary>
            Crestron external standalone Relays card that provides low-voltage relay control interfaces for remote devices such as garage door openers, sensors, and motorized screens.
            It includes four isolated relays and communicates with the control system network via WiFi.
            </summary>
            <example>
            Refer example for <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy104"/>
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.GeneralIO.CenIoRy204.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy204"/> object.
            </summary>
            <param name="ipId">IPID of the device.</param>
            <param name="paramControlSystem">The Control System instance this <see cref="T:Crestron.SimplSharpPro.GeneralIO.CenIoRy204"/> is on.</param>
        </member>
    </members>
</doc>
