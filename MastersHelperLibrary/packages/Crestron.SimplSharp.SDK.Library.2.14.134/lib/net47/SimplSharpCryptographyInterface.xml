<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimplSharpCryptographyInterface</name>
    </assembly>
    <members>
        <member name="T:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter">
            <summary>
            Verifies an Crestron.SimplSharp.Cryptography.RSA PKCS #1 version 1.5 signature.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter">
            <summary>
            Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
            <summary>
            When overridden in a derived class, sets the hash algorithm to use for verifying the signature.
            </summary>
            <param name="strName">The name of the hash algorithm to use for verifying the signature.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            When overridden in a derived class, sets the public key to use for verifying the signature.
            </summary>
            <param name="key">
                The instance of an implementation of Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm
                that holds the public key.
            </param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, verifies the signature for the specified data.
            </summary>
            <param name="rgbHash">The data signed with rgbSignature.</param>
            <param name="rgbSignature">The signature to be verified for rgbHash.</param>
            <returns>
                true if rgbSignature matches the signature computed using the specified hash
                algorithm and key on rgbHash; otherwise, false.
            </returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(Crestron.SimplSharp.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Verifies the signature from the specified hash value.
            </summary>
            <param name="hash">The hash algorithm to use to verify the signature.</param>
            <param name="rgbSignature">The signature to be verified.</param>
            <returns>true if the signature is valid for the hash; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter
            class with the specified key.
            </summary>
            <param name="key">The instance of Crestron.SimplSharp.Cryptography.RSA that holds the public key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
            <summary>
            Sets the hash algorithm to use for verifying the signature.
            </summary>
            <param name="strName">The name of the hash algorithm to use for verifying the signature.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the public key to use for verifying the signature.
            </summary>
            <param name="key">The instance of Crestron.SimplSharp.Cryptography.RSA that holds the public key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the Crestron.SimplSharp.Cryptography.RSA PKCS#1 signature for the specified data.
            </summary>
            <param name="rgbHash">The data signed with rgbSignature.</param>
            <param name="rgbSignature">The signature to be verified for rgbHash.</param>
            <returns>
            true if rgbSignature matches the signature computed using the specified hash
            algorithm and key on rgbHash; otherwise, false.
            </returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">The key is null.  -or- The hash algorithm is null.</exception>
            <exception cref="T:System.ArgumentNullException">The rgbHash parameter is null.  -or- The rgbSignature parameter is null.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter">
            <summary>
            Creates the PKCS#1 key exchange data using Crestron.SimplSharp.Cryptography.RSA.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeFormatter">
            <summary>
            Represents the base class from which all asymmetric key exchange formatters derive.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeFormatter.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
            <summary>
                When overridden in a derived class, creates the encrypted key exchange data
                from the specified input data.
            </summary>
            <param name="data">The secret information to be passed in the key exchange.</param>
            <returns>The encrypted key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
            <summary>
                When overridden in a derived class, creates the encrypted key exchange data
                from the specified input data.
            </summary>
            <param name="data">The secret information to be passed in the key exchange.</param>
            <param name="symAlgType">This parameter is not used in the current version.</param>
            <returns>The encrypted key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
             <summary>
                 When overridden in a derived class, sets the public key to use for encrypting
                 the secret information.
             </summary>
             <param name="key">            
                 The instance of the implementation of Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm
                 that holds the public key.
            </param>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
            <summary>
            When overridden in a derived class, gets the parameters for the asymmetric key exchange.
            </summary>
            <returns>A string in XML format containing the parameters of the asymmetric key exchange operation.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter
            class with the specified key.
            </summary>
            <param name="key">
            The instance of the Crestron.SimplSharp.Cryptography.RSA algorithm that holds
            the public key.
            </param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
            <summary>
            Creates the encrypted key exchange data from the specified input data.
            </summary>
            <param name="rgbData">The secret information to be passed in the key exchange.</param>
            <returns>The encrypted key exchange data to be sent to the intended recipient.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">rgbData is too big.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">The key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
            <summary>
            Creates the encrypted key exchange data from the specified input data.
            </summary>
            <param name="rgbData">The secret information to be passed in the key exchange.</param>
            <param name="symAlgType">This parameter is not used in the current version.</param>
            <returns>The encrypted key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the public key to use for encrypting the key exchange data.
            </summary>
            <param name="key">
            The instance of the Crestron.SimplSharp.Cryptography.RSA algorithm that holds
            the public key.
            </param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
            <summary>
            Gets the parameters for the PKCS #1 key exchange.
            </summary>
            <returns>An XML string containing the parameters of the PKCS #1 key exchange operation.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
            <summary>
            Gets or sets the random number generator algorithm to use in the creation
            of the key exchange.
            </summary>
            <returns>The instance of a random number generator algorithm to use.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider">
            <summary>
            Defines a wrapper object to access the cryptographic service provider (CSP)
            implementation of the Crestron.SimplSharp.Cryptography.RC2 algorithm. This class
            cannot be inherited.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RC2">
            <summary>
            Represents the base class from which all implementations of the Crestron.SimplSharp.Cryptography.RC2
            algorithm must derive.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm">
            <summary>
            Represents the abstract base class from which all implementations of symmetric algorithms must inherit.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.BlockSizeValue">
            <summary>
            Represents the block size, in bits, of the cryptographic operation.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.FeedbackSizeValue">
            <summary>
            Represents the feedback size, in bits, of the cryptographic operation.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IVValue">
            <summary>
                Represents the initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV)
                for the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.KeySizeValue">
            <summary>
            Represents the size, in bits, of the secret key used by the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.KeyValue">
            <summary>
            Represents the secret key for the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
            <summary>
            Specifies the block sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
            <summary>
            Specifies the key sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.ModeValue">
            <summary>
            Represents the cipher mode used in the symmetric algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.PaddingValue">
            <summary>
            Represents the padding mode used in the symmetric algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm class.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The implementation of the class derived from the symmetric algorithm is not valid.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Clear">
            <summary>
            Releases all resources used by the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Create">
            <summary>
            Creates a default cryptographic object used to perform the symmetric algorithm.
            </summary>
            <returns>A default cryptographic object used to perform the symmetric algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Create(System.String)">
            <summary>
            Creates the specified cryptographic object used to perform the symmetric algorithm.
            </summary>
            <param name="algName">
                The name of the specific implementation of the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm
                class to use.
                </param>
            <returns>A cryptographic object used to perform the symmetric algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.CreateDecryptor">
            <summary>
                Creates a symmetric decryptor object with the current Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key
                property and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <returns>A symmetric decryptor object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
                When overridden in a derived class, creates a symmetric decryptor object
                with the specified Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key property
                and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric decryptor object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.CreateEncryptor">
            <summary>
                Creates a symmetric encryptor object with the current Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key
                property and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <returns>A symmetric encryptor object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
                When overridden in a derived class, creates a symmetric encryptor object
                with the specified Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key property
                and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric encryptor object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources used by the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm
                and optionally releases the managed resources.
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources; false to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.GenerateIV">
            <summary>
                When overridden in a derived class, generates a random initialization vector
                (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV) to use for the algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.GenerateKey">
            <summary>
                When overridden in a derived class, generates a random key (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key)
                to use for the algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
            <summary>
            Determines whether the specified key size is valid for the current algorithm.
            </summary>
            <param name="bitLength">The length, in bits, to check for a valid key size.</param>
            <returns>true if the specified key size is valid for the current algorithm; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Dispose">
            <summary>
             Dispose
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.BlockSize">
            <summary>
            Gets or sets the block size, in bits, of the cryptographic operation.
            </summary>
            <returns>The block size, in bits.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The block size is invalid.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.FeedbackSize">
            <summary>
            Gets or sets the feedback size, in bits, of the cryptographic operation.
            </summary>
            <returns>The feedback size in bits.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The feedback size is larger than the block size.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV">
            <summary>
                Gets or sets the initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV)
                for the symmetric algorithm.
            </summary>
            <returns>The initialization vector.</returns>
            <exception cref="T:System.ArgumentNullException">An attempt was made to set the initialization vector to null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">An attempt was made to set the initialization vector to an invalid size.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <returns>The secret key to use for the symmetric algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">An attempt was made to set the key to null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The key size is invalid.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.KeySize">
            <summary>
            Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.
            </summary>
            <returns>The size, in bits, of the secret key used by the symmetric algorithm.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The key size is not valid.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
            <summary>
            Gets the block sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
            <returns>An array that contains the block sizes supported by the algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.LegalKeySizes">
            <summary>
            Gets the key sizes, in bits, that are supported by the symmetric algorithm.
            </summary>
            <returns>An array that contains the key sizes supported by the algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <returns>The mode for operation of the symmetric algorithm. The default is Crestron.SimplSharp.Cryptography.CipherMode.CBC.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The cipher mode is not one of the Crestron.SimplSharp.Cryptography.CipherMode values.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <returns>The padding mode used in the symmetric algorithm. The default is Crestron.SimplSharp.Cryptography.PaddingMode.PKCS7.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The padding mode is not one of the Crestron.SimplSharp.Cryptography.PaddingMode values.</exception>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RC2.EffectiveKeySizeValue">
            <summary>
                Represents the effective size of the secret key used by the Crestron.SimplSharp.Cryptography.RC2
                algorithm in bits.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.RC2.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2.Create">
            <summary>
            Creates an instance of a cryptographic object to perform the Crestron.SimplSharp.Cryptography.RC2 algorithm.
            </summary>
            <returns>An instance of a cryptographic object.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm was used with Federal Information Processing Standards (FIPS)
            mode enabled, but is not FIPS compatible.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2.Create(System.String)">
            <summary>
            Creates an instance of a cryptographic object to perform the specified implementation
            of the Crestron.SimplSharp.Cryptography.RC2 algorithm.
            </summary>
            <param name="AlgName">The name of the specific implementation of Crestron.SimplSharp.Cryptography.RC2 to use.</param>
            <returns>An instance of a cryptographic object.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm described by the algName parameter was used with Federal Information
            Processing Standards (FIPS) mode enabled, but is not FIPS compatible.
            </exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RC2.EffectiveKeySize">
            <summary>
            Gets or sets the effective size of the secret key used by the Crestron.SimplSharp.Cryptography.RC2
            algorithm in bits.
            </summary>
            <returns>The effective key size used by the Crestron.SimplSharp.Cryptography.RC2 algorithm.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The effective key size is invalid.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RC2.KeySize">
            <summary>
            Gets or sets the size of the secret key used by the Crestron.SimplSharp.Cryptography.RC2
            algorithm in bits.
            </summary>
            <returns>The size of the secret key used by the Crestron.SimplSharp.Cryptography.RC2 algorithm.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The value for the RC2 key size is less than the effective key size value.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider class.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <exception cref="T:System.InvalidOperationException">A non-compliant FIPS algorithm was found.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Crestron.SimplSharp.Cryptography.RC2 decryptor object with
            the specified key (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key)and
            initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.RC2 decryptor object.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            An Crestron.SimplSharp.Cryptography.CipherMode.OFB cipher mode was used.  -or-
            A Crestron.SimplSharp.Cryptography.CipherMode.CFB cipher mode with a feedback
            size other than 8 bits was used.  -or- An invalid key size was used.  -or-
            The algorithm key size was not available.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Crestron.SimplSharp.Cryptography.RC2 encryptor object with
            the specified key (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key) and
            initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.RC2 encryptor object.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            An Crestron.SimplSharp.Cryptography.CipherMode.OFB cipher mode was used.  -or-
            A Crestron.SimplSharp.Cryptography.CipherMode.CFB cipher mode with a feedback
            size other than 8 bits was used.  -or- An invalid key size was used.  -or-
            The algorithm key size was not available.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.GenerateIV">
            <summary>
            Generates a random initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV)
            to use for the algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random key (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key)
            to be used for the algorithm.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize">
            <summary>
            Gets or sets the effective size, in bits, of the secret key used by the Crestron.SimplSharp.Cryptography.RC2 algorithm.
            </summary>
            <returns>The effective key size, in bits, used by the Crestron.SimplSharp.Cryptography.RC2 algorithm.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">
            The Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize
            property was set to a value other than the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.KeySizeValue
            property.
            </exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RC2CryptoServiceProvider.UseSalt">
            <summary>
            Gets or sets a value that determines whether to create a key with an 11-byte-long,
            zero-value salt.
            </summary>
            <returns>
            true if the key should be created with an 11-byte-long, zero-value salt;
            otherwise, false. The default is false.
            </returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.HashAlgorithm">
            <summary>
                Represents the base class from which all implementations of cryptographic
                hash algorithms must derive.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.ICryptoTransform">
            <summary>
            Defines the basic operations of cryptographic transformations.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Transforms the specified region of the input byte array and copies the resulting
                transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.ICryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <returns>true if the current transform can be reused; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <returns>true if multiple blocks can be transformed; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.ICryptoTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <returns>The size of the input data blocks in bytes.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.ICryptoTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <returns>The size of the output data blocks in bytes.</returns>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.HashAlgorithm.HashSizeValue">
            <summary>
            Represents the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.HashAlgorithm.HashValue">
            <summary>
            Represents the value of the computed hash code.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.HashAlgorithm.State">
            <summary>
            Represents the state of the hash computation.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.HashAlgorithm class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.Clear">
            <summary>
            Releases all resources used by the Crestron.SimplSharp.Cryptography.HashAlgorithm class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.ComputeHash(Crestron.SimplSharp.CrestronIO.Stream)">
            <summary>
            Computes the hash value for the specified Crestron.SimplSharp.CrestronIO.Stream object.
            </summary>
            <param name="inputStream">The input to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ArgumentException">count is an invalid value.  -or- buffer length is invalid.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset is out of range. This parameter requires a non-negative number.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.Create">
            <summary>
            Creates an instance of the default implementation of the Crestron.SimplSharp.Cryptography.HashAlgorithm class.
            </summary>
            <returns>A cryptographic object to perform the hash algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the Crestron.SimplSharp.Cryptography.HashAlgorithm class.
            </summary>
            <param name="hashName">The implementation of Crestron.SimplSharp.Cryptography.HashAlgorithm to create.</param>
            <returns>A cryptographic object to perform the hash algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Crestron.SimplSharp.Cryptography.HashAlgorithm
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, routes data written to the object into
            the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.HashFinal">
            <summary>
            When overridden in a derived class, finalizes the hash computation after
            the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.Initialize">
            <summary>
            Initializes an implementation of the Crestron.SimplSharp.Cryptography.HashAlgorithm class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Computes the hash value for the specified region of the input byte array
            and copies the resulting hash value to the specified region of the output
            byte array.
            </summary>
            <param name="inputBuffer">The input to compute the hash code for.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">A copy of the part of the input array used to compute the hash code.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentException">inputCount uses an invalid value.  -or- inputBuffer has an invalid length.</exception>
            <exception cref="T:System.ArgumentNullException">inputBuffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">inputOffset is out of range. This parameter requires a non-negative number.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the hash value for the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input to compute the hash code for.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>An array that is a copy of the part of the input that is hashed.</returns>
            <exception cref="T:System.ArgumentException">inputCount uses an invalid value.  -or- inputBuffer has an invalid offset length.</exception>
            <exception cref="T:System.ArgumentNullException">inputBuffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">inputOffset is out of range. This parameter cannot be a non-negative number.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HashAlgorithm.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.HashAlgorithm.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <returns>Always true.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
            <summary>
                When overridden in a derived class, gets a value indicating whether multiple
                blocks can be transformed.
            </summary>
            <returns>true if multiple blocks can be transformed; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.HashAlgorithm.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
            <returns>The current value of the computed hash code.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">Crestron.SimplSharp.Cryptography.HashAlgorithm.HashValue is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.HashAlgorithm.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.HashAlgorithm.InputBlockSize">
            <summary>
            When overridden in a derived class, gets the input block size.
            </summary>
            <returns>The input block size.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.HashAlgorithm.OutputBlockSize">
            <summary>
            When overridden in a derived class, gets the output block size.
            </summary>
            <returns>The output block size.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider">
            <summary>
            Computes the Crestron.SimplSharp.Cryptography.SHA1 hash value for the input data
            using the implementation provided by the cryptographic service provider (CSP).
            This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.SHA1">
            <summary>
            Computes the Crestron.SimplSharp.Cryptography.SHA1 hash for the input data.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.SHA1.
            </summary>
            <exception cref="T:System.InvalidOperationException">The policy on this object is not compliant with the FIPS algorithm.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1.Create">
            <summary>
            Creates an instance of the default implementation of Crestron.SimplSharp.Cryptography.SHA1.
            </summary>
            <returns>A new instance of Crestron.SimplSharp.Cryptography.SHA1.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of Crestron.SimplSharp.Cryptography.SHA1.
            </summary>
            <param name="hashName">
            The name of the specific implementation of Crestron.SimplSharp.Cryptography.SHA1
            to be used.
            </param>
            <returns>A new instance of Crestron.SimplSharp.Cryptography.SHA1 using the specified implementation.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources used by the Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider
                and optionally releases the managed resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="rgb">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data. </param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider.HashFinal">
            <summary>
            When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of Crestron.SimplSharp.Cryptography.SHA1CryptoServiceProvider.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.KeySizes">
            <summary>
            Determines the set of valid key sizes for the symmetric cryptographic algorithms.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Cryptography.KeySizes class
                with the specified key values.
            </summary>
            <param name="minSize">The minimum valid key size.</param>
            <param name="maxSize">The maximum valid key size.</param>
            <param name="skipSize">The interval between valid key sizes.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.KeySizes.MaxSize">
            <summary>
            Specifies the maximum key size in bits.
            </summary>
            <returns>The maximum key size in bits.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.KeySizes.MinSize">
            <summary>
            Specifies the minimum key size in bits.
            </summary>
            <returns>The minimum key size in bits.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.KeySizes.SkipSize">
            <summary>
            Specifies the interval between valid key sizes in bits.
            </summary>
            <returns>The interval between valid key sizes in bits.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.HMACSHA384">
            <summary>
            Computes the keyed hash for HMAC-SHA384
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA384.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of HMACSHA384 with the passed in key
            </summary>
            <param name="sessionKey">Session Key used for signing</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sessionKey"/> is a null reference.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA384.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash on the inputted buffer
            </summary>
            <param name="buffer">Buffer to be hashed</param>
            <returns>Returns the computed hash.</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.TripleDES">
            <summary>
            Represents the base class for Triple Data Encryption Standard algorithms
            from which all Crestron.SimplSharp.Cryptography.TripleDES implementations must
            derive.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDES.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.TripleDES class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDES.Create">
            <summary>
            Creates an instance of a cryptographic object to perform the Crestron.SimplSharp.Cryptography.TripleDES algorithm.
            </summary>
            <returns>An instance of a cryptographic object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDES.Create(System.String)">
            <summary>
            Creates an instance of a cryptographic object to perform the specified implementation
            of the Crestron.SimplSharp.Cryptography.TripleDES algorithm.
            </summary>
            <param name="str">The name of the specific implementation of Crestron.SimplSharp.Cryptography.TripleDES to use.</param>
            <returns>An instance of a cryptographic object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
            <summary>
            Determines whether the specified key is weak.
            </summary>
            <param name="rgbKey">The secret key to test for weakness.</param>
            <returns>true if the key is weak; otherwise, false.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The size of the rgbKey parameter is not valid.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.TripleDES.Key">
            <summary>
            Gets or sets the secret key for the Crestron.SimplSharp.Cryptography.TripleDES algorithm.
            </summary>
            <returns>The secret key for the Crestron.SimplSharp.Cryptography.TripleDES algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">An attempt was made to set the key to null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            An attempt was made to set a key whose length is invalid.  -or- An attempt
            was made to set a weak key (see Crestron.SimplSharp.Cryptography.TripleDES.IsWeakKey(System.Byte[])).
            </exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.SHA1Managed">
            <summary>
            Computes the Crestron.SimplSharp.Cryptography.SHA1 hash for the input data using
            the managed library.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1Managed.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.SHA1Managed class.
            </summary>
            <exception cref="T:System.InvalidOperationException">This class is not compliant with the FIPS algorithm.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the Crestron.SimplSharp.Cryptography.SHA1Managed
            hash algorithm for computing the hash.
            </summary>
            <param name="rgb">The input data.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1Managed.HashFinal">
            <summary>
            Returns the computed Crestron.SimplSharp.Cryptography.SHA1 hash value after all
            data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SHA1Managed.Initialize">
            <summary>
            Initializes an instance of Crestron.SimplSharp.Cryptography.SHA1Managed.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider">
            <summary>
            Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the 
            Crestron.Simple.Cryptography.DSA algorithm. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.DSA">
            <summary>
            Represents the abstract base class from which all implementations of the Digital Signature Algorithm 
            (Crestron.SimplSharp.Cryptography.DSA) must inherit.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm">
            <summary>
            Represents the base class from which all asymmetric key exchange formatters derive.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.KeySizeValue">
            <summary>
            Represents the size, in bits, of the key modulus used by the asymmetric algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue">
            <summary>
            Specifies the key sizes that are supported by the asymmetric algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.#ctor">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm
                class.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The implementation of the derived class is not valid.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.Clear">
            <summary>
            Releases all resources used by the Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.Create">
            <summary>
            Creates a default cryptographic object used to perform the asymmetric algorithm.
            </summary>
            <returns>The cryptographic object used to perform the asymmetric algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.Create(System.String)">
            <summary>
            Creates the specified cryptographic object used to perform the asymmetric algorithm.
            </summary>
            <param name="algName">The name of the specific implementation of Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm to use.</param>
            <returns>A cryptographic object used to perform the asymmetric algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)">
            <summary>
                When overridden in a derived class, releases the unmanaged resources used
                by the Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm and optionally releases
                the managed resources.
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources; false to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm">
            <summary>
            When overridden in a derived class, gets the name of the key exchange algorithm.
            </summary>
            <returns>The name of the key exchange algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.KeySize">
            <summary>
                Gets or sets the size, in bits, of the key modulus used by the asymmetric
                algorithm.
            </summary>
            <returns>The size, in bits, of the key modulus used by the asymmetric algorithm.</returns>
            <exceptions>
              Crestron.SimplSharp.Cryptography.CryptographicException:
                The key modulus size is invalid.
            </exceptions>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the asymmetric algorithm.
            </summary>
            <returns>An array that contains the key sizes supported by the asymmetric algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
            <returns>The name of the signature algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSA class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.Create">
            <summary>
            Creates the default cryptographic object used to perform the asymmetric algorithm.
            </summary>
            <returns>A cryptographic object used to perform the asymmetric algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.Create(System.String)">
            <summary>
            Creates the specified cryptographic object used to perform the asymmetric algorithm.
            </summary>
            <param name="algName">The name of the specific implementation of Crestron.SimplSharp.Cryptography.DSA to use.</param>
            <returns>A cryptographic object used to perform the asymmetric algorithm.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.CreateSignature(System.Byte[])">
            <summary>
                When overridden in a derived class, creates the Crestron.SimplSharp.Cryptography.DSA
                signature for the specified data.
            </summary>
            <param name="rgbHash">The data to be signed.</param>
            <returns>The digital signature for the specified data.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.ExportParameters(System.Boolean)">
            <summary>
            When overridden in a derived class, exports the Crestron.SimplSharp.Cryptography.DSAParameters.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The parameters for Crestron.SimplSharp.Cryptography.DSA.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.ImportParameters(Crestron.SimplSharp.Cryptography.DSAParameters)">
            <summary>
            When overridden in a derived class, imports the specified Crestron.SimplSharp.Cryptography.DSAParameters.
            </summary>
            <param name="parameters">The parameters for Crestron.SimplSharp.Cryptography.DSA.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            When overridden in a derived class, verifies the Crestron.SimplSharp.Cryptography.DSA
            signature for the specified data.
            </summary>
            <param name="rgbHash">The hash of the data signed with rgbSignature.</param>
            <param name="rgbSignature">The signature to be verified for rgbData.</param>
            <returns>
            true if rgbSignature matches the signature computed using the specified hash
            algorithm and key on rgbHash; otherwise, false.
            </returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSA.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSA.KeyExchangeAlgorithm">
            <summary>
            KeyExchangeAlgorithm
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSA.SignatureAlgorithm">
            <summary>
            SignatureAlgorithm
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.ICspAsymmetricAlgorithm">
            <summary>
            Defines methods that allow an Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm class to enumerate key container information, 
            and import and export Microsoft Cryptographic API (CAPI)–compatible key blobs.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)">
            <summary>
            Exports a blob that contains the key information associated with an Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm object.
            </summary>
            <param name="includePrivateParameters">true to include the private key; otherwise, false.</param>
            <returns>A byte array that contains the key information associated with an Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])">
            <summary>
            Imports a blob that represents asymmetric key information.
            </summary>
            <param name="rawData">A byte array that represents an asymmetric key blob.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo">
            <summary>
            Gets a Crestron.SimplSharp.Cryptography.CspKeyContainerInfo object that describes
            additional information about a cryptographic key pair.
            </summary>
            <returns>
            A Crestron.SimplSharp.Cryptography.CspKeyContainerInfo object that describes
            additional information about a cryptographic key pair.
            </returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.#ctor(Crestron.SimplSharp.Cryptography.CspParameters)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider
            class with the specified parameters for the cryptographic service provider (CSP).
            </summary>
            <param name="parameters">The parameters for the CSP.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider
            class with the specified key size.
            </summary>
            <param name="keySize">The size of the key for the asymmetric algorithm in bits.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,Crestron.SimplSharp.Cryptography.CspParameters)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider
            class with the specified key size and parameters for the cryptographic service
            provider (CSP).
            </summary>
            <param name="keySize">The size of the key for the cryptographic algorithm in bits.</param>
            <param name="parameters">The parameters for the CSP.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The CSP cannot be acquired.  -or- The key cannot be created.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dwKeySize is out of range.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])">
            <summary>
            Creates the Crestron.SimplSharp.Cryptography.DSA signature for the specified data.
            </summary>
            <param name="rgbHash">The data to be signed.</param>
            <returns>The digital signature for the specified data.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)">
            <summary>
            Exports a blob containing the key information associated with a Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider object.
            </summary>
            <param name="includePrivateParameters">true to include the private key; otherwise, false.</param>
            <returns>A byte array containing the key information associated with a Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)">
            <summary>
            Exports the Crestron.SimplSharp.Cryptography.DSAParameters.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The parameters for Crestron.SimplSharp.Cryptography.DSA.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The key cannot be exported.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])">
            <summary>
            Imports a blob that represents DSA key information.
            </summary>
            <param name="keyBlob">A byte array that represents a DSA key blob.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.ImportParameters(Crestron.SimplSharp.Cryptography.DSAParameters)">
            <summary>
            Imports the specified Crestron.SimplSharp.Cryptography.DSAParameters.
            </summary>
            <param name="parameters">The parameters for Crestron.SimplSharp.Cryptography.DSA.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The parameters
            parameter has missing fields.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])">
            <summary>
            Computes the hash value of the specified byte array and signs the resulting hash value.
            </summary>
            <param name="buffer">The input data for which to compute the hash.</param>
            <returns>The Crestron.SimplSharp.Cryptography.DSA signature for the specified data.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.SignData(Crestron.SimplSharp.CrestronIO.Stream)">
            <summary>
            Computes the hash value of the specified input stream and signs the resulting hash value.
            </summary>
            <param name="inputStream">The input data for which to compute the hash.</param>
            <returns>The Crestron.SimplSharp.Cryptography.DSA signature for the specified data.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Signs a byte array from the specified start point to the specified end point.
            </summary>
            <param name="buffer">The input data to sign.</param>
            <param name="offset">The offset into the array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The Crestron.SimplSharp.Cryptography.DSA signature for the specified data.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with
            the private key.
            </summary>
            <param name="rgbHash">The hash value of the data to be signed.</param>
            <param name="str">The name of the hash algorithm used to create the hash value of the data.</param>
            <returns>Crestron.SimplSharp.Cryptography.DSA signature for the specified hash value.</returns>
            <exception cref="T:System.ArgumentNullException">The rgbHash parameter is null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- There
            is no private key.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed
            for the specified data.
            </summary>
            <param name="rgbData">The data that was signed.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed
            for the specified hash value.
            </summary>
            <param name="rgbHash">The hash value of the data to be signed.</param>
            <param name="str">The name of the hash algorithm used to create the hash value of the data.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the Crestron.SimplSharp.Cryptography.DSA signature for the specified data.
            </summary>
            <param name="rgbHash">The data signed with rgbSignature.</param>
            <param name="rgbSignature">The signature to be verified for rgbData.</param>
            <returns>
            true if rgbSignature matches the signature computed using the specified hash
            algorithm and key on rgbHash; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">The rgbHash parameter is null.  -or- The rgbSignature parameter is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The signature
            cannot be verified.
            </exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo">
            <summary>
            Gets a Crestron.SimplSharp.Cryptography.CspKeyContainerInfo object that describes
            additional information about a cryptographic key pair.
            </summary>
            <returns>
                A Crestron.SimplSharp.Cryptography.CspKeyContainerInfo object that describes
                additional information about a cryptographic key pair.
            </returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm.
            </summary>
            <returns>The name of the key exchange algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.KeySize">
            <summary>
            Gets the size of the key used by the asymmetric algorithm in bits.
            </summary>
            <returns>The size of the key used by the asymmetric algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp">
            <summary>
            Gets or sets a value indicating whether the key should be persisted in the
            cryptographic service provider (CSP).
            </summary>
            <returns>true if the key should be persisted in the CSP; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.PublicOnly">
            <summary>
            Gets a value that indicates whether the Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider
            object contains only a public key.
            </summary>
            <returns>
            Gets a value that indicates whether the Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider
            object contains only a public key.
            </returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
            <returns>The name of the signature algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore">
            <summary>
            Gets or sets a value indicating whether the key should be persisted in the
            computer's key store instead of the user profile store.
            </summary>
            <returns>true if the key should be persisted in the computer key store; otherwise, false.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.PBKDF2SHA512">
            <summary>
            Implements password-based key derivation functionality, PBKDF2, by using HMAC-SHA512.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA512.#ctor(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PBKDF2SHA512 class using a password, a salt, and number of iterations to derive the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The password or the salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
            <param name="password">Byte array representing the password (most likely ASCII-encoded)</param>
            <param name="salt">The salt used in the derivation</param>
            <param name="iterations">The iteration count and its value should be greater than or equal to 1</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA512.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the PBKDF2SHA512 class using a password and a salt to derive the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The password or the salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
            <param name="password">Byte array representing the password (most likely ASCII-encoded)</param>
            <param name="salt">The salt used in the derivation</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA512.GetBytes(System.Int32)">
            <summary>
            Returns the pseudo-random key for this object.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">cb is out of range. This parameter requires a non-negative number.</exception>
            <param name="cb">The number of pseudo-random key bytes to generate.</param>
            <returns>Returns the pseudo-random key.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2SHA512.IterationCount">
            <summary>
            Gets or sets the number of iterations for the operation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2SHA512.Salt">
            <summary>
            Gets or sets the key salt value for the operation.
            </summary>
            <exception cref="T:System.ArgumentNullException">The salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter">
            <summary>
            Decrypts the PKCS #1 key exchange data.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeDeformatter">
            <summary>
            Represents the base class from which all asymmetric key exchange deformatters derive.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeDeformatter.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
            <summary>
                When overridden in a derived class, extracts secret information from the
                encrypted key exchange data.
            </summary>
            <param name="rgb">The key exchange data within which the secret information is hidden.</param>
            <returns>The secret information derived from the key exchange data.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
                When overridden in a derived class, sets the private key to use for decrypting
                the secret information.
            </summary>
            <param name="key">
                The instance of the implementation of Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm
                that holds the private key.
            </param>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
            <summary>
            When overridden in a derived class, gets or sets the parameters for the asymmetric key exchange.
            </summary>
            <returns>A string in XML format containing the parameters of the asymmetric key exchange operation.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter
            class with the specified key.
            </summary>
            <param name="key">
            The instance of the Crestron.SimplSharp.Cryptography.RSA algorithm that holds
            the private key.
            </param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
            <summary>
            Extracts secret information from the encrypted key exchange data.
            </summary>
            <param name="rgbIn">The key exchange data within which the secret information is hidden.</param>
            <returns>The secret information derived from the key exchange data.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">The key is missing.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the private key to use for decrypting the secret information.
            </summary>
            <param name="key">
            The instance of the Crestron.SimplSharp.Cryptography.RSA algorithm that holds
            the private key.
            </param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
            <summary>
            Gets the parameters for the PKCS #1 key exchange.
            </summary>
            <returns>An XML string containing the parameters of the PKCS #1 key exchange operation.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
            <summary>
            Gets or sets the random number generator algorithm to use in the creation
            of the key exchange.
            </summary>
            <returns>The instance of a random number generator algorithm to use.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter">
            <summary>
            Represents the base class from which all implementations of asymmetric signature formatters derive.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
            <summary>
            When overridden in a derived class, creates the signature for the specified data.
            </summary>
            <param name="rgbHash">The data to be signed.</param>
            <returns>The digital signature for the rgbHash parameter.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter.CreateSignature(Crestron.SimplSharp.Cryptography.HashAlgorithm)">
            <summary>
            Creates the signature from the specified hash value.
            </summary>
            <param name="hash">The hash algorithm to use to create the signature.</param>
            <returns>The signature for the specified hash value.</returns>
            <exception cref="T:System.ArgumentNullException">The hash parameter is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
            <summary>
            When overridden in a derived class, sets the hash algorithm to use for creating the signature.
            </summary>
            <param name="strName">The name of the hash algorithm to use for creating the signature.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            When overridden in a derived class, sets the asymmetric algorithm to use
            to create the signature.
            </summary>
            <param name="key">
            The instance of the implementation of Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm
            to use to create the signature.
            </param>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider">
            <summary>
            Implements a cryptographic Random Number Generator (RNG) using the implementation
            provided by the cryptographic service provider (CSP). This class cannot be
            inherited.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RandomNumberGenerator">
            <summary>
            Represents the abstract class from which all implementations of cryptographic
            random number generators derive.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RandomNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.RandomNumberGenerator.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RandomNumberGenerator.Create">
            <summary>
            Creates an instance of the default implementation of a cryptographic random
            number generator that can be used to generate random data.
            </summary>
            <returns>A new instance of a cryptographic random number generator.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RandomNumberGenerator.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of a cryptographic random
            number generator.
            </summary>
            <param name="rngName">The name of the random number generator implementation to use.</param>
            <returns>A new instance of a cryptographic random number generator.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
            <summary>
            When overridden in a derived class, fills an array of bytes with a cryptographically
            strong random sequence of values.
            </summary>
            <param name="data">The array to fill with cryptographically strong random bytes.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
            <summary>
            When overridden in a derived class, fills an array of bytes with a cryptographically
            strong random sequence of nonzero values.
            </summary>
            <param name="data">The array to fill with cryptographically strong random nonzero bytes.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider class.
            </summary>
            <param name="rgb">A byte array. This value is ignored.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider.#ctor(Crestron.SimplSharp.Cryptography.CspParameters)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider
            class with the specified parameters.
            </summary>
            <param name="cspParams">The parameters to pass to the cryptographic service provider (CSP).</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider class.
            </summary>
            <param name="str">The string input. This parameter is ignored.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
            <summary>
            Fills an array of bytes with a cryptographically strong sequence of random values.
            </summary>
            <param name="data">The array to fill with a cryptographically strong sequence of random values.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])">
            <summary>
            Fills an array of bytes with a cryptographically strong sequence of random
            nonzero values.
            </summary>
            <param name="data">The array to fill with a cryptographically strong sequence of random nonzero values.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.DSASignatureDeformatter">
            <summary>
                Verifies a Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
                PKCS#1 v1.5 signature.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureDeformatter.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSASignatureDeformatter class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureDeformatter.#ctor(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSASignatureDeformatter
            class with the specified key.
            </summary>
            <param name="key">
            The instance of Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
            that holds the key.
            </param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
            <summary>
                Specifies the hash algorithm for the Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
                signature deformatter.
            </summary>
            <param name="strName">The name of the hash algorithm to use for the signature deformatter.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">
            The strName parameter does not map to the Crestron.SimplSharp.Cryptography.SHA1
            hash algorithm.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureDeformatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
                Specifies the key to be used for the Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
                signature deformatter.
            </summary>
            <param name="key">The instance of Crestron.SimplSharp.Cryptography.DSA that holds the key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
                Verifies the Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
                signature on the data.
            </summary>
            <param name="rgbHash">The data signed with rgbSignature.</param>
            <param name="rgbSignature">The signature to be verified for rgbHash.</param>
            <returns>true if the signature is valid for the data; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">rgbHash is null.  -or- rgbSignature is null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">The DSA key is missing.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RijndaelManaged">
            <summary>
            Accesses the managed version of the Crestron.SimplSharp.Cryptography.Rijndael
            algorithm. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.Rijndael">
            <summary>
            Represents the base class from which all implementations of the Crestron.SimplSharp.Cryptography.Rijndael
            symmetric encryption algorithm must inherit.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.Rijndael.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.Rijndael.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.Rijndael.Create">
            <summary>
            Creates a cryptographic object to perform the Crestron.SimplSharp.Cryptography.Rijndael algorithm.
            </summary>
            <returns>A cryptographic object.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm was used with Federal Information Processing Standards (FIPS)
            mode enabled, but is not FIPS compatible.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.Rijndael.Create(System.String)">
            <summary>
            Creates a cryptographic object to perform the specified implementation of
            the Crestron.SimplSharp.Cryptography.Rijndael algorithm.
            </summary>
            <param name="algName">The name of the specific implementation of Crestron.SimplSharp.Cryptography.Rijndael to create.</param>
            <returns>A cryptographic object.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm described by the algName parameter was used with Federal Information
            Processing Standards (FIPS) mode enabled, but is not FIPS compatible.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManaged.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RijndaelManaged class.
            </summary>
            <exception cref="T:System.InvalidOperationException">This class is not compliant with the FIPS algorithm.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Crestron.SimplSharp.Cryptography.Rijndael decryptor object
            with the specified Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key and
            initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">
            The secret key to be used for the symmetric algorithm. The key size must
            be 126, 128, or 256 bits.
            </param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.Rijndael decryptor object.</returns>
            <exception cref="T:System.ArgumentNullException">The rgbKey parameter is null.  -or- The rgbIV parameter is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            The value of the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Mode parameter
            is not Crestron.SimplSharp.Cryptography.CipherMode.ECB, Crestron.SimplSharp.Cryptography.CipherMode.CBC,
            or Crestron.SimplSharp.Cryptography.CipherMode.CFB.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Crestron.SimplSharp.Cryptography.Rijndael encryptor object
            with the specified Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key and
            initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">
            The secret key to be used for the symmetric algorithm. The key size must
            be 126, 128, or 256 bits.
            </param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.Rijndael encryptor object.</returns>
            <exception cref="T:System.ArgumentNullException">The rgbKey parameter is null.  -or- The rgbIV parameter is null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The value of the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Mode parameter
            is not Crestron.SimplSharp.Cryptography.CipherMode.ECB, Crestron.SimplSharp.Cryptography.CipherMode.CBC,
            or Crestron.SimplSharp.Cryptography.CipherMode.CFB.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManaged.GenerateIV">
            <summary>
            Generates a random initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV)
            to be used for the algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManaged.GenerateKey">
            <summary>
            Generates a random Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key to
            be used for the algorithm.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform">
            <summary>
            Performs a cryptographic transformation of data using the Rijndael algorithm.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.Clear">
            <summary>
            Releases all resources used by the Crestron.SimplSharp.Cryptography.RijndaelManagedTransform class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.Reset">
            <summary>
            Resets the internal state of Crestron.SimplSharp.Cryptography.RijndaelManagedTransform
            so it can be used again to do a different encryption or decryption.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Computes the transformation for the specified region of the input byte array
            and copies the resulting transformation to the specified region of the output
            byte array.
            </summary>
            <param name="inputBuffer">The input to perform the operation on.</param>
            <param name="inputOffset">The offset into the input byte array to begin using data from.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to write the data to.</param>
            <param name="outputOffset">The offset into the output byte array to begin writing data from.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">The inputBuffer parameter is null.  -or- The outputBuffer parameter is null.</exception>
            <exception cref="T:System.ArgumentException">
            The length of the input buffer is less than the sum of the input offset and
            the input count. -or- The value of the inputCount parameter is less than
            or equal to 0.  -or- The value of the inputCount parameter is greater than
            the length of the inputBuffer parameter.  -or- The length of the inputCount
            parameter is not evenly divisible by input block size.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the inputOffset parameter is negative.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the transformation for the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input to perform the operation on.</param>
            <param name="inputOffset">The offset into the byte array to begin using data from.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transformation.</returns>
            <exception cref="T:System.ArgumentNullException">The inputBuffer parameter is null.</exception>
            <exception cref="T:System.ArgumentException">
            The value of the inputCount parameter is less than 0.  -or- The value of
            the inputCount parameter is greater than the length of inputBuffer parameter.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value of the inputOffset parameter is negative.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The length of the inputCount parameter is not evenly divisible by input block size.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.BlockSizeValue">
            <summary>
            Gets the block size.
            </summary>
            <returns>The size of the data blocks in bytes.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <returns>Always true.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <returns>true if multiple blocks can be transformed; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <returns>The size of the input data blocks in bytes.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RijndaelManagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <returns>The size of the output data blocks in bytes.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.PBKDF2SHA256">
            <summary>
            Implements password-based key derivation functionality, PBKDF2, by using HMAC-SHA256.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA256.#ctor(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PBKDF2SHA256 class using a password, a salt, and number of iterations to derive the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The password or the salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
            <param name="password">Byte array representing the password (most likely ASCII-encoded)</param>
            <param name="salt">The salt used in the derivation</param>
            <param name="iterations">The iteration count and its value should be greater than or equal to 1</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA256.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the PBKDF2SHA256 class using a password and a salt to derive the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The password or the salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
            <param name="password">Byte array representing the password (most likely ASCII-encoded)</param>
            <param name="salt">The salt used in the derivation</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA256.GetBytes(System.Int32)">
            <summary>
            Returns the pseudo-random key for this object.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">cb is out of range. This parameter requires a non-negative number.</exception>
            <param name="cb">The number of pseudo-random key bytes to generate.</param>
            <returns>Returns the pseudo-random key.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2SHA256.IterationCount">
            <summary>
            Gets or sets the number of iterations for the operation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2SHA256.Salt">
            <summary>
            Gets or sets the key salt value for the operation.
            </summary>
            <exception cref="T:System.ArgumentNullException">The salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.DSAParameters">
            <summary>
            Contains the typical parameters for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.Counter">
            <summary>
            Specifies the counter for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.G">
            <summary>
            Specifies the G parameter for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.J">
            <summary>
            Specifies the J parameter for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.P">
            <summary>
            Specifies the P parameter for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.Q">
            <summary>
            Specifies the Q parameter for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.Seed">
            <summary>
            Specifies the seed for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.X">
            <summary>
            Specifies the X parameter for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.DSAParameters.Y">
            <summary>
            Specifies the Y parameter for the Crestron.SimplSharp.Cryptography.DSA algorithm.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.DSASignatureFormatter">
            <summary>
            Creates a Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA) signature.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureFormatter.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSASignatureFormatter class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureFormatter.#ctor(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Cryptography.DSASignatureFormatter
                class with the specified key.
            </summary>
            <param name="key">
                The instance of the Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
                that holds the key.
            </param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
            <summary>
            Creates the Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
            PKCS #1 signature for the specified data.
            </summary>
            <param name="rgbHash">The data to be signed.</param>
            <returns>The digital signature for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">rgbHash is null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">The OID is null.  -or- The DSA key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
            <summary>
            Specifies the hash algorithm for the Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
            signature formatter.
            </summary>
            <param name="strName">The name of the hash algorithm to use for the signature formatter.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">
            The strName parameter does not map to the Crestron.SimplSharp.Cryptography.SHA1
            hash algorithm.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DSASignatureFormatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Specifies the key to be used for the Digital Signature Algorithm (Crestron.SimplSharp.Cryptography.DSA)
            signature formatter.
            </summary>
            <param name="key">The instance of Crestron.SimplSharp.Cryptography.DSA that holds the key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.DES">
            <summary>
            Represents the base class for the Data Encryption Standard (DES) algorithm from which all 
            Crestron.SimplSharp.Cryptography.DES implementations must derive.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DES.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DES class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DES.Create">
            <summary>
                Creates an instance of a cryptographic object to perform the Data Encryption
                Standard (Crestron.SimplSharp.Cryptography.DES) algorithm.
            </summary>
            <returns>A cryptographic object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DES.Create(System.String)">
            <summary>
            Creates an instance of a cryptographic object to perform the specified implementation
            of the Data Encryption Standard (Crestron.SimplSharp.Cryptography.DES) algorithm.
            </summary>
            <param name="algName">The name of the specific implementation of Crestron.SimplSharp.Cryptography.DES to use.</param>
            <returns>A cryptographic object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
            <summary>
            Determines whether the specified key is semi-weak.
            </summary>
            <param name="rgbKey">The secret key to test for semi-weakness.</param>
            <returns>true if the key is semi-weak; otherwise, false.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The size of the rgbKey parameter is not valid.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DES.IsWeakKey(System.Byte[])">
            <summary>
            Determines whether the specified key is weak.
            </summary>
            <param name="rgbKey">The secret key to test for weakness.</param>
            <returns>true if the key is weak; otherwise, false.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The size of the rgbKey parameter is not valid.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.DES.Key">
            <summary>
            Gets or sets the secret key for the Data Encryption Standard (Crestron.SimplSharp.Cryptography.DES) algorithm.
            </summary>
            <returns>The secret key for the Crestron.SimplSharp.Cryptography.DES algorithm.</returns>
            <exception cref="T:System.ArgumentNullException">An attempt was made to set the key to null.</exception>
            <exception cref="T:System.ArgumentException">An attempt was made to set a key whose length is not equal to Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.BlockSizeValue.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            An attempt was made to set a weak key (see Crestron.SimplSharp.Cryptography.DES.IsWeakKey(System.Byte[]))
            or a semi-weak key (see Crestron.SimplSharp.Cryptography.DES.IsSemiWeakKey(System.Byte[])).
            </exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CryptoStreamMode">
            <summary>
            Specifies the mode of a cryptographic stream.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CryptoStreamMode.Read">
            <summary>
            Read access to a cryptographic stream.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CryptoStreamMode.Write">
            <summary>
            Write access to a cryptographic stream.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CryptoStream">
            <summary>
            Defines a CrestronStream that links data streams to cryptographic transformations.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current Crestron.SimplSharp.Cryptography.CryptoStream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. A maximum of count bytes are read from the current stream and stored in buffer.</param>
            <param name="offset">The byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.Seek(System.Int64,Crestron.SimplSharp.CrestronIO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A System.IO.SeekOrigin object indicating the reference point used to obtain the new position.</param>
            <returns>This method is not supported.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current Crestron.SimplSharp.Cryptography.CryptoStream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.Clear">
            <summary>
            Releases all resources used by the Crestron.SimplSharp.Cryptography.CryptoStream.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.#ctor(Crestron.SimplSharp.CrestronIO.Stream,Crestron.SimplSharp.Cryptography.ICryptoTransform,Crestron.SimplSharp.Cryptography.CryptoStreamMode)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.CryptoStream class with a target data stream, the transformation to use, and the mode of the stream.
            </summary>
            <param name="stream">The stream on which to perform the cryptographic transformation.</param>
            <param name="transform">The cryptographic transformation that is to be performed on the stream.</param>
            <param name="mode">One of the Crestron.SimplSharp.Cryptography.CryptoStreamMode values.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoStream.FlushFinalBlock">
            <summary>
            Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoStream.CanRead">
            <summary>
            Gets a value indicating whether the current Crestron.SimplSharp.Cryptography.CryptoStream is readable.
            </summary>
            <returns>true if the current stream is readable; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoStream.CanSeek">
            <summary>
            Gets a value indicating whether you can seek within the current Crestron.SimplSharp.Cryptography.CryptoStream.
            </summary>
            <returns>Always false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoStream.CanWrite">
            <summary>
            Gets a value indicating whether the current Crestron.SimplSharp.Cryptography.CryptoStream is writable.
            </summary>
            <returns>true if the current stream is writable; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>This property is not supported.</returns>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>This property is not supported.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.SignatureDescription">
            <summary>
            Contains information about the properties of a digital signature.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SignatureDescription.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.SignatureDescription class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SignatureDescription.CreateDeformatter(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter instance
            with the specified key using the Crestron.SimplSharp.Cryptography.SignatureDescription.DeformatterAlgorithm
            property.
            </summary>
            <param name="key">The key to use in the Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter.</param>
            <returns>The newly created Crestron.SimplSharp.Cryptography.AsymmetricSignatureDeformatter instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SignatureDescription.CreateDigest">
            <summary>
            Creates a Crestron.SimplSharp.Cryptography.HashAlgorithm instance using the Crestron.SimplSharp.Cryptography.SignatureDescription.DigestAlgorithm
            property.
            </summary>
            <returns>The newly created Crestron.SimplSharp.Cryptography.HashAlgorithm instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.SignatureDescription.CreateFormatter(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter instance
            with the specified key using the Crestron.SimplSharp.Cryptography.SignatureDescription.FormatterAlgorithm
            property.
            </summary>
            <param name="key">The key to use in the Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter.</param>
            <returns>The newly created Crestron.SimplSharp.Cryptography.AsymmetricSignatureFormatter instance.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SignatureDescription.DeformatterAlgorithm">
            <summary>
            Gets or sets the deformatter algorithm for the signature description.
            </summary>
            <returns>The deformatter algorithm for the signature description.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SignatureDescription.DigestAlgorithm">
            <summary>
            Gets or sets the digest algorithm for the signature description.
            </summary>
            <returns>The digest algorithm for the signature description.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SignatureDescription.FormatterAlgorithm">
            <summary>
            Gets or sets the formatter algorithm for the signature description.
            </summary>
            <returns>The formatter algorithm for the signature description.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.SignatureDescription.KeyAlgorithm">
            <summary>
            Gets or sets the key algorithm for the signature description.
            </summary>
            <returns>The key algorithm for the signature description.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RSA">
            <summary>
            Represents the base class from which all implementations of the Crestron.SimplSharp.Cryptography.RSA
            algorithm inherit.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSA.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.RSA.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSA.Create">
            <summary>
            Creates an instance of the default implementation of the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
            <returns>A new instance of the default implementation of Crestron.SimplSharp.Cryptography.RSA.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSA.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of Crestron.SimplSharp.Cryptography.RSA.
            </summary>
            <param name="algName">The name of the implementation of Crestron.SimplSharp.Cryptography.RSA to use.</param>
            <returns>A new instance of the specified implementation of Crestron.SimplSharp.Cryptography.RSA.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSA.DecryptValue(System.Byte[])">
            <summary>
            When overridden in a derived class, decrypts the input data using the private key.
            </summary>
            <param name="rgb">The cipher text to be decrypted.</param>
            <returns>The resulting decryption of the rgb parameter in plain text.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSA.EncryptValue(System.Byte[])">
            <summary>
            When overridden in a derived class, encrypts the input data using the public key.
            </summary>
            <param name="rgb">The plain text to be encrypted.</param>
            <returns>The resulting encryption of the rgb parameter as cipher text.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSA.ExportParameters(System.Boolean)">
            <summary>
            When overridden in a derived class, exports the Crestron.SimplSharp.Cryptography.RSAParameters.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The parameters for Crestron.SimplSharp.Cryptography.DSA.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSA.ImportParameters(Crestron.SimplSharp.Cryptography.RSAParameters)">
            <summary>
            When overridden in a derived class, imports the specified Crestron.SimplSharp.Cryptography.RSAParameters.
            </summary>
            <param name="parameters">The parameters for Crestron.SimplSharp.Cryptography.RSA.</param>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.PBKDF2">
            <summary>
            Implements password-based key derivation functionality, PBKDF2, by using HMAC.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2.#ctor(System.IntPtr,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PBKDF2 class using a password, a salt, and number of iterations to derive the key.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2.#ctor(System.IntPtr,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the PBKDF2 class using a password, a salt, and number of iterations to derive the key.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2.GetBytes(System.Int32)">
            <summary>
            Returns the pseudo-random key for this object.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2.IterationCount">
            <summary>
            Gets or sets the number of iterations for the operation.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2.Salt">
            <summary>
            Gets or sets the key salt value for the operation.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider">
            <summary>
            Computes the Crestron.SimplSharp.Cryptography.MD5 hash value for the input data
            using the implementation provided by the cryptographic service provider (CSP).
            This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.MD5">
            <summary>
            Represents the abstract class from which all implementations of the Crestron.SimplSharp.Cryptography.MD5
            hash algorithm inherit.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5.#ctor">
            <summary>
            Initializes a new instance of Crestron.SimplSharp.Cryptography.MD5.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5.Create">
            <summary>
            Creates an instance of the default implementation of the Crestron.SimplSharp.Cryptography.MD5
            hash algorithm.
            </summary>
            <returns>A new instance of the Crestron.SimplSharp.Cryptography.MD5 hash algorithm.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm was used with Federal Information Processing Standards (FIPS)
            mode enabled, but is not FIPS compatible.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the Crestron.SimplSharp.Cryptography.MD5
            hash algorithm.
            </summary>
            <param name="algName">The name of the specific implementation of Crestron.SimplSharp.Cryptography.MD5 to use.</param>
            <returns>A new instance of the specified implementation of Crestron.SimplSharp.Cryptography.MD5.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The algorithm described by the algName parameter was used with Federal Information
            Processing Standards (FIPS) mode enabled, but is not FIPS compatible.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider class.
            </summary>
            <exception cref="T:System.InvalidOperationException">A FIPS-compliant algorithm policy is not being used.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only
            unmanaged resources.
            </param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the Crestron.SimplSharp.Cryptography.MD5
            hash algorithm for computing the hash value.
            </summary>
            <param name="rgb">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The hash
            cannot be created.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider.HashFinal">
            <summary>
            Returns the computed Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider
            hash value as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The hash
            cannot be created.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of Crestron.SimplSharp.Cryptography.MD5CryptoServiceProvider.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CspProviderFlags">
            <summary>
            Specifies flags that modify the behavior of the cryptographic service providers (CSP).
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.NoFlags">
            <summary>
            Don't specify any settings.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.UseMachineKeyStore">
            <summary>
            Use key information from the computer's key store.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.UseDefaultKeyContainer">
            <summary>
            Use key information from the default key container.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.UseNonExportableKey">
            <summary>
            Use key information that can not be exported.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.UseExistingKey">
            <summary>
            Use key information from the current key.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.UseArchivableKey">
            <summary>
            Allow a key to be exported for archival or recovery.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.UseUserProtectedKey">
            <summary>
                Notify the user through a dialog box or another method when certain actions
                are attempting to use a key. This flag is not compatible with the Crestron.SimplSharp.Cryptography.CspProviderFlags.NoPrompt
                flag.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CspProviderFlags.NoPrompt">
            <summary>
            Prevent the CSP from displaying any user interface (UI) for this context.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo">
            <summary>
            Provides additional information about a cryptographic key pair. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.#ctor(Crestron.SimplSharp.Cryptography.CspParameters)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.CspKeyContainerInfo class using the specified parameters.
            </summary>
            <param name="parameters">A Crestron.SimplSharp.Cryptography.CspParameters object that provides information about the key.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.Accessible">
            <summary>
            Gets a value indicating whether a key in a key container is accessible.
            </summary>
            <returns>true if the key is accessible; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.Exportable">
            <summary>
            Gets a value indicating whether a key can be exported from a key container.
            </summary>
            <returns>true if the key can be exported; otherwise, false</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.HardwareDevice">
            <summary>
            Gets a value indicating whether a key is a hardware key.
            </summary>
            <returns>true if the key is a hardware key; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.KeyContainerName">
            <summary>
            Gets a key container name.
            </summary>
            <returns>The key container name.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.KeyNumber">
            <summary>
            Gets a value that describes whether an asymmetric key was created as a signature key or an exchange key.
            </summary>
            <returns>One of the Crestron.SimplSharp.Cryptography.KeyNumber values that describes whether an asymmetric 
            key was created as a signature key or an exchange key.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.MachineKeyStore">
            <summary>
            Gets a value indicating whether a key is from a machine key set.
            </summary>
            <returns>true if the key is from the machine key set; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.Protected">
            <summary>
            Gets a value indicating whether a key pair is protected.
            </summary>
            <return>true if the key pair is protected; otherwise, false.</return>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.ProviderName">
            <summary>
            Gets the provider name of a key.
            </summary>
            <returns>The provider name.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.ProviderType">
            <summary>
            Gets the provider type of a key.
            </summary>
            <returns>The provider type. The default is 1.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.RandomlyGenerated">
            <summary>
            Gets a value indicating whether a key container was randomly generated by a managed cryptography class.
            </summary>
            <returns>true if the key container was randomly generated; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspKeyContainerInfo.Removable">
            <summary>
            Gets a value indicating whether a key can be removed from a key container.
            </summary>
            <returns>true if the key is removable; otherwise, false.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CspParameters">
            <summary>
            Contains parameters that are passed to the cryptographic service provider (CSP) that performs cryptographic computations. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.SimplSharp.Cryptography.CspParameters"/> class with the specified provider type code and name, and the specified container name.
            </summary>
            <param name="dwTypeIn">The provider type code that specifies the kind of provider to create.</param>
            <param name="strProviderNameIn">A provider name.</param>
            <param name="strContainerNameIn">A container name.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CspParameters.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.SimplSharp.Cryptography.CspParameters"/> class with the specified provider type code and name.
            </summary>
            <param name="dwTypeIn">A provider type code that specifies the kind of provider to create.</param>
            <param name="strProviderNameIn">A provider name.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CspParameters.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.SimplSharp.Cryptography.CspParameters"/> class with the specified provider type code.
            </summary>
            <param name="dwTypeIn">A provider type code that specifies the kind of provider to create.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CspParameters.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.CspParameters class.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspParameters.Flags">
            <summary>
            Represents the flags for <see cref="T:Crestron.SimplSharp.Cryptography.CspParameters"/> that modify the behavior of the cryptographic service provider (CSP).
            </summary>
            <returns>An enumeration value, or a bitwise combination of enumeration values.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspParameters.KeyContainerName">
            <summary>
            Represents the key container name for <see cref="T:Crestron.SimplSharp.Cryptography.CspParameters"/>.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspParameters.KeyNumber">
            <summary>
            Specifies whether an asymmetric key is created as a signature key or an exchange key.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspParameters.ProviderName">
            <summary>
            Represents the provider name for <see cref="T:Crestron.SimplSharp.Cryptography.CspParameters"/>.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CspParameters.ProviderType">
            <summary>
            Represents the provider type code for <see cref="T:Crestron.SimplSharp.Cryptography.CspParameters"/>.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CryptoConfig">
            <summary>
            Accesses the cryptography configuration information.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoConfig.#ctor">
            <summary>
            Initializes a new instance of the CryptoConfig class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoConfig.CreateFromName(System.String)">
             <summary>
             Creates a new instance of the specified cryptographic object.
             </summary>
             <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
             <returns>A new instance of the specified cryptographic object.</returns>
             <exception cref="T:System.ArgumentNullException">
             The name parameter is null.
            </exception>
             <exception cref="T:System.Reflection.TargetInvocationException">
             The algorithm described by the name parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
            <summary>
            Creates a new instance of the specified cryptographic object with the specified arguments.
            </summary>
            <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
            <param name="args">The arguments used to create the specified cryptographic object.</param>
            <returns>A new instance of the specified cryptographic object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoConfig.EncodeOID(System.String)">
            <summary>
            Encodes the specified object identifier (OID).
            </summary>
            <param name="str">The OID to encode.</param>
            <returns>A byte array containing the encoded OID.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoConfig.MapNameToOID(System.String)">
            <summary>
            Gets the object identifier (OID) of the algorithm corresponding to the specified simple name.
            </summary>
            <param name="name">The simple name of the algorithm for which to get the OID.</param>
            <returns>The OID of the specified algorithm.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.PaddingMode">
            <summary>
            Specifies the type of padding to apply when the message data block is shorter
            than the full number of bytes needed for a cryptographic operation.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.PaddingMode.None">
            <summary>
            No padding is done.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.PaddingMode.PKCS7">
            <summary>
                The PKCS #7 padding string consists of a sequence of bytes, each of which
                is equal to the total number of padding bytes added.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.PaddingMode.Zeros">
            <summary>
            The padding string consists of bytes set to zero.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.PaddingMode.ANSIX923">
            <summary>
                The ANSIX923 padding string consists of a sequence of bytes filled with zeros
                before the length.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.PaddingMode.ISO10126">
            <summary>
            The ISO10126 padding string consists of random data before the length.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.KeyNumber">
            <summary>
            Specifies whether to create an asymmetric signature key or an asymmetric exchange key.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.KeyNumber.Exchange">
            <summary>
                An exchange key pair used to encrypt session keys so that they can be safely
                stored and exchanged with other users.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.KeyNumber.Signature">
            <summary>
            A signature key pair used for authenticating digitally signed messages or files.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.HMAC">
            <summary>
            Implements the HMAC keyed message authentication code algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC.#ctor(Crestron.SimplSharp.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.SimplSharp.Cryptography.HMAC"/> class. This class cannot be inherited.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <remarks>A random key will be generated and used by the HMAC.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC.#ctor(Crestron.SimplSharp.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Crestron.SimplSharp.Cryptography.HMAC"/> class.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <param name="rgbKey">The key to use for the HMAC -or- a null reference (<b>Nothing</b> in Visual Basic).</param>
            <remarks>If <paramref name="rgbKey"/> is a null reference, the HMAC class will generate a random key.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC.Initialize">
            <summary>
            Initializes the HMAC.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="rgb">The input for which to compute the hash code. </param>
            <param name="ib">The offset into the byte array from which to begin using data. </param>
            <param name="cb">The number of bytes in the byte array to use as data. </param>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the HMAC.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC.Finalize">
            <summary>
            Finalizes the HMAC.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.HMAC.m_HashAlgorithm">
            <summary>
            Holds the internal hash algorithm
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.HMAC.m_KeyBuffer">
            <summary>
            Holds the key buffer.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.HMAC.m_IsHashing">
            <summary>
            <b>true</b> if a hash operation is in prograss, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.HMAC.m_IsDisposed">
            <summary>
            <b>true</b> if the object has been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.HMAC.HashSize">
            <summary>
            Gets the size of the computed hash code in bits.
            </summary>
            <value>The size of the computed hash code in bits.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CryptoAPITransform">
            <summary>
            Performs a cryptographic transformation of data. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoAPITransform.Clear">
            <summary>
            Releases all resources used by the Crestron.SimplSharp.Cryptography.CryptoAPITransform method.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoAPITransform.reset">
            <summary>
            Resets the internal state of Crestron.SimplSharp.Cryptography.CryptoAPITransform so that it can be used again to do a different encryption or decryption.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Computes the transformation for the specified region of the input byte array
            and copies the resulting transformation to the specified region of the output
            byte array.
            </summary>
            <param name="inputBuffer">The input on which to perform the operation on.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data from.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the data to.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data from.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ArgumentNullException">The inputBuffer parameter is null.  -or- The outputBuffer parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The length of the input buffer is less than the sum of the input offset and the input count.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">inputOffset is out of range. This parameter requires a non-negative number. </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the transformation for the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input on which to perform the operation on.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data from.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transformation.</returns>
            <exception cref="T:System.ArgumentNullException">The inputBuffer parameter is null.</exception>
            <exception cref="T:System.ArgumentException">
            The inputOffset parameter is less than zero.  -or- The inputCount parameter
            is less than zero.  -or- The length of the input buffer is less than the
            sum of the input offset and the input count.
            </exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The Crestron.SimplSharp.Cryptography.PaddingMode.PKCS7 padding is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The inputOffset parameter is out of range. This parameter requires a non-negative number.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoAPITransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <returns>Always true.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <returns>true if multiple blocks can be transformed; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoAPITransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <returns>The input block size in bytes.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoAPITransform.KeyHandle">
            <summary>
            Gets the key handle.
            </summary>
            <returns>The key handle.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.CryptoAPITransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <returns>The output block size in bytes.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RSAParameters">
            <summary>
            Represents the standard parameters for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.D">
            <summary>
            Represents the D parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.DP">
            <summary>
            Represents the DP parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.DQ">
            <summary>
            Represents the DQ parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.Exponent">
            <summary>
            Represents the Exponent parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.InverseQ">
            <summary>
            Represents the InverseQ parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.Modulus">
            <summary>
            Represents the Modulus parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.P">
            <summary>
            Represents the P parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.RSAParameters.Q">
            <summary>
            Represents the Q parameter for the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.PBKDF2SHA384">
            <summary>
            Implements password-based key derivation functionality, PBKDF2, by using HMAC-SHA384.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA384.#ctor(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the PBKDF2SHA384 class using a password, a salt, and number of iterations to derive the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The password or the salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
            <param name="password">Byte array representing the password (most likely ASCII-encoded)</param>
            <param name="salt">The salt used in the derivation</param>
            <param name="iterations">The iteration count and its value should be greater than or equal to 1</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA384.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the PBKDF2SHA384 class using a password and a salt to derive the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The password or the salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
            <param name="password">Byte array representing the password (most likely ASCII-encoded)</param>
            <param name="salt">The salt used in the derivation</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.PBKDF2SHA384.GetBytes(System.Int32)">
            <summary>
            Returns the pseudo-random key for this object.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">cb is out of range. This parameter requires a non-negative number.</exception>
            <param name="cb">The number of pseudo-random key bytes to generate.</param>
            <returns>Returns the pseudo-random key.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2SHA384.IterationCount">
            <summary>
            Gets or sets the number of iterations for the operation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of iterations is less than 1</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.PBKDF2SHA384.Salt">
            <summary>
            Gets or sets the key salt value for the operation.
            </summary>
            <exception cref="T:System.ArgumentNullException">The salt is null</exception>
            <exception cref="T:System.ArgumentException">The salt is less then 8 bytes long</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.HMACSHA512">
            <summary>
            Computes the keyed hash for HMAC-SHA512
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA512.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of HMACSHA512 with the passed in key
            </summary>
            <param name="sessionKey">Session Key used for signing</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sessionKey"/> is a null reference.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA512.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash on the inputted buffer
            </summary>
            <param name="buffer">Buffer to be hashed</param>
            <returns>Returns the computed hash.</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.HMACSHA1">
            <summary>
            Computes the keyed hash for HMAC-SHA1
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA1.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of HMACSHA1 with the passed in key
            </summary>
            <param name="sessionKey">Session Key used for signing</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sessionKey"/> is a null reference.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA1.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash on the inputted buffer
            </summary>
            <param name="buffer">Buffer to be hashed</param>
            <returns>Returns the computed hash.</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.DESCryptoServiceProvider">
            <summary>
            Defines a wrapper object to access the cryptographic service provider (CSP) version of the Data Encryption Standard 
            (Crestron.SimplSharp.Cryptography.DES) algorithm. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DESCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Data Encryption Standard (Crestron.SimplSharp.Cryptography.DES) decryptor object with the specified key 
            (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key) and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.DES decryptor object.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            The value of the System.Security.Cryptography.SymmetricAlgorithm.Mode property
            is System.Security.Cryptography.CipherMode.OFB.  -or- The value of the System.Security.Cryptography.SymmetricAlgorithm.Mode
            property is System.Security.Cryptography.CipherMode.CFB and the value of
            the System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize property
            is not 8.  -or- An invalid key size was used.  -or- The algorithm key size
            was not available.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Data Encryption Standard (Crestron.SimplSharp.Cryptography.DES) encryptor object with the specified key 
            (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key) and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.DES encryptor object.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            The value of the System.Security.Cryptography.SymmetricAlgorithm.Mode property
            is System.Security.Cryptography.CipherMode.OFB.  -or- The value of the System.Security.Cryptography.SymmetricAlgorithm.Mode
            property is System.Security.Cryptography.CipherMode.CFB and the value of
            the System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize property
            is not 8.  -or- An invalid key size was used.  -or- The algorithm key size
            was not available.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DESCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.DESCryptoServiceProvider class.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            The Data Encryption Standard (System.Security.Cryptography.DES) cryptographic
            service provider is not available.            public DESCryptoServiceProvider()
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DESCryptoServiceProvider.GenerateIV">
            <summary>
            Generates a random initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV) to use for the algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.DESCryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random key (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key) to be used for the algorithm.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.TripleDESCryptoServiceProvider">
            <summary>
            Defines a wrapper object to access the cryptographic service provider (CSP)
            version of the Crestron.SimplSharp.Cryptography.TripleDES algorithm. This class
            cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDESCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.TripleDESCryptoServiceProvider class.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The Crestron.SimplSharp.Cryptography.TripleDES cryptographic service provider
            is not available.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Crestron.SimplSharp.Cryptography.TripleDES decryptor object
            with the specified key (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key)
            and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.TripleDES decryptor object.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The value of the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Mode property
            is Crestron.SimplSharp.Cryptography.CipherMode.OFB.  -or- The value of the System.Security.Cryptography.SymmetricAlgorithm.Mode
            property is Crestron.SimplSharp.Cryptography.CipherMode.CFB and the value of
            the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.FeedbackSize property
            is not 8.  -or- An invalid key size was used.  -or- The algorithm key size
            was not available.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric Crestron.SimplSharp.Cryptography.TripleDES encryptor object
            with the specified key (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key)
            and initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV).
            </summary>
            <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
            <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
            <returns>A symmetric Crestron.SimplSharp.Cryptography.TripleDES encryptor object.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The value of the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Mode property
            is Crestron.SimplSharp.Cryptography.CipherMode.OFB.  -or- The value of the System.Security.Cryptography.SymmetricAlgorithm.Mode
            property is Crestron.SimplSharp.Cryptography.CipherMode.CFB and the value of
            the Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.FeedbackSize property
            is not 8.  -or- An invalid key size was used.  -or- The algorithm key size
            was not available.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDESCryptoServiceProvider.GenerateIV">
            <summary>
            Generates a random initialization vector (Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.IV)
            to use for the algorithm.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.TripleDESCryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random Crestron.SimplSharp.Cryptography.SymmetricAlgorithm.Key to
            be used for the algorithm.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.HMACSHA256">
            <summary>
            Computes the keyed hash for HMAC-SHA256
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA256.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of HMACSHA256 with the passed in key
            </summary>
            <param name="sessionKey">Session Key used for signing</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sessionKey"/> is a null reference.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMACSHA256.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash on the inputted buffer
            </summary>
            <param name="buffer">Buffer to be hashed</param>
            <returns>Returns the computed hash.</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider">
            <summary>
                Performs asymmetric encryption and decryption using the implementation of
                the Crestron.SimplSharp.Cryptography.RSA algorithm provided by the cryptographic
                service provider (CSP). This class cannot be inherited.
            </summary>
            <example>
            This example class stores the asymmetric key pair generated by RSACryptoServiceProvider into 
            a persistent key store by passing a CspParameters object to the constructor. This key pair will be 
            used on subsequent calls to RSAEncrypt and RSADecrypt, even after a reboot.
            <code>
            public class EncryptionLayer
            {	
            	// keyStoreName identifies the persistent key container used 
            	// to store the RSA key pair
            	string keyStoreName;
            
            	public EncryptionLayer(string keyStoreName) 
            	{ 
            		this.keyStoreName = keyStoreName;
            	}
            
            	public byte[] RSAEncrypt(string plaintext)
            	{
            		// retrieve RSA key pair from key container
            		var csp = new CspParameters();
            		csp.KeyContainerName = keyStoreName;
            
            		var rsa = new RSACryptoServiceProvider(csp);
            
            		// encrypt the inputted string
            		byte[] cipherbytes = rsa.Encrypt(Encoding.Default.GetBytes(plaintext), false);
            
            		// return the encrypted bytes
            		return cipherbytes;
            	}
            
            	public string RSADecrypt(byte[] ciphertext)
            	{
            		// retrieve RSA key pair from key container
            		var csp = new CspParameters();
            		csp.KeyContainerName = keyStoreName;
            
            		var rsa = new RSACryptoServiceProvider(csp); 
            
            		// decrypt the inputted byte array
            		byte[] plainbytes = null;
            		plainbytes = rsa.Decrypt(ciphertext, false);
            
            		// convert the plaintext bytes back to a string and return it
            		return Encoding.Default.GetString(plainbytes, 0, plainbytes.Length);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider
            class using the default key.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.#ctor(Crestron.SimplSharp.Cryptography.CspParameters)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider
            class with the specified parameters.
            </summary>
            <param name="parameters">The parameters to be passed to the cryptographic service provider (CSP).</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The CSP cannot be acquired.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider
            class with the specified key size.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,Crestron.SimplSharp.Cryptography.CspParameters)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider
                class with the specified key size and parameters.
            </summary>
            <param name="keySize">The size of the key to use in bits.</param>
            <param name="parameters">The parameters to be passed to the cryptographic service provider (CSP).</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The CSP cannot be acquired.  -or- The key cannot be created.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)">
            <summary>
            Decrypts data with the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
            <param name="rgb">The data to be decrypted.</param>
            <param name="fOAEP">
            true to perform direct Crestron.SimplSharp.Cryptography.RSA decryption using
            OAEP padding (only available on a computer running Microsoft Windows XP or
            later); otherwise, false to use PKCS#1 v1.5 padding.
            </param>
            <returns>The decrypted data, which is the original plain text before encryption.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The fOAEP
            parameter is true and the length of the rgb parameter is greater than Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.KeySize.
            -or- The fOAEP parameter is true and OAEP is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">rgb is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])">
            <summary>
            This method is not supported in the current version.
            </summary>
            <param name="rgb">The data to be decrypted.</param>
            <returns>The decrypted data, which is the original plain text before encryption.</returns>
            <exception cref="T:System.NotSupportedException">This method is not supported in the current version.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Required member to implement AsymmetricAlgorithm class.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)">
            <summary>
            Encrypts data with the Crestron.SimplSharp.Cryptography.RSA algorithm.
            </summary>
            <param name="rgb">The data to be encrypted.</param>
            <param name="fOAEP">
            true to perform direct Crestron.SimplSharp.Cryptography.RSA encryption using
            OAEP padding (only available on a computer running Microsoft Windows XP or
            later); otherwise, false to use PKCS#1 v1.5 padding.
            </param>
            <returns>The encrypted data.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The length
            of the rgb parameter is greater than the maximum allowed length.  -or- The
            fOAEP parameter is true and OAEP padding is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">rgb is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])">
            <summary>
            This method is not supported in the current version.
            </summary>
            <param name="rgb">The data to be encrypted.</param>
            <returns>The encrypted data.</returns>
            <exception cref="T:System.NotSupportedException">This method is not supported in the current version.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)">
            <summary>
            Exports a blob containing the key information associated with an Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider object.
            </summary>
            <param name="includePrivateParameters">true to include the private key; otherwise, false.</param>
            <returns>A byte array containing the key information associated with an Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)">
            <summary>
            Exports the Crestron.SimplSharp.Cryptography.RSAParameters.
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
            <returns>The parameters for Crestron.SimplSharp.Cryptography.RSA.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">The key cannot be exported.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])">
            <summary>
            Imports a blob that represents RSA key information.
            </summary>
            <param name="keyBlob">A byte array that represents an RSA key blob.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.ImportParameters(Crestron.SimplSharp.Cryptography.RSAParameters)">
            <summary>
            Imports the specified Crestron.SimplSharp.Cryptography.RSAParameters.
            </summary>
            <param name="parameters">The parameters for Crestron.SimplSharp.Cryptography.RSA.</param>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The parameters
            parameter has missing fields.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)">
            <summary>
            Computes the hash value of the specified byte array using the specified hash
            algorithm, and signs the resulting hash value.
            </summary>
            <param name="buffer">The input data for which to compute the hash.</param>
            <param name="halg">The hash algorithm to use to create the hash value.</param>
            <returns>Crestron.SimplSharp.Cryptography.RSA signature for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">The halg parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The halg parameter is not a valid type.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.SignData(Crestron.SimplSharp.CrestronIO.Stream,System.Object)">
            <summary>
            Computes the hash value of the specified input stream using the specified
            hash algorithm, and signs the resulting hash value.
            </summary>
            <param name="inputStream">The input data for which to compute the hash.</param>
            <param name="halg">The hash algorithm to use to create the hash value.</param>
            <returns>The Crestron.SimplSharp.Cryptography.RSA signature for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">The halg parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The halg parameter is not a valid type.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)">
            <summary>
            Computes the hash value of a subset of the specified byte array using the
            specified hash algorithm, and signs the resulting hash value.
            </summary>
            <param name="buffer">The input data for which to compute the hash.</param>
            <param name="offset">The offset into the array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <param name="halg">The hash algorithm to use to create the hash value.</param>
            <returns>The Crestron.SimplSharp.Cryptography.RSA signature for the specified data.</returns>
            <exception cref="T:System.ArgumentNullException">The halg parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The halg parameter is not a valid type.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with
            the private key.
            </summary>
            <param name="rgbHash">The hash value of the data to be signed.</param>
            <param name="str">The hash algorithm identifier (OID) used to create the hash value of the data.</param>
            <returns>Crestron.SimplSharp.Cryptography.RSA signature for the specified hash value.</returns>
            <exception cref="T:System.ArgumentNullException">The rgbHash parameter is null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- There
            is no private key.
            </exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed
            for the specified data.
            </summary>
            <param name="buffer">The data that was signed.</param>
            <param name="halg">The name of the hash algorithm used to create the hash value of the data.</param>
            <param name="signature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The halg parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The halg parameter is not a valid type.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed
            for the specified hash value.
            </summary>
            <param name="rgbHash">The hash value of the data to be signed.</param>
            <param name="str">The hash algorithm identifier (OID) used to create the hash value of the data.</param>
            <param name="rgbSignature">The signature data to be verified.</param>
            <returns>true if the signature verifies as valid; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The rgbHash parameter is null.  -or- The rgbSignature parameter is null.</exception>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            The cryptographic service provider (CSP) cannot be acquired.  -or- The signature
            cannot be verified.
            </exception>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo">
            <summary>
            Gets a Crestron.SimplSharp.Cryptography.CspKeyContainerInfo object that describes
            additional information about a cryptographic key pair.
            </summary>
            <returns>
            A Crestron.SimplSharp.Cryptography.CspKeyContainerInfo object that describes
            additional information about a cryptographic key pair.
            </returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm available with this implementation
            of Crestron.SimplSharp.Cryptography.RSA.
            </summary>
            <returns>The name of the key exchange algorithm if it exists; otherwise, null.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.KeySize">
            <summary>
            Gets the size of the current key.
            </summary>
            <returns>The size of the key in bits.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp">
            <summary>
            Gets or sets a value indicating whether the key should be persisted in the
            cryptographic service provider (CSP).
            </summary>
            <returns>true if the key should be persisted in the CSP; otherwise, false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.PublicOnly">
            <summary>
            Gets a value that indicates whether the Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider
            object contains only a public key.
            </summary>
            <returns>
            true if the Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider object
            contains only a public key; otherwise, false.
            </returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm available with this implementation
            of Crestron.SimplSharp.Cryptography.RSA.
            </summary>
            <returns>The name of the signature algorithm.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore">
            <summary>
            Gets or sets a value indicating whether the key should be persisted in the
            computer's key store instead of the user profile store.
            </summary>
            <returns>true if the key should be persisted in the computer key store; otherwise, false.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CryptographicException">
            <summary>
            The exception that is thrown when an error occurs during a cryptographic operation.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptographicException.#ctor">
            <summary>
            Exception with the message blank and innerException null.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptographicException.#ctor(System.String)">
            <summary>
            Exception with the message populated with the Exception information and the innerException is null.
            </summary>
            <param name="message">General message about the Exception.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
            <summary>
            Exception with the message and innerException populated.
            </summary>
            <param name="message">General message about the Exception.</param>
            <param name="inner">Information on what caused the exception.</param>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">
            <summary>
            The exception that is thrown when an unexpected operation occurs during a cryptographic operation.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException class with default properties.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter">
            <summary>
            Creates an Crestron.SimplSharp.Cryptography.RSA PKCS #1 version 1.5 signature.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter.#ctor(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter
            class with the specified key.
            </summary>
            <param name="key">
            The instance of the Crestron.SimplSharp.Cryptography.RSA algorithm that holds
            the private key.
            </param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
            <summary>
            Creates the Crestron.SimplSharp.Cryptography.RSA PKCS #1 signature for the specified data.
            </summary>
            <param name="rgbHash">The data to be signed.</param>
            <returns>The digital signature for rgbHash.</returns>
            <exception cref="T:Crestron.SimplSharp.Cryptography.CryptographicUnexpectedOperationException">The key is null.  -or- The hash algorithm is null.</exception>
            <exception cref="T:System.ArgumentNullException">The rgbHash parameter is null.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
            <summary>
            Sets the hash algorithm to use for creating the signature.
            </summary>
            <param name="strName">The name of the hash algorithm to use for creating the signature.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.RSAPKCS1SignatureFormatter.SetKey(Crestron.SimplSharp.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Sets the private key to use for creating the signature.
            </summary>
            <param name="key">The instance of the Crestron.SimplSharp.Cryptography.RSA algorithm that holds the private key.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.HMAC2">
            <summary>
            Computes the keyed hash for OpenSSL-based HMAC-SHA256/384/512
            The class requires direct access to OpenSSL crypto-library (libeay32.dll)
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC2.#ctor(System.IntPtr,System.Byte[])">
            <summary>
            Initialize a new instance of HMAC with the passed in key
            </summary>
            <param name="md"></param>
            <param name="sessionKey">Session Key used for signing</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sessionKey"/> is a null reference.</exception>
        </member>
        <member name="M:Crestron.SimplSharp.Cryptography.HMAC2.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash on the inputted buffer
            </summary>
            <param name="buffer">Buffer to be hashed</param>
            <returns>Returns the computed hash.</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        </member>
        <member name="T:Crestron.SimplSharp.Cryptography.CipherMode">
            <summary>
            CipherMode - Specifies the block cipher mode to use for encryption.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CipherMode.CBC">
            <summary>
                The Cipher Block Chaining (CBC) mode introduces feedback. Before each plain
                text block is encrypted, it is combined with the cipher text of the previous
                block by a bitwise exclusive OR operation. This ensures that even if the
                plain text contains many identical blocks, they will each encrypt to a different
                cipher text block. The initialization vector is combined with the first plain
                text block by a bitwise exclusive OR operation before the block is encrypted.
                If a single bit of the cipher text block is mangled, the corresponding plain
                text block will also be mangled. In addition, a bit in the subsequent block,
                in the same position as the original mangled bit, will be mangled.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CipherMode.ECB">
            <summary>
                The Electronic Codebook (ECB) mode encrypts each block individually. This
                means that any blocks of plain text that are identical and are in the same
                message, or in a different message encrypted with the same key, will be transformed
                into identical cipher text blocks. If the plain text to be encrypted contains
                substantial repetition, it is feasible for the cipher text to be broken one
                block at a time. Also, it is possible for an active adversary to substitute
                and exchange individual blocks without detection. If a single bit of the
                cipher text block is mangled, the entire corresponding plain text block will
                also be mangled.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CipherMode.OFB">
            <summary>
                The Output Feedback (OFB) mode processes small increments of plain text into
                cipher text instead of processing an entire block at a time. This mode is
                similar to CFB; the only difference between the two modes is the way that
                the shift register is filled. If a bit in the cipher text is mangled, the
                corresponding bit of plain text will be mangled. However, if there are extra
                or missing bits from the cipher text, the plain text will be mangled from
                that point on.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CipherMode.CFB">
            <summary>
                The Cipher Feedback (CFB) mode processes small increments of plain text into
                cipher text, instead of processing an entire block at a time. This mode uses
                a shift register that is one block in length and is divided into sections.
                For example, if the block size is eight bytes, with one byte processed at
                a time, the shift register is divided into eight sections. If a bit in the
                cipher text is mangled, one plain text bit is mangled and the shift register
                is corrupted. This results in the next several plain text increments being
                mangled until the bad bit is shifted out of the shift register.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Cryptography.CipherMode.CTS">
            <summary>
                The Cipher Text Stealing (CTS) mode handles any length of plain text and
                produces cipher text whose length matches the plain text length. This mode
                behaves like the CBC mode for all but the last two blocks of the plain text.
            </summary>
        </member>
    </members>
</doc>
