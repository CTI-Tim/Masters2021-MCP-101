<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimplSharpReflectionInterface</name>
    </assembly>
    <members>
        <member name="T:SandboxServices.SandboxService">
            <summary>
            Class SandboxService.
            </summary>
        </member>
        <member name="M:SandboxServices.SandboxService.Initialize">
            <summary>
             This is just to get the class initialized
            </summary>
        </member>
        <member name="M:SandboxServices.SandboxService.IsTypeBlackListed(System.String,System.String)">
            <summary>
            Determines whether type is black listed within the specified namespace.
            </summary>
            <param name="namespaceName">Name of the namespace.</param>
            <param name="typeName">Name of the type.</param>
            <returns>true if type is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsTypeBlackListedInternal(System.String,System.String)">
            <summary>
            Determines whether type is black listed within the specified namespace.
            </summary>
            <param name="namespaceName">Name of the namespace.</param>
            <param name="typeName">Name of the type.</param>
            <returns>true if type is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListed(System.Reflection.Assembly)">
            <summary>
            Determines whether assembly is black listed
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>true if assembly is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListedInternal(System.Reflection.Assembly)">
            <summary>
            Determines whether assembly is black listed
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>true if assembly is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListed(System.Reflection.ConstructorInfo)">
            <summary>
            Determines whether constructor is black listed. if ConstructorBlackListAttribute is 
            not available, check for ClassBlackListAttribute. if ClassBlackListAttribute is 
            also not available, check for AssemblyBlackListAttribute
            </summary>
            <param name="constructorName">Name of the constructor.</param>
            <returns>true if constructor is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListedInternal(System.Reflection.ConstructorInfo)">
            <summary>
            Determines whether constructor is black listed. if ConstructorBlackListAttribute is 
            not available, check for ClassBlackListAttribute. if ClassBlackListAttribute is 
            also not available, check for AssemblyBlackListAttribute
            </summary>
            <param name="constructorName">Name of the constructor.</param>
            <returns>true if constructor is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListed(System.Reflection.MethodBase)">
            <summary>
            Determines whether method is black listed. if MethodbaseBlackListAttribute is 
            not available, check for ClassBlackListAttribute. if ClassBlackListAttribute 
            is also not available, check for AssemblyBlackListAttribute
            </summary>
            <param name="methodBaseName">Name of the method.</param>
            <returns>true if method is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListedInternal(System.Reflection.MethodBase)">
            <summary>
            Determines whether method is black listed. if MethodbaseBlackListAttribute is 
            not available, check for ClassBlackListAttribute. if ClassBlackListAttribute 
            is also not available, check for AssemblyBlackListAttribute
            </summary>
            <param name="methodBaseName">Name of the method.</param>
            <returns>true if method is black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListed(Crestron.SandboxCustomAttributes.BlackListOptions)">
            <summary>
            Determines whether blackListAttributes is black listed for SimplSharp or SIMPL Windows program
            </summary>
            <param name="blackListAttributes">BlackList Attributes.</param>
            <returns>true if black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListedInternal(Crestron.SandboxCustomAttributes.BlackListOptions)">
            <summary>
            Determines whether blackListAttributes is black listed for SimplSharp or SIMPL Windows program
            </summary>
            <param name="blackListAttributes">BlackList Attributes.</param>
            <returns>true if black listed; otherwise, false.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.SanitizeBindingFlags(System.Type,Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
            Sanitizes the Binding Flags for sandboxing.  Desired restrictions are assigned via BindingFlagsBlackListAttribute on the assembly.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            <param name="typeVal">Type.</param>
            <param name="flagsVal">BindingFlags.</param>
            <returns>BindingFlags adjusted to comply with BindingFlagsBlackListAttribute restrictions of the assembly.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.SanitizeBindingFlagsInternal(System.Type,Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
            Sanitizes the Binding Flags for sandboxing.  Desired restrictions are assigned via BindingFlagsBlackListAttribute on the assembly.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            <param name="typeVal">Type.</param>
            <param name="flagsVal">BindingFlags.</param>
            <returns>BindingFlags adjusted to comply with BindingFlagsBlackListAttribute restrictions of the assembly.</returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListedClassOrAssembly(System.Type)">
            <summary>
            Determines whether class is black listed. Checks for ClassBlackListAttribute. if 
            ClassBlackListAttribute is not available, check for AssemblyBlackListAttribute
            </summary>
            <param name="typename">the type</param>
            <returns></returns>
        </member>
        <member name="M:SandboxServices.SandboxService.IsBlackListedClassOrAssemblyInternal(System.Type)">
            <summary>
            Determines whether class is black listed. Checks for ClassBlackListAttribute. if 
            ClassBlackListAttribute is not available, check for AssemblyBlackListAttribute
            </summary>
            <param name="typename">the type</param>
            <returns></returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
            <summary>
            Exception thrown when a method/assembly is not allowed in the Crestron sandbox due to sandbox restrictions.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.RestrictionViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RestrictionViolationException class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.RestrictionViolationException.#ctor">
            <summary>
            Initializes a new instance of the RestrictionViolationException class.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.RestrictionViolationException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
            <summary>
            Class AmbiguousMatchException.
                The exception that is thrown when binding to a member results in more than
                one member matching the binding criteria. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the AmbiguousMatchException
                class with a specified error message and a reference to the inner exception
                that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter
                is not null, the current exception is raised in a catch block that handles
                the inner exception.</param>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.Assembly">
            <summary>
                Represents an assembly, which is a reusable, versionable, and self-describing
                building block of a common language runtime application.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.ICustomAttributeProvider">
            <summary>
                Provides custom attributes for reflection objects that support them.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
             <summary>
                 Returns an array of all of the custom attributes defined on this member,
                 excluding named attributes, or an empty array if there are no custom attributes.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 The custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 There is more than one attribute of type attributeType defined on this member.</exception>
            
             <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
             <returns>An array of Objects representing custom attributes, or an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ICustomAttributeProvider.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Returns an array of custom attributes defined on this member, identified
                 by type, or an empty array if there are no custom attributes of that type.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 The custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 There is more than one attribute of type attributeType defined on this member.</exception>
            
             <param name="attributeType">The type of the custom attributes.</param>
             <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
             <returns>An array of Objects representing custom attributes, or an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ICustomAttributeProvider.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                Indicates whether one or more instance of attributeType is defined on this
                member.
            </summary>
            <param name="attributeType">The type of the custom attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>true if the attributeType is defined on this member; false otherwise.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.#ctor(System.Reflection.Assembly)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="assembly">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.Create(System.Reflection.Assembly)">
            <summary>
            Creates an object of Assembly if one does not already exist
            </summary>
            <param name="assembly">assembly</param>
            <returns>Assembly</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.CreateInstance(System.String)">
             <summary>
                 Locates the specified type from this assembly and creates an instance of
                 it using the system activator, using case-sensitive search.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 typeName is an empty string ("") or a string beginning with a null character.
                  -or- The current assembly was loaded into the reflection-only context.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 typeName is null.</exception>
            
             <exception cref="T:System.MissingMethodException">
                 No matching constructor was found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 typeName requires a dependent assembly that could not be found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 typeName requires a dependent assembly, but the file is not a valid assembly.
                 -or- typeName requires a dependent assembly which was compiled for a version
                 of the runtime later than the currently loaded version.</exception>
            
             <param name="typeName">The CType.FullName of the type to locate.</param>
             <returns>An instance of System.Object representing the type, with culture, arguments,
                 binder, and activation attributes set to null, and Crestron.SimplSharp.Reflection.BindingFlags
                 set to Public or Instance, or null if typeName is not found.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetCallingAssembly">
            
             <summary>
                  GetCallingAssembly() is not supported
             </summary>
             <exception cref="T:System.NotSupportedException">Method is not supported</exception>
             <returns>Throws NotSupportedException</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
            
             <summary>
                 Gets all the custom attributes for this assembly.
             </summary>
             <param name="inherit">if set to true, inherit. This argument is ignored for objects 
                 of type Crestron.SimplSharp.Reflection.Assembly.</param>
             <returns>An array of type Object containing the custom attributes for this assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            
             <summary>
                 Gets the custom attributes for this assembly as specified by type.
             </summary>
            
             <exception cref="T:System.ArgumentNullException">
                 attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not a runtime type.</exception>
            
             <param name="attributeType">The CType for which the custom attributes are to be returned.</param>
             <param name="inherit">if set to true, inherit. This argument is ignored for objects of type Crestron.SimplSharp.Reflection.Assembly</param>
             <returns>An array of type Object containing the custom attributes for this assembly
                 as specified by attributeType.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetExecutingAssembly">
            
             <summary>
                 Gets the assembly that contains the code that is currently executing.
             </summary>
             <returns>A Crestron.SimplSharp.Reflection.Assembly representing the assembly that contains the
                 code that is currently executing.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetManifestResourceNames">
            
             <summary>
                 Returns the names of all the resources in this assembly.
             </summary>
             <returns>An array of type String containing the names of all the resources.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetManifestResourceStream(System.String)">
            
             <summary>
                 Loads the specified manifest resource from this assembly.
             </summary>
            
             <exception cref="T:System.ArgumentNullException">
                 The name parameter is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The name parameter is an empty string ("").</exception>
             
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 name was not found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 name is not a valid assembly.</exception>
             
             <param name="name">The case-sensitive name of the manifest resource being requested.</param>
             <returns>A CrestronIO.Stream representing the manifest resource; null if no resources
                 were specified during compilation, or if the resource is not visible to the
                 caller.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetManifestResourceStream(Crestron.SimplSharp.Reflection.CType,System.String)">
            
             <summary>
                 Loads the specified manifest resource, scoped by the namespace of the specified
                 type, from this assembly.
             </summary>
            
             <exception cref="T:System.ArgumentNullException">
                 The name parameter is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The name parameter is an empty string ("").</exception>
             
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 name was not found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 name is not a valid assembly.</exception>
            
             <param name="type">The type whose namespace is used to scope the manifest resource name.</param>
             <param name="name">The case-sensitive name of the manifest resource being requested.</param>
             <returns>A CrestronIO.Stream representing the manifest resource; null if no resources
                 were specified during compilation or if the resource is not visible to the
                 caller.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetModules">
            
             <summary>
                 Gets all the modules that are part of this assembly.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 The module to be loaded does not specify a file name extension.</exception>
             
             <returns>An array of modules.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetName">
            
             <summary>
                 Gets an Crestron.SimplSharp.Reflection.AssemblyName for this assembly.
             </summary>
             
             <returns>An Crestron.SimplSharp.Reflection.AssemblyName for this assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetName(System.Boolean)">
            
             <summary>
                 Gets an Crestron.SimplSharp.Reflection.AssemblyName for this assembly, setting the codebase
                 as specified by copiedName.
             </summary>
            
             <param name="copiedName">true to set the Crestron.SimplSharp.Reflection.Assembly.CodeBase to the 
             location of the assembly after it was shadow copied; false to set 
             Crestron.SimplSharp.Reflection.Assembly.CodeBase to the original location.</param>
             <returns>An Crestron.SimplSharp.Reflection.AssemblyName for this assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
            
             <summary>
                 Gets the satellite assembly for the specified culture.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 culture is null.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 The assembly cannot be found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 The satellite assembly is not a valid assembly.</exception>
             
             <param name="culture">The specified culture.</param>
             <returns>The specified satellite assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
            
             <summary>
                 Gets the specified version of the satellite assembly for the specified culture.
             </summary>
            
             <exception cref="T:System.ArgumentNullException">
                 culture is null.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 The assembly cannot be found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 The satellite assembly is not a valid assembly.</exception>
            
             <param name="culture">The specified culture.</param>
             <param name="version">The version of the satellite assembly.</param>
             <returns>The specified satellite assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetType(System.String)">
            
             <summary>
                 Gets the CType object with the specified name in the assembly instance.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 name is invalid.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 name requires a dependent assembly that could not be found.</exception>
             
             <exception cref="T:System.BadImageFormatException">
                 name requires a dependent assembly, but the file is not a valid assembly.
                 -or- name requires a dependent assembly which was compiled for a version
                 of the runtime later than the currently loaded version.</exception>
             
             <param name="name">The full name of the type.</param>
             <returns>A CType object that represents the specified class, or null if the
                 class is not found.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetType(System.String,System.Boolean)">
            
             <summary>
                 Gets the CType object with the specified name in the assembly instance
                 and optionally throws an exception if the type is not found.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 name is invalid.  -or- The length of name exceeds 1024 characters.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 throwOnError is true, and the type cannot be found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 name requires a dependent assembly that could not be found.</exception>
             
             <exception cref="T:System.BadImageFormatException">
                 name requires a dependent assembly, but the file is not a valid assembly.
                 -or- name requires a dependent assembly which was compiled for a version
                 of the runtime later than the currently loaded version.</exception>
            
             <param name="name">The full name of the type.</param>
             <param name="throwOnError">true to throw an exception if the type is not found; false to return null.</param>
             <returns>A CType object that represents the specified class.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetTypes">
            
             <summary>
                 Gets the types defined in this assembly.
             </summary>
             
             <exception cref="T:System.TypeLoadException">
                 The assembly contains one or more types that cannot be loaded. The array
                 returned by the Crestron.SimplSharp.Reflection.ReflectionTypeLoadException.Types property
                 of this exception contains a CType object for each type that was loaded
                 and null for each type that could not be loaded, while the 
                 Crestron.SimplSharp.Reflection.ReflectionTypeLoadException.LoaderExceptions
                 property contains an exception for each type that could not be loaded.</exception>
            
             <returns>An array of type CType containing objects for all the types defined
                 in this assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            
             <summary>
                 Indicates whether or not a specified attribute has been applied to the assembly.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType uses an invalid type.</exception>
            
             <param name="attributeType">The CType of the attribute to be checked for this assembly.</param>
             <param name="inherit">if set to true, inherit. This argument is ignored for objects of this type</param>
             <returns>true if the specified attribute type is defined; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.Load(Crestron.SimplSharp.Reflection.AssemblyName)">
            
             <summary>
                 Loads an assembly given its Crestron.SimplSharp.Reflection.AssemblyName.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 assemblyRef is null.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 assemblyRef is not found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 assemblyRef is not a valid assembly. -or- Version 2.0 or later of the common
                 language runtime is currently loaded and assemblyRef was compiled with a
                 later version.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <exception cref="T:Crestron.SimplSharp.CrestronIO.IOException">
                 IO error accessing information using streams, files or directories.</exception>
             
             <param name="assemblyRef">The Crestron.SimplSharp.Reflection.AssemblyName object that describes the assembly to
                 be loaded.</param>
             <returns>The loaded assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.Load(System.String)">
            
             <summary>
                 Loads an assembly given the long form of its name.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 assemblyString is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 assemblyString is a zero-length string.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 assemblyString is not found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 assemblyString is not a valid assembly. -or- Version 2.0 or later of the
                 common language runtime is currently loaded and assemblyString was compiled
                 with a later version.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <exception cref="T:Crestron.SimplSharp.CrestronIO.IOException">
                 IO error accessing information using streams, files or directories.</exception>
             
             <param name="assemblyString">The long form of the assembly name.</param>
             <returns>The loaded assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.LoadFrom(System.String)">
            
             <summary>
                 Loads an assembly given its file name or path.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 assemblyFile is null.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 assemblyFile is not found, or the module you are trying to load does not
                 specify a filename extension.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 assemblyFile is not a valid assembly. -or- Version 2.0 or later of the common
                 language runtime is currently loaded and assemblyFile was compiled with a
                 later version.</exception>
            
             <exception cref="T:System.Security.SecurityException">
                 A codebase that does not start with "file:///" was specified without the required
                 System.Net.WebPermission.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The assemblyFile parameter is an empty string ("").</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.PathTooLongException">
                 The assembly name is longer than MAX_PATH characters.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <exception cref="T:Crestron.SimplSharp.CrestronIO.IOException">
                 IO error accessing information using streams, files or directories.</exception>
            
             <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
             <returns>The loaded assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.ToString">
            
             <summary>
                 Returns the full name of the assembly, also known as the display name.
             </summary>
             <returns>The full name of the assembly, or the class name if the full name of the
                 assembly cannot be determined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.Equals(System.Object)">
            <summary>
                Determines if the underlying system type of the current Assembly is the
                same as the underlying system type of the specified System.Object.
            </summary>
            <param name="o">The System.Object whose underlying system type is to be compared with the
                underlying system type of the current Assembly.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current Assembly; otherwise, false. This method also returns
                false if the object specified by the o parameter is not a Assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Assembly.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.Assembly.FullName">
            
             <summary>
                 Gets the display name of the assembly.   
             </summary>
             <value>The display name of the assembly.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.Assembly.ManifestModule">
            
             <summary>
                 Gets the module that contains the manifest for the current assembly.
             </summary>
             <value> A Crestron.SimplSharp.Reflection.Module object representing the module that contains the
                 manifest for the assembly.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyAlgorithmIdAttribute">
            <summary>
                Specifies an algorithm to hash all files in an assembly. This class cannot
                be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyAlgorithmIdAttribute.#ctor(Crestron.SimplSharp.Reflection.AssemblyHashAlgorithm)">
            <summary>
                Initializes a new instance of the AssemblyAlgorithmIdAttribute
                class with the specified hash algorithm, using one of the members of System.Configuration.Assemblies.AssemblyHashAlgorithm
                to represent the hash algorithm.
            </summary>
            <param name="algorithmId">A member of AssemblyHashAlgorithm that represents the hash algorithm.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
            
             <summary>
                 Initializes a new instance of the AssemblyAlgorithmIdAttribute
                 class with the specified hash algorithm, using an unsigned integer to represent
                 the hash algorithm.
             </summary>
             <param name="algorithmId">An unsigned integer representing the hash algorithm.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
            <summary>
                Gets the hash algorithm of an assembly manifest's contents.
            </summary>
            <value>An unsigned integer representing the assembly hash algorithm.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyCompanyAttribute">
            <summary>
                Defines a company name custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyCompanyAttribute
                class.
            </summary>
            <param name="company">The company name information.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyCompanyAttribute.Company">
            <summary>
                Gets company name information.
            </summary>
            <value>A string containing the company name.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyConfigurationAttribute">
            <summary>
                Specifies the build configuration, such as retail or debug, for an assembly.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyConfigurationAttribute
                class.
            </summary>
            <param name="configuration">The assembly configuration.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyConfigurationAttribute.Configuration">
            <summary>
                Gets assembly configuration information.
            </summary>
            <value>A string containing the assembly configuration information.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyCopyrightAttribute">
            <summary>
                Defines a copyright custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyCopyrightAttribute
                class.
            </summary>
            <param name="copyright">The copyright information.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyCopyrightAttribute.Copyright">
            <summary>
                Gets copyright information.
            </summary>
            <value>A string containing the copyright information.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyCultureAttribute">
            <summary>
                Specifies which culture the assembly supports.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyCultureAttribute
                class with the culture supported by the assembly being attributed.
            </summary>
            <param name="culture">The culture supported by the attributed assembly.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyCultureAttribute.Culture">
            <summary>
                Gets the supported culture of the attributed assembly.
            </summary>
            <value>A string containing the name of the supported culture.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyDefaultAliasAttribute">
            <summary>
                Defines a friendly default alias for an assembly manifest.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyDefaultAliasAttribute
                class.
            </summary>
            <param name="defaultAlias">The assembly default alias information.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
            <summary>
                Gets default alias information.
            </summary>
            <value>A string containing the default alias information.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyDelaySignAttribute">
            <summary>
                Specifies that the assembly is not fully signed when created.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the AssemblyDelaySignAttribute
                class.
            </summary>
            <param name="delaySign">if set to true, delay sign.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyDelaySignAttribute.DelaySign">
            <summary>
                Gets a value indicating the state of the attribute.
            </summary>
            <value>true if this assembly has been built as delay-signed; otherwise, false..</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyDescriptionAttribute">
            <summary>
                Provides a text description for an assembly.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyDescriptionAttribute
                class.
            </summary>
            <param name="description">The assembly description.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyDescriptionAttribute.Description">
            <summary>
                Gets assembly description information.
            </summary>
            <value>A string containing the assembly description.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyFlagsAttribute">
            <summary>
                Specifies a bitwise combination of Crestron.SimplSharp.Reflection.AssemblyNameFlags flags
                for an assembly, describing just-in-time (JIT) compiler options, whether
                the assembly is retargetable, and whether it has a full or tokenized public
                key. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyFlagsAttribute.#ctor(Crestron.SimplSharp.Reflection.AssemblyNameFlags)">
            <summary>
                Initializes a new instance of the AssemblyFlagsAttribute
                class with the specified combination of AssemblyNameFlags
                flags.
            </summary>
            <param name="assemblyFlags">A bitwise combination of AssemblyNameFlags flags representing
                just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable,
                and whether it has a full or tokenized public key.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
            <summary>
                Gets an integer value representing the combination of AssemblyNameFlags
                flags specified when this attribute instance was created.
            </summary>
            <value>An integer value representing a bitwise combination of AssemblyNameFlags
                flags.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyInformationalVersionAttribute">
            <summary>
                Defines additional version information for an assembly manifest.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyInformationalVersionAttribute
                class.
            </summary>
            <param name="informationalVersion">The assembly version information.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
            <summary>
                Gets version information.
            </summary>
            <value>A string containing the version information.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyKeyFileAttribute">
            <summary>
                Specifies the name of a file containing the key pair used to generate a strong
                name.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyKeyFileAttribute class with the
                name of the file containing the key pair to generate a strong name for the
                assembly being attributed.
            </summary>
            <param name="keyFile">The name of the file containing the key pair.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyKeyFileAttribute.KeyFile">
            <summary>
                Gets the name of the file containing the key pair used to generate a strong
                name for the attributed assembly.
            </summary>
            <value>A string containing the name of the file that contains the key pair.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyKeyNameAttribute">
            <summary>
                Specifies the name of a key container within the CSP containing the key pair
                used to generate a strong name.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyKeyNameAttribute
                class with the name of the container holding the key pair used to generate
                a strong name for the assembly being attributed.
            </summary>
            <param name="keyName">The name of the container containing the key pair.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyKeyNameAttribute.KeyName">
            <summary>
                Gets the name of the container having the key pair that is used to generate
                a strong name for the attributed assembly.
            </summary>
            <value>A string containing the name of the container that has the relevant key pair.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyName">
            <summary>
                Describes an assembly's unique identity in full.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="assemblyName">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.Create(System.Reflection.AssemblyName)">
            <summary>
            Creates an object of AssemblyName if one does not already exist
            </summary>
            <param name="assemblyName">assemblyName</param>
            <returns>AssemblyName</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.#ctor">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.AssemblyName class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.Clone">
            <summary>
                Makes a copy of this AssemblyName object.
            </summary>
            <returns>An object that is a copy of this AssemblyName object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.GetPublicKey">
            <summary>
                Gets the public key of the assembly.
            </summary>
            <returns>An array of type byte containing the public key of the assembly.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.GetPublicKeyToken">
            <summary>
                Gets the public key token, which is the last 8 bytes of the SHA-1 hash of
                the public key under which the application or assembly is signed.
            </summary>
            <returns>An array of type byte containing the public key token.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
            <summary>
                Sets the public key identifying the assembly.
            </summary>
            <param name="publicKey">A byte array containing the public key of the assembly.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
            <summary>
                Sets the public key token, which is the last 8 bytes of the SHA-1 hash of
                the public key under which the application or assembly is signed.
            </summary>
            <param name="publicKeyToken">A byte array containing the public key token of the assembly.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.ToString">
            <summary>
                Returns the full name of the assembly, also known as the display name.
            </summary>
            <returns>A String that is the full name of the assembly, or the class name if the
                full name of the assembly cannot be determined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.Equals(System.Object)">
            <summary>
                Determines if the underlying system type of the current instance is the
                same as the underlying system type of the specified System.Object.
            </summary>
            <param name="o">The System.Object whose underlying system type is to be compared with the
                underlying system type of the current instance.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current instance; otherwise, false. This method also returns
                false if the object specified by the o parameter is not a AssemblyName.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyName.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.CodeBase">
            <summary>
                Gets or sets the location of the assembly as a URL.
            </summary>
            <value>A string that is the URL location of the assembly.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.CultureInfo">
            
             <summary>
                 Gets or sets the culture supported by the assembly.
             </summary>
             <value>A System.Globalization.CultureInfo object representing the culture supported
                 by the assembly.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.Flags">
            
             <summary>
                 Gets or sets the attributes of the assembly.
             </summary>
             <value>An AssemblyNameFlags object representing the attributes
                 of the assembly.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.FullName">
            
             <summary>
                 Gets the full name of the assembly, also known as the display name.
             </summary>
             <value>A string that is the full name of the assembly, also known as the display
                 name.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.HashAlgorithm">
            
             <summary>
                 Gets or sets the hash algorithm used by the assembly manifest.
             </summary>
             <value>An AssemblyHashAlgorithm object representing the hash algorithm used by the
                 assembly manifest.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.Name">
            
             <summary>
                 Gets or sets the simple name of the assembly. This is usually, but not necessarily,
                 the file name of the manifest file of the assembly, minus its extension.
             </summary>
             <value>A String that is the simple name of the assembly.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.Version">
            
             <summary>
                 Gets or sets the major, minor, build, and revision numbers of the assembly.
             </summary>
             <value>A System.Version object representing the major, minor, build, and revision
                 numbers of the assembly.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyName.VersionCompatibility">
            
             <summary>
                 Gets or sets the information related to the assembly's compatibility with
                 other assemblies.
             </summary>
             <value>An AssemblyVersionCompatibility object representing information about the
                 assembly's compatibility with other assemblies.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyHashAlgorithm">
            <summary>
            Specifies all the hash algorithms used for hashing files and for generating the strong name.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyHashAlgorithm.None">
            <summary>
            Indicates no hash algorithm, if 'none' set CLR defaults to SHA1
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyHashAlgorithm.MD5">
            <summary>
            Indicates MD5 hash algorithm
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyHashAlgorithm.SHA1">
            <summary>
            Indicates SHA1 hash algorithm
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyVersionCompatibility">
            <summary>
            Defines the different types of assembly version compatibility.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyVersionCompatibility.SameMachine">
            <summary>
            The assembly cannot execute with other versions if they are on the same machine
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyVersionCompatibility.SameProcess">
            <summary>
            The assembly cannot execute with other versions if they are on the same process
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyVersionCompatibility.SameDomain">
            <summary>
            The assembly cannot execute with other versions if they are on the same application domain
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyNameFlags">
            <summary>
                Provides information about an Crestron.SimplSharp.Reflection.Assembly reference.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyNameFlags.None">
            <summary>
                Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyNameFlags.PublicKey">
            <summary>
                Specifies that a public key is formed from the full public key rather than
                the public key token.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.AssemblyNameFlags.Retargetable">
            <summary>
                Specifies that the assembly can be retargeted at runtime to an assembly from
                a different publisher.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyProductAttribute">
            <summary>
                Defines a product name custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyProductAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.AssemblyProductAttribute
                class.
            </summary>
            <param name="product">The product name information.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyProductAttribute.Product">
            <summary>
                Gets product name information.
            </summary>
            <value>A string containing the product name.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyTitleAttribute">
            <summary>
                Defines an assembly title custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.AssemblyTitleAttribute
                class.
            </summary>
            <param name="title">The assembly title.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyTitleAttribute.Title">
            <summary>
                Gets assembly title information.
            </summary>
            <value> A string containing the assembly title.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyTrademarkAttribute">
            <summary>
                Defines a trademark custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.AssemblyTrademarkAttribute
                class.
            </summary>
            <param name="trademark">The trademark information.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyTrademarkAttribute.Trademark">
            <summary>
                Gets trademark information.
            </summary>
            <value> A String containing trademark information.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.AssemblyVersionAttribute">
            <summary>
                Specifies the version of the assembly being attributed.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the AssemblyVersionAttribute class with the
                version number of the assembly being attributed.
            </summary>
            <param name="version">The version number of the attributed assembly.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.AssemblyVersionAttribute.Version">
            <summary>
                Gets the version number of the attributed assembly.
            </summary>
            <value> A string containing the assembly version number.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.Binder">
            <summary>
                Selects a member from a list of candidates, and performs type conversion
                from actual argument type to formal argument type.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Binder.#ctor">
            <summary>
                Initializes a new instance of the System.Reflection.Binder class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Binder.BindToField(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
             <summary>
                 Selects a field from the given set of fields, based on the specified criteria.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and match contains multiple fields that are equally good matches for value.
                 For example, value contains a MyClass object that implements the IMyClass
                 interface, and match contains a field of type MyClass and a field of type
                 IMyClass.</exception>
            
             <exception cref="T:System.MissingFieldException">
                 For the default binder, bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and match contains no fields that can accept value.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 For the default binder, bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and match is null or an empty array.  -or- bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and value is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of fields that are candidates for matching. For example, when a Crestron.SimplSharp.Reflection.Binder
                 object is used by Overload:CType.InvokeMember, this parameter specifies
                 the set of fields that reflection has determined to be possible matches,
                 typically because they have the correct member name. The default implementation
                 provided by CType.DefaultBinder changes the order of this array.</param>
             <param name="value">The field value used to locate a matching field.</param>
             <param name="culture">An instance of System.Globalization.CultureInfo that is used to control the
                 coercion of data types, in binder implementations that coerce types. If culture
                 is null, the System.Globalization.CultureInfo for the current thread is used.
                  Note: For example, if a binder implementation allows coercion of string
                 values to numeric types, this parameter is necessary to convert a String
                 that represents 1000 to a Double value, because 1000 is represented differently
                 by different cultures. The default binder does not do such string coercions.</param>
             <returns>The matching field.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Binder.BindToMethod(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.MethodBase[],System.Object[]@,Crestron.SimplSharp.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
             <summary>
                 Selects a method to invoke from the given set of methods, based on the supplied
                 arguments.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, match contains multiple methods that are equally
                 good matches for args. For example, args contains a MyClass object that implements
                 the IMyClass interface, and match contains a method that takes MyClass and
                 a method that takes IMyClass.</exception>
            
             <exception cref="T:System.MissingMethodException">
                 For the default binder, match contains no methods that can accept the arguments
                 supplied in args.</exception>
            
             <exception cref="T:System.ArgumentException">
                 For the default binder, match is null or an empty array.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of methods that are candidates for matching. For example, when a
                 Crestron.SimplSharp.Reflection.Binder object is used by Overload:CType.InvokeMember,
                 this parameter specifies the set of methods that reflection has determined
                 to be possible matches, typically because they have the correct member name.
                 The default implementation provided by CType.DefaultBinder changes
                 the order of this array.</param>
             <param name="args">The arguments that are passed in. The binder can change the order of the
                 arguments in this array; for example, the default binder changes the order
                 of arguments if the names parameter is used to specify an order other than
                 positional order. If a binder implementation coerces argument types, the
                 types and values of the arguments can be changed as well.</param>
             <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter
                 signatures in which the types have been modified. The default binder implementation
                 does not use this parameter.</param>
             <param name="culture">An instance of System.Globalization.CultureInfo that is used to control the
                 coercion of data types, in binder implementations that coerce types. If culture
                 is null, the System.Globalization.CultureInfo for the current thread is used.
                 Note: For example, if a binder implementation allows coercion of string values
                 to numeric types, this parameter is necessary to convert a String that represents
                 1000 to a Double value, because 1000 is represented differently by different
                 cultures. The default binder does not do such string coercions.</param>
             <param name="names">The parameter names, if parameter names are to be considered when matching,
                 or null if arguments are to be treated as purely positional. For example,
                 parameter names must be used if arguments are not supplied in positional
                 order.</param>
             <param name="state">After the method returns, state contains a binder-provided object that keeps
                 track of argument reordering. The binder creates this object, and the binder
                 is the sole consumer of this object. If state is not null when BindToMethod
                 returns, you must pass state to the Crestron.SimplSharp.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
                 method if you want to restore args to its original order, for example, so
                 that you can retrieve the values of ref parameters (ByRef parameters in Visual
                 Basic).</param>
             <returns>The matching method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Binder.ChangeType(System.Object,Crestron.SimplSharp.Reflection.CType,System.Globalization.CultureInfo)">
            <summary>
                Changes the type of the given Object to the given Type.
            </summary>
            <param name="value">The object to change into a new Type.</param>
            <param name="type">The new Type that value will become.</param>
            <param name="culture">An instance of System.Globalization.CultureInfo that is used to control the
                coercion of data types. If culture is null, the System.Globalization.CultureInfo
                for the current thread is used.  Note: For example, this parameter is necessary
                to convert a String that represents 1000 to a Double value, because 1000
                is represented differently by different cultures.</param>
            <returns>An object that contains the given value as the new type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
            <summary>
                Upon returning from Crestron.SimplSharp.Reflection.Binder.BindToMethod(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.MethodBase[],System.Object[]@,Crestron.SimplSharp.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@),
                restores the args argument to what it was when it came from BindToMethod.
            </summary>
            <param name="args">The actual arguments that are passed in. Both the types and values of the
                arguments can be changed.</param>
            <param name="state">A binder-provided object that keeps track of argument reordering.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Binder.SelectMethod(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.MethodBase[],Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Selects a method from the given set of methods, based on the argument type.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, match contains multiple methods that are equally
                 good matches for the parameter types described by types. For example, the
                 array in types contains a CType object for MyClass and the array in
                 match contains a method that takes a base class of MyClass and a method that
                 takes an interface that MyClass implements.</exception>
            
             <exception cref="T:System.ArgumentException">
                 For the default binder, match is null or an empty array.  -or- An element
                 of types derives from CType, but is not of type RuntimeType.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of methods that are candidates for matching. For example, when a
                 Crestron.SimplSharp.Reflection.Binder object is used by Overload:CType.InvokeMember,
                 this parameter specifies the set of methods that reflection has determined
                 to be possible matches, typically because they have the correct member name.
                 The default implementation provided by CType.DefaultBinder changes
                 the order of this array.</param>
             <param name="types">The parameter types used to locate a matching method.</param>
             <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter
                 signatures in which the types have been modified.</param>
             <returns>The matching method, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Binder.SelectProperty(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.PropertyInfo[],Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Selects a property from the given set of properties, based on the specified
                 criteria.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, match contains multiple properties that are equally
                 good matches for returnType and indexes.</exception>
            
             <exception cref="T:System.ArgumentException">
                 For the default binder, match is null or an empty array.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of properties that are candidates for matching. For example, when
                 a Crestron.SimplSharp.Reflection.Binder object is used by Overload:CType.InvokeMember,
                 this parameter specifies the set of properties that reflection has determined
                 to be possible matches, typically because they have the correct member name.
                 The default implementation provided by CType.DefaultBinder changes
                 the order of this array.</param>
             <param name="returnType">The return value the matching property must have.</param>
             <param name="indexes">The index types of the property being searched for. Used for index properties
                 such as the indexer for a class.</param>
             <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter
                 signatures in which the types have been modified.</param>
             <returns>The matching property.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.BinderImpl">
            <summary>
                Selects a member from a list of candidates, and performs type conversion
                from actual argument type to formal argument type.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.BinderImpl.BindToField(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
             <summary>
                 Selects a field from the given set of fields, based on the specified criteria.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and match contains multiple fields that are equally good matches for value.
                 For example, value contains a MyClass object that implements the IMyClass
                 interface, and match contains a field of type MyClass and a field of type
                 IMyClass.</exception>
            
             <exception cref="T:System.MissingFieldException">
                 For the default binder, bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and match contains no fields that can accept value.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 For the default binder, bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and match is null or an empty array.  -or- bindingAttr includes Crestron.SimplSharp.Reflection.BindingFlags.SetField,
                 and value is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of fields that are candidates for matching. For example, when a Crestron.SimplSharp.Reflection.Binder
                 object is used by Overload:CType.InvokeMember, this parameter specifies
                 the set of fields that reflection has determined to be possible matches,
                 typically because they have the correct member name. The default implementation
                 provided by CType.DefaultBinder changes the order of this array.</param>
             <param name="value">The field value used to locate a matching field.</param>
             <param name="culture">An instance of System.Globalization.CultureInfo that is used to control the
                 coercion of data types, in binder implementations that coerce types. If culture
                 is null, the System.Globalization.CultureInfo for the current thread is used.
                  Note: For example, if a binder implementation allows coercion of string
                 values to numeric types, this parameter is necessary to convert a String
                 that represents 1000 to a Double value, because 1000 is represented differently
                 by different cultures. The default binder does not do such string coercions.</param>
             <returns>The matching field.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.BinderImpl.BindToMethod(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.MethodBase[],System.Object[]@,Crestron.SimplSharp.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
             <summary>
                 Selects a method to invoke from the given set of methods, based on the supplied
                 arguments.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, match contains multiple methods that are equally
                 good matches for args. For example, args contains a MyClass object that implements
                 the IMyClass interface, and match contains a method that takes MyClass and
                 a method that takes IMyClass.</exception>
            
             <exception cref="T:System.MissingMethodException">
                 For the default binder, match contains no methods that can accept the arguments
                 supplied in args.</exception>
            
             <exception cref="T:System.ArgumentException">
                 For the default binder, match is null or an empty array.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of methods that are candidates for matching. For example, when a
                 Crestron.SimplSharp.Reflection.Binder object is used by Overload:CType.InvokeMember,
                 this parameter specifies the set of methods that reflection has determined
                 to be possible matches, typically because they have the correct member name.
                 The default implementation provided by CType.DefaultBinder changes
                 the order of this array.</param>
             <param name="args">The arguments that are passed in. The binder can change the order of the
                 arguments in this array; for example, the default binder changes the order
                 of arguments if the names parameter is used to specify an order other than
                 positional order. If a binder implementation coerces argument types, the
                 types and values of the arguments can be changed as well.</param>
             <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter
                 signatures in which the types have been modified. The default binder implementation
                 does not use this parameter.</param>
             <param name="culture">An instance of System.Globalization.CultureInfo that is used to control the
                 coercion of data types, in binder implementations that coerce types. If culture
                 is null, the System.Globalization.CultureInfo for the current thread is used.
                 Note: For example, if a binder implementation allows coercion of string values
                 to numeric types, this parameter is necessary to convert a String that represents
                 1000 to a Double value, because 1000 is represented differently by different
                 cultures. The default binder does not do such string coercions.</param>
             <param name="names">The parameter names, if parameter names are to be considered when matching,
                 or null if arguments are to be treated as purely positional. For example,
                 parameter names must be used if arguments are not supplied in positional
                 order.</param>
             <param name="state">After the method returns, state contains a binder-provided object that keeps
                 track of argument reordering. The binder creates this object, and the binder
                 is the sole consumer of this object. If state is not null when BindToMethod
                 returns, you must pass state to the Crestron.SimplSharp.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
                 method if you want to restore args to its original order, for example, so
                 that you can retrieve the values of ref parameters (ByRef parameters in Visual
                 Basic).</param>
             <returns>The matching method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.BinderImpl.ChangeType(System.Object,Crestron.SimplSharp.Reflection.CType,System.Globalization.CultureInfo)">
            <summary>
                Changes the type of the given Object to the given Type.
            </summary>
            <param name="value">The object to change into a new Type.</param>
            <param name="type">The new Type that value will become.</param>
            <param name="culture">An instance of System.Globalization.CultureInfo that is used to control the
                coercion of data types. If culture is null, the System.Globalization.CultureInfo
                for the current thread is used.  Note: For example, this parameter is necessary
                to convert a String that represents 1000 to a Double value, because 1000
                is represented differently by different cultures.</param>
            <returns>An object that contains the given value as the new type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.BinderImpl.ReorderArgumentArray(System.Object[]@,System.Object)">
            <summary>
                Upon returning from Crestron.SimplSharp.Reflection.Binder.BindToMethod(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.MethodBase[],System.Object[]@,Crestron.SimplSharp.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@),
                restores the args argument to what it was when it came from BindToMethod.
            </summary>
            <param name="args">The actual arguments that are passed in. Both the types and values of the
                arguments can be changed.</param>
            <param name="state">A binder-provided object that keeps track of argument reordering.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.BinderImpl.SelectMethod(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.MethodBase[],Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Selects a method from the given set of methods, based on the argument type.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, match contains multiple methods that are equally
                 good matches for the parameter types described by types. For example, the
                 array in types contains a CType object for MyClass and the array in
                 match contains a method that takes a base class of MyClass and a method that
                 takes an interface that MyClass implements.</exception>
            
             <exception cref="T:System.ArgumentException">
                 For the default binder, match is null or an empty array.  -or- An element
                 of types derives from CType, but is not of type RuntimeType.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of methods that are candidates for matching. For example, when a
                 Crestron.SimplSharp.Reflection.Binder object is used by Overload:CType.InvokeMember,
                 this parameter specifies the set of methods that reflection has determined
                 to be possible matches, typically because they have the correct member name.
                 The default implementation provided by CType.DefaultBinder changes
                 the order of this array.</param>
             <param name="types">The parameter types used to locate a matching method.</param>
             <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter
                 signatures in which the types have been modified.</param>
             <returns>The matching method, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.BinderImpl.SelectProperty(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.PropertyInfo[],Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Selects a property from the given set of properties, based on the specified
                 criteria.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 For the default binder, match contains multiple properties that are equally
                 good matches for returnType and indexes.</exception>
            
             <exception cref="T:System.ArgumentException">
                 For the default binder, match is null or an empty array.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="bindingAttr">A bitwise combination of Crestron.SimplSharp.Reflection.BindingFlags values.</param>
             <param name="match">The set of properties that are candidates for matching. For example, when
                 a Crestron.SimplSharp.Reflection.Binder object is used by Overload:CType.InvokeMember,
                 this parameter specifies the set of properties that reflection has determined
                 to be possible matches, typically because they have the correct member name.
                 The default implementation provided by CType.DefaultBinder changes
                 the order of this array.</param>
             <param name="returnType">The return value the matching property must have.</param>
             <param name="indexes">The index types of the property being searched for. Used for index properties
                 such as the indexer for a class.</param>
             <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter
                 signatures in which the types have been modified.</param>
             <returns>The matching property.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.BindingFlags">
            <summary>
                Specifies flags that control binding and the way in which the search for
                members and types is conducted by reflection.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.Default">
            <summary>
                Specifies no binding flag. The default
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.IgnoreCase">
            <summary>
                Specifies that the case of the member name should not be considered when
                binding.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.DeclaredOnly">
            <summary>
                Specifies that only members declared at the level of the supplied type's
                hierarchy should be considered. Inherited members are not considered.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.Instance">
            <summary>
                Specifies that instance members are to be included in the search.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.Static">
            <summary>
                Specifies that static members are to be included in the search.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.Public">
            <summary>
                Specifies that public members are to be included in the search.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.NonPublic">
            <summary>
                Specifies that non-public members are to be included in the search.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.FlattenHierarchy">
            <summary>
                Specifies that public and protected static members up the hierarchy should
                be returned. Private static members in inherited classes are not returned.
                Static members include fields, methods, events, and properties. Nested types
                are not returned.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.InvokeMethod">
            <summary>
                Specifies that a method is to be invoked. This must not be a constructor
                or a type initializer.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.CreateInstance">
            <summary>
                Specifies that SimplSharp.Reflection should create an instance of the specified type.
                Calls the constructor that matches the given arguments. The supplied member
                name is ignored. If the type of lookup is not specified, (Instance | Public)
                will apply. It is not possible to call a type initializer.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.GetField">
            <summary>
                Specifies that the value of the specified field should be returned.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.SetField">
            <summary>
                Specifies that the value of the specified field should be set.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.GetProperty">
            <summary>
                Specifies that the value of the specified property should be returned.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.SetProperty">
            <summary>
                Specifies that the value of the specified property should be set. For COM
                properties, specifying this binding flag is equivalent to specifying PutDispProperty
                and PutRefDispProperty.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.PutDispProperty">
            <summary>
                Specifies that the PROPPUT member on a COM object should be invoked. PROPPUT
                specifies a property-setting function that uses a value. Use PutDispProperty
                if a property has both PROPPUT and PROPPUTREF and you need to distinguish
                which one is called.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.PutRefDispProperty">
            <summary>
                Specifies that the PROPPUTREF member on a COM object should be invoked. PROPPUTREF
                specifies a property-setting function that uses a reference instead of a
                value. Use PutRefDispProperty if a property has both PROPPUT and PROPPUTREF
                and you need to distinguish which one is called.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.ExactBinding">
            <summary>
                Specifies that types of the supplied arguments must exactly match the types
                of the corresponding formal parameters. SimplSharp.Reflection throws an exception if
                the caller supplies a non-null Binder object, since that implies that the
                caller is supplying BindToXXX implementations that will pick the appropriate
                method.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.SuppressChangeType">
            <summary>
                Not implemented.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.OptionalParamBinding">
            <summary>
                Returns the set of members whose parameter count matches the number of supplied
                arguments. This binding flag is used for methods with parameters that have
                default values and methods with variable arguments (varargs). This flag should
                only be used with CType.InvokeMember(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object,System.Object[],Crestron.SimplSharp.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[]).
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.BindingFlags.IgnoreReturn">
            <summary>
                Used in COM interop to specify that the return value of the member can be
                ignored.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.CallingConventions">
            <summary>
                Defines the valid calling conventions for a method.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.CallingConventions.Standard">
            <summary>
                Specifies the default calling convention as determined by the common language
                runtime. Use this calling convention for static methods. For instance or
                virtual methods use HasThis.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.CallingConventions.VarArgs">
            <summary>
                Specifies the calling convention for methods with variable arguments.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.CallingConventions.Any">
            <summary>
                Specifies that either the Standard or the VarArgs calling convention may
                be used.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.CallingConventions.HasThis">
            <summary>
                Specifies an instance or virtual method (not a static method). At run-time,
                the called method is passed a pointer to the target object as its first argument
                (the this pointer). The signature stored in metadata does not include the
                type of this first argument, because the method is known and its owner class
                can be discovered from metadata.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.CallingConventions.ExplicitThis">
            <summary>
                Specifies that the signature is a function-pointer signature, representing
                a call to an instance or virtual method (not a static method). If ExplicitThis
                is set, HasThis must also be set. The first argument passed to the called
                method is still a this pointer, but the type of the first argument is now
                unknown. Therefore, a token that describes the type (or class) of the this
                pointer is explicitly stored into its metadata signature.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.ConstructorInfo">
            <summary>
                Discovers the attributes of a class constructor and provides access to constructor
                metadata. Do not derive from this class.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MethodBase">
            <summary> 
            Provides information about methods and constructors.
            Do not derive from this class. 
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MemberInfo">
            <summary>
                Obtains information about the attributes of a member and provides access
                to member metadata. Do not derive from this class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfo.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfo.Create``1(System.Reflection.MemberInfo)">
            <summary>
            Creates an object of type T if one does not already exist
            </summary>
            <typeparam name="T">The type of result object</typeparam>
            <param name="memberInfo">The base (Inner) object.</param>
            <returns>Object of type T</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfo.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfo.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfo.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfo.ToString">
            <summary>
                Returns the name of the MemberInfo.
            </summary>
            <returns>A String representing the name of MemberInfo.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfo.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfo.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfo.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfo.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodBase.#ctor">
            <summary>
                Initializes a new instance of the System.Reflection.MethodBase class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodBase.GetGenericArguments">
             <summary>
                 Returns an array of CType objects that represent the type arguments
                 of a generic method or the type parameters of a generic method definition.
             </summary>
             <exception cref="T:System.NotSupportedException">
                 The current object is a Crestron.SimplSharp.Reflection.ConstructorInfo. Generic constructors
                 are not supported in the .NET Framework version 2.0. This exception is the
                 default behavior if this method is not overridden in a derived class.</exception>
            
             <returns>An array of CType objects that represent the type arguments of a generic
                 method or the type parameters of a generic method definition. Returns an
                 empty array if the current method is not a generic method..</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
            
             <summary>
                 Gets method information by using the method's internal metadata representation
                 (handle).
             </summary>
             <exception cref="T:System.ArgumentException">handle is invalid.</exception>
             <param name="handle">The method's handle.</param>
             <returns>A MethodBase containing information about the method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
            
             <summary>
                 Gets a System.Reflection.MethodBase object for the constructor or method
                 represented by the specified handle, for the specified generic type.
             </summary>
             <exception cref="T:System.ArgumentException">handle is invalid.</exception>
             <param name="handle">A handle to the internal metadata representation of a constructor or method.</param>
             <param name="declaringType">A handle to the generic type that defines the constructor or method.</param>
             <returns>A System.Reflection.MethodBase object representing the method or constructor
                 specified by handle, in the generic type specified by declaringType.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodBase.GetParameters">
            <summary>
                When overridden in a derived class, gets the parameters of the specified
                method or constructor.
            </summary>
            <returns>An array of type ParameterInfo containing information that matches the signature
                of the method (or constructor) reflected by this MethodBase instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
             <summary>
                 Invokes the method or constructor represented by the current instance, using
                 the specified parameters.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The elements of the parameters array do not match the signature of the method
                 or constructor reflected by this instance.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked method or constructor throws an exception.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The parameters array does not have the correct number of arguments.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have permission to execute the constructor.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 The type that declares the method is an open generic type. That is, the CType.ContainsGenericParameters
                 property returns true for the declaring type.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="obj">The object on which to invoke the method or constructor. If a method is static,
                 this argument is ignored. If a constructor is static, this argument must
                 be null or an instance of the class that defines the constructor.</param>
             <param name="parameters">An argument list for the invoked method or constructor. This is an array
                 of objects with the same number, order, and type as the parameters of the
                 method or constructor to be invoked. If there are no parameters, parameters
                 should be null.  If the method or constructor represented by this instance
                 takes a ref parameter (ByRef in Visual Basic), no special attribute is required
                 for that parameter in order to invoke the method or constructor using this
                 function. Any object in this array that is not explicitly initialized with
                 a value will contain the default value for that object type. For reference-type
                 elements, this value is null. For value-type elements, this value is 0, 0.0,
                 or false, depending on the specific element type.</param>
             <returns>An object containing the return value of the invoked method, or null in the
                 case of a constructor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodBase.Invoke(System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, invokes the reflected method or constructor
                 with the given parameters.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 The type of the parameters parameter does not match the signature of the
                 method or constructor reflected by this instance.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The parameters array does not have the correct number of arguments.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked method or constructor throws an exception.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have permission to execute the constructor.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 The type that declares the method is an open generic type. That is, the CType.ContainsGenericParameters
                 property returns true for the declaring type.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object on which to invoke the method or constructor. If a method is static,
                 this argument is ignored. If a constructor is static, this argument must
                 be null or an instance of the class that defines the constructor.</param>
             <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from Crestron.SimplSharp.Reflection.BindingFlags.
                 If binder is null, this parameter is assigned the value Crestron.SimplSharp.Reflection.BindingFlags.Default;
                 thus, whatever you pass in is ignored.</param>
             <param name="binder">An object that enables the binding, coercion of argument types, invocation
                 of members, and retrieval of MemberInfo objects via reflection. If binder
                 is null, the default binder is used.</param>
             <param name="parameters">An argument list for the invoked method or constructor. This is an array
                 of objects with the same number, order, and type as the parameters of the
                 method or constructor to be invoked. If there are no parameters, this should
                 be null.  If the method or constructor represented by this instance takes
                 a ByRef parameter, there is no special attribute required for that parameter
                 in order to invoke the method or constructor using this function. Any object
                 in this array that is not explicitly initialized with a value will contain
                 the default value for that object type. For reference-type elements, this
                 value is null. For value-type elements, this value is 0, 0.0, or false, depending
                 on the specific element type.</param>
             <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this
                 is null, the CultureInfo for the current thread is used. (This is necessary
                 to convert a String that represents 1000 to a Double value, for example,
                 since 1000 is represented differently by different cultures.)</param>
             <returns>An Object containing the return value of the invoked method, or null in the
                 case of a constructor, or null if the method's return type is void. Before
                 calling the method or constructor, Invoke checks to see if the user has access
                 permission and verify that the parameters are valid.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.Attributes">
            <summary>
                Gets the attributes associated with this method.
            </summary>
            <value>One of the Crestron.SimplSharp.Reflection.MethodAttributes values.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.CallingConvention">
            <summary>
                Gets a value indicating the calling conventions for this method.
            </summary>
            <value>The Crestron.SimplSharp.Reflection.CallingConventions for this method.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.ContainsGenericParameters">
            <summary>
                Gets a value indicating whether the generic method contains unassigned generic
                type parameters.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase object represents a generic
                method that contains unassigned generic type parameters; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsAbstract">
            <summary>
                Gets a value indicating whether the method is abstract.
            </summary>
            <value>true if the method is abstract; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this method or
                constructor is described by Crestron.SimplSharp.Reflection.MethodAttributes.Assembly;
                that is, the method or constructor is visible at most to other types in the
                same assembly, and is not visible to derived types outside the assembly.
            </summary>
            <value>true if the visibility of this method or constructor is exactly described
                by Crestron.SimplSharp.Reflection.MethodAttributes.Assembly; otherwise, false..</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsConstructor">
            <summary>
                Gets a value indicating whether the method is a constructor.
            </summary>
            <value>true if this method is a constructor represented by a Crestron.SimplSharp.Reflection.ConstructorInfo
                object (see note in Remarks about Crestron.SimplSharp.Reflection.Emit.ConstructorBuilder
                objects); otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsFamily">
            <summary>
                Gets a value indicating whether the visibility of this method or constructor
                is described by Crestron.SimplSharp.Reflection.MethodAttributes.Family; that is, the method
                or constructor is visible only within its class and derived classes.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.Family;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsFamilyAndAssembly">
            <summary>
                Gets a value indicating whether the visibility of this method or constructor
                is described by Crestron.SimplSharp.Reflection.MethodAttributes.FamANDAssem; that is,
                the method or constructor can be called by derived classes, but only if they
                are in the same assembly.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.FamANDAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsFamilyOrAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this method or
                constructor is described by Crestron.SimplSharp.Reflection.MethodAttributes.FamORAssem;
                that is, the method or constructor can be called by derived classes wherever
                they are, and by classes in the same assembly.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.FamORAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsFinal">
            <summary>
                Gets a value indicating whether this method is final.
            </summary>
            <value>true if this method is final; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsGenericMethod">
            <summary>
                Gets a value indicating whether the method is generic.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase represents a generic method;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsGenericMethodDefinition">
            <summary>
                Gets a value indicating whether the method is a generic method definition.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase object represents the definition
                of a generic method; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsHideBySig">
            <summary>
                Gets a value indicating whether only a member of the same kind with exactly
                the same signature is hidden in the derived class.
            </summary>
            <value>true if the member is hidden by signature; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsPrivate">
            <summary>
                Gets a value indicating whether this member is private.
            </summary>
            <value>true if access to this method is restricted to other members of the class
                itself; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsPublic">
            <summary>
                Gets a value indicating whether this is a public override method.
            </summary>
            <value>true if this method is public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsSpecialName">
            <summary>
                Gets a value indicating whether this method has a special name.
            </summary>
            <value>true if this method has a special name; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsStatic">
            <summary>
                Gets a value indicating whether the method is static.
            </summary>
            <value>true if this method is static; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.IsVirtual">
            <summary>
                Gets a value indicating whether the method is virtual.
            </summary>
            <value>true if this method is virtual; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodBase.MethodHandle">
            <summary>
                Gets a handle to the internal metadata representation of a method.
            </summary>
            <value>A System.RuntimeMethodHandle object.</value>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ConstructorInfo.ConstructorName">
            <summary>
                Represents the name of the class constructor method as it is stored in metadata.
                This name is always ".ctor". This field is read-only.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ConstructorInfo.TypeConstructorName">
            <summary>
                Represents the name of the type constructor method as it is stored in metadata.
                This name is always ".cctor". This property is read-only.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfo.Invoke(System.Object[])">
             <summary>
                 Invokes the constructor reflected by the instance that has the specified
                 parameters, providing default values for the parameters not commonly used.
             </summary>
             <exception cref="T:System.MemberAccessException">
                 The class is abstract.  -or- The constructor is a class initializer.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The constructor is private or protected, and the caller lacks System.Security.Permissions.ReflectionPermissionFlag.MemberAccess.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The parameters array does not contain values that match the types accepted
                 by this constructor.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked constructor throws an exception.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 An incorrect number of parameters was passed.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 Creation of System.TypedReference, System.ArgIterator, and System.RuntimeArgumentHandle
                 types is not supported.</exception>
            
             <exception cref="T:System.Security.SecurityException">
                 The caller does not have the necessary code access permission.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="parameters">An array of values that matches the number, order and type (under the constraints
                 of the default binder) of the parameters for this constructor. If this constructor
                 takes no parameters, then use either an array with zero elements or null,
                 as in Object[] parameters = new Object[0]. Any object in this array that
                 is not explicitly initialized with a value will contain the default value
                 for that object type. For reference-type elements, this value is null. For
                 value-type elements, this value is 0, 0.0, or false, depending on the specific
                 element type.</param>
             <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfo.Invoke(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When implemented in a derived class, invokes the constructor reflected by
                 this ConstructorInfo with the specified arguments, under the constraints
                 of the specified Binder.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The parameters array does not contain values that match the types accepted
                 by this constructor, under the constraints of the binder.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked constructor throws an exception.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 An incorrect number of parameters was passed.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 Creation of System.TypedReference, System.ArgIterator, and System.RuntimeArgumentHandle</exception>
                 types is not supported.
            
             <exception cref="T:System.Security.SecurityException">
                 The caller does not have the necessary code access permissions.</exception>
            
             <exception cref="T:System.MemberAccessException">
                 The class is abstract.  -or- The constructor is a class initializer.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The constructor is private or protected, and the caller lacks System.Security.Permissions.ReflectionPermissionFlag.MemberAccess.
              </exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding.</param>
             <param name="binder">A Binder that defines a set of properties and enables the binding, coercion
                 of argument types, and invocation of members using reflection. If binder
                 is null, then Binder.DefaultBinding is used.</param>
             <param name="parameters">An array of type Object used to match the number, order and type of the parameters
                 for this constructor, under the constraints of binder. If this constructor
                 does not require parameters, pass an array with zero elements, as in Object[]
                 parameters = new Object[0]. Any object in this array that is not explicitly
                 initialized with a value will contain the default value for that object type.
                 For reference-type elements, this value is null. For value-type elements,
                 this value is 0, 0.0, or false, depending on the specific element type.</param>
             <param name="culture">A System.Globalization.CultureInfo used to govern the coercion of types.
                 If this is null, the System.Globalization.CultureInfo for the current thread
                 is used.</param>
             <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.ConstructorInfoImpl">
            <summary>
                Discovers the attributes of a class constructor and provides access to constructor
                metadata.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="constructorInfo">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.Invoke(System.Object[])">
             <summary>
                 Invokes the constructor reflected by the instance that has the specified
                 parameters, providing default values for the parameters not commonly used.
             </summary>
             <exception cref="T:System.MemberAccessException">
                 The class is abstract.  -or- The constructor is a class initializer.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The constructor is private or protected, and the caller lacks System.Security.Permissions.ReflectionPermissionFlag.MemberAccess.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The parameters array does not contain values that match the types accepted
                 by this constructor.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked constructor throws an exception.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 An incorrect number of parameters was passed.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 Creation of System.TypedReference, System.ArgIterator, and System.RuntimeArgumentHandle
                 types is not supported.</exception>
            
             <exception cref="T:System.Security.SecurityException">
                 The caller does not have the necessary code access permission.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="parameters">An array of values that matches the number, order and type (under the constraints
                 of the default binder) of the parameters for this constructor. If this constructor
                 takes no parameters, then use either an array with zero elements or null,
                 as in Object[] parameters = new Object[0]. Any object in this array that
                 is not explicitly initialized with a value will contain the default value
                 for that object type. For reference-type elements, this value is null. For
                 value-type elements, this value is 0, 0.0, or false, depending on the specific
                 element type.</param>
             <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.Invoke(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When implemented in a derived class, invokes the constructor reflected by
                 this ConstructorInfo with the specified arguments, under the constraints
                 of the specified Binder.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The parameters array does not contain values that match the types accepted
                 by this constructor, under the constraints of the binder.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked constructor throws an exception.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 An incorrect number of parameters was passed.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 Creation of System.TypedReference, System.ArgIterator, and System.RuntimeArgumentHandle</exception>
                 types is not supported.
            
             <exception cref="T:System.Security.SecurityException">
                 The caller does not have the necessary code access permissions.</exception>
            
             <exception cref="T:System.MemberAccessException">
                 The class is abstract.  -or- The constructor is a class initializer.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The constructor is private or protected, and the caller lacks System.Security.Permissions.ReflectionPermissionFlag.MemberAccess.
              </exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding.</param>
             <param name="binder">A Binder that defines a set of properties and enables the binding, coercion
                 of argument types, and invocation of members using reflection. If binder
                 is null, then Binder.DefaultBinding is used.</param>
             <param name="parameters">An array of type Object used to match the number, order and type of the parameters
                 for this constructor, under the constraints of binder. If this constructor
                 does not require parameters, pass an array with zero elements, as in Object[]
                 parameters = new Object[0]. Any object in this array that is not explicitly
                 initialized with a value will contain the default value for that object type.
                 For reference-type elements, this value is null. For value-type elements,
                 this value is 0, 0.0, or false, depending on the specific element type.</param>
             <param name="culture">A System.Globalization.CultureInfo used to govern the coercion of types.
                 If this is null, the System.Globalization.CultureInfo for the current thread
                 is used.</param>
             <returns>An instance of the class associated with the constructor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.GetGenericArguments">
             <summary>
                 Returns an array of CType objects that represent the type arguments
                 of a generic method or the type parameters of a generic method definition.
             </summary>
             <exception cref="T:System.NotSupportedException">
                 The current object is a Crestron.SimplSharp.Reflection.ConstructorInfo. Generic constructors
                 are not supported in the .NET Framework version 2.0. This exception is the
                 default behavior if this method is not overridden in a derived class.</exception>
            
             <returns>An array of CType objects that represent the type arguments of a generic
                 method or the type parameters of a generic method definition. Returns an
                 empty array if the current method is not a generic method..</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.GetParameters">
            <summary>
                When overridden in a derived class, gets the parameters of the specified
                method or constructor.
            </summary>
            <returns>An array of type ParameterInfo containing information that matches the signature
                of the method (or constructor) reflected by this MethodBase instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.Invoke(System.Object,System.Object[])">
             <summary>
                 Invokes the method or constructor represented by the current instance, using
                 the specified parameters.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The elements of the parameters array do not match the signature of the method
                 or constructor reflected by this instance.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked method or constructor throws an exception.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The parameters array does not have the correct number of arguments.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have permission to execute the constructor.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 The type that declares the method is an open generic type. That is, the CType.ContainsGenericParameters
                 property returns true for the declaring type.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="obj">The object on which to invoke the method or constructor. If a method is static,
                 this argument is ignored. If a constructor is static, this argument must
                 be null or an instance of the class that defines the constructor.</param>
             <param name="parameters">An argument list for the invoked method or constructor. This is an array
                 of objects with the same number, order, and type as the parameters of the
                 method or constructor to be invoked. If there are no parameters, parameters
                 should be null.  If the method or constructor represented by this instance
                 takes a ref parameter (ByRef in Visual Basic), no special attribute is required
                 for that parameter in order to invoke the method or constructor using this
                 function. Any object in this array that is not explicitly initialized with
                 a value will contain the default value for that object type. For reference-type
                 elements, this value is null. For value-type elements, this value is 0, 0.0,
                 or false, depending on the specific element type.</param>
             <returns>An object containing the return value of the invoked method, or null in the
                 case of a constructor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.Invoke(System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, invokes the reflected method or constructor
                 with the given parameters.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 The type of the parameters parameter does not match the signature of the
                 method or constructor reflected by this instance.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The parameters array does not have the correct number of arguments.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked method or constructor throws an exception.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have permission to execute the constructor.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 The type that declares the method is an open generic type. That is, the CType.ContainsGenericParameters
                 property returns true for the declaring type.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object on which to invoke the method or constructor. If a method is static,
                 this argument is ignored. If a constructor is static, this argument must
                 be null or an instance of the class that defines the constructor.</param>
             <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from Crestron.SimplSharp.Reflection.BindingFlags.
                 If binder is null, this parameter is assigned the value Crestron.SimplSharp.Reflection.BindingFlags.Default;
                 thus, whatever you pass in is ignored.</param>
             <param name="binder">An object that enables the binding, coercion of argument types, invocation
                 of members, and retrieval of MemberInfo objects via reflection. If binder
                 is null, the default binder is used.</param>
             <param name="parameters">An argument list for the invoked method or constructor. This is an array
                 of objects with the same number, order, and type as the parameters of the
                 method or constructor to be invoked. If there are no parameters, this should
                 be null.  If the method or constructor represented by this instance takes
                 a ByRef parameter, there is no special attribute required for that parameter
                 in order to invoke the method or constructor using this function. Any object
                 in this array that is not explicitly initialized with a value will contain
                 the default value for that object type. For reference-type elements, this
                 value is null. For value-type elements, this value is 0, 0.0, or false, depending
                 on the specific element type.</param>
             <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this
                 is null, the CultureInfo for the current thread is used. (This is necessary
                 to convert a String that represents 1000 to a Double value, for example,
                 since 1000 is represented differently by different cultures.)</param>
             <returns>An Object containing the return value of the invoked method, or null in the
                 case of a constructor, or null if the method's return type is void. Before
                 calling the method or constructor, Invoke checks to see if the user has access
                 permission and verify that the parameters are valid.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.Attributes">
            <summary>
                Gets the attributes associated with this method.
            </summary>
            <value>One of the Crestron.SimplSharp.Reflection.MethodAttributes values.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.CallingConvention">
            <summary>
                Gets a value indicating the calling conventions for this method.
            </summary>
            <value>The Crestron.SimplSharp.Reflection.CallingConventions for this method.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.ContainsGenericParameters">
            <summary>
                Gets a value indicating whether the generic method contains unassigned generic
                type parameters.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase object represents a generic
                method that contains unassigned generic type parameters; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsAbstract">
            <summary>
                Gets a value indicating whether the method is abstract.
            </summary>
            <value>true if the method is abstract; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this method or
                constructor is described by Crestron.SimplSharp.Reflection.MethodAttributes.Assembly;
                that is, the method or constructor is visible at most to other types in the
                same assembly, and is not visible to derived types outside the assembly.
            </summary>
            <value>true if the visibility of this method or constructor is exactly described
                by Crestron.SimplSharp.Reflection.MethodAttributes.Assembly; otherwise, false..</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsConstructor">
            <summary>
                Gets a value indicating whether the method is a constructor.
            </summary>
            <value>true if this method is a constructor represented by a Crestron.SimplSharp.Reflection.ConstructorInfo
                object (see note in Remarks about Crestron.SimplSharp.Reflection.Emit.ConstructorBuilder
                objects); otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsFamily">
            <summary>
                Gets a value indicating whether the visibility of this method or constructor
                is described by Crestron.SimplSharp.Reflection.MethodAttributes.Family; that is, the method
                or constructor is visible only within its class and derived classes.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.Family;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsFamilyAndAssembly">
            <summary>
                Gets a value indicating whether the visibility of this method or constructor
                is described by Crestron.SimplSharp.Reflection.MethodAttributes.FamANDAssem; that is,
                the method or constructor can be called by derived classes, but only if they
                are in the same assembly.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.FamANDAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsFamilyOrAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this method or
                constructor is described by Crestron.SimplSharp.Reflection.MethodAttributes.FamORAssem;
                that is, the method or constructor can be called by derived classes wherever
                they are, and by classes in the same assembly.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.FamORAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsFinal">
            <summary>
                Gets a value indicating whether this method is final.
            </summary>
            <value>true if this method is final; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsGenericMethod">
            <summary>
                Gets a value indicating whether the method is generic.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase represents a generic method;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsGenericMethodDefinition">
            <summary>
                Gets a value indicating whether the method is a generic method definition.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase object represents the definition
                of a generic method; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsHideBySig">
            <summary>
                Gets a value indicating whether only a member of the same kind with exactly
                the same signature is hidden in the derived class.
            </summary>
            <value>true if the member is hidden by signature; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsPrivate">
            <summary>
                Gets a value indicating whether this member is private.
            </summary>
            <value>true if access to this method is restricted to other members of the class
                itself; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsPublic">
            <summary>
                Gets a value indicating whether this is a public override method.
            </summary>
            <value>true if this method is public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsSpecialName">
            <summary>
                Gets a value indicating whether this method has a special name.
            </summary>
            <value>true if this method has a special name; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsStatic">
            <summary>
                Gets a value indicating whether the method is static.
            </summary>
            <value>true if this method is static; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.IsVirtual">
            <summary>
                Gets a value indicating whether the method is virtual.
            </summary>
            <value>true if this method is virtual; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ConstructorInfoImpl.MethodHandle">
            <summary>
                Gets a handle to the internal metadata representation of a method.
            </summary>
            <value>A System.RuntimeMethodHandle object.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.CustomAttributeFormatException">
            <summary>
                The exception that is thrown when the binary format of a custom attribute
                is invalid.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.CustomAttributeFormatException
                class with a specified error message and a reference to the inner exception
                that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter
                is not null, the current exception is raised in a catch block that handles
                the inner exception.</param>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.DefaultMemberAttribute">
            <summary>
                Defines the member of a type that is the default member used by CType.InvokeMember(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object,System.Object[],Crestron.SimplSharp.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[]).
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.DefaultMemberAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.DefaultMemberAttribute
                class.
            </summary>
            <param name="memberName">A String containing the name of the member to invoke. This may be a constructor,
                method, property, or field. A suitable invocation attribute must be specified
                when the member is invoked. The default member of a class can be specified
                by passing an empty String as the name of the member.  The default member
                of a type is marked with the DefaultMemberAttribute custom attribute or marked
                in COM in the usual way..</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.DefaultMemberAttribute.MemberName">
            <summary>
                Gets the name from the attribute.
            </summary>
            <value>A string representing the member name.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.EventAttributes">
            <summary>
                Specifies the attributes of an event.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.EventAttributes.None">
            <summary>
                Specifies that the event has no attributes.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.EventAttributes.SpecialName">
            <summary>
                Specifies that the event is special in a way described by the name.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.EventAttributes.RTSpecialName">
            <summary>
                Specifies that the common language runtime should check name encoding.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.EventInfo">
            <summary>
                Discovers the attributes of an event and provides access to event metadata.
            Do not derive from this class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.#ctor">
            <summary>
                Initializes a new instance of the EventInfo class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
             <summary>
                 Adds an event handler to an event source.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The event does not have a public add accessor.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The handler that was passed in cannot be used.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have access permission to the member.</exception>
            
             <param name="target">The event source.</param>
             <param name="handler">Encapsulates a method or methods to be invoked when the event is raised by
                 the target.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.GetAddMethod">
            <summary>
                Returns the method used to add an event handler delegate to the event source.
            </summary>
            <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to add
                an event handler delegate to the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.GetAddMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, retrieves the MethodInfo object for the
                 Crestron.SimplSharp.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)
                 method of the event, specifying whether to return non-public methods.
             </summary>
             <exception cref="T:System.MethodAccessException">
                 nonPublic is true, the method used to add an event handler delegate is non-public,
                 and the caller does not have permission to reflect on non-public methods.</exception>
            
             <param name="nonPublic">true if non-public methods can be returned; otherwise, false.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to add
                 an event handler delegate to the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.GetRaiseMethod">
            <summary>
                Returns the method that is called when the event is raised.
            </summary>
            <returns>The method that is called when the event is raised.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns the method that is called when
                 the event is raised, specifying whether to return non-public methods.
             </summary>
             <exception cref="T:System.MethodAccessException">
                 nonPublic is true, the method used to add an event handler delegate is non-public,
                 and the caller does not have permission to reflect on non-public methods.</exception>
            
             <param name="nonPublic">true if non-public methods can be returned; otherwise, false.</param>
             <returns>A MethodInfo object that was called when the event was raised.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.GetRemoveMethod">
            <summary>
                Returns the method used to remove an event handler delegate from the event
                source.
            </summary>
            <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to remove
                an event handler delegate from the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, retrieves the MethodInfo object for removing
                 a method of the event, specifying whether to return non-public methods.
             </summary>
             <exception cref="T:System.MethodAccessException">
                 nonPublic is true, the method used to add an event handler delegate is non-public,
                 and the caller does not have permission to reflect on non-public methods.</exception>
            
             <param name="nonPublic">true if non-public methods can be returned; otherwise, false.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to remove
                 an event handler delegate from the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
             <summary>
                 Removes an event handler from an event source.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The event does not have a public remove accessor.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The handler that was passed in cannot be used.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have access permission to the member.</exception>
            
             <param name="target">The event source.</param>
             <param name="handler">The delegate to be disassociated from the events raised by target.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfo.Attributes">
            <summary>
                Gets the attributes for this event.
            </summary>
            <value>The read-only attributes for this event.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfo.EventHandlerType">
            <summary>
                Gets the Type object of the underlying event-handler delegate associated
                with this event.
            </summary>
            <exception cref="T:System.Security.SecurityException">
                The caller does not have the required permission.</exception>
            <value>A read-only Type object representing the delegate event handler.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfo.IsMulticast">
            <summary>
                Gets a value indicating whether the event is multicast.
            </summary>
            <exception cref="T:System.Security.SecurityException">
                The caller does not have the required permission.</exception>
            <value>true if the delegate is an instance of a multicast delegate; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfo.IsSpecialName">
            <summary>
                Gets a value indicating whether the EventInfo has a name with a special meaning.
            </summary>
            <value>true if this event has a special name; otherwise, false.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.EventInfoImpl">
            <summary>
                Discovers the attributes of an event and provides access to event metadata.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.#ctor(System.Reflection.EventInfo)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="eventInfo">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.AddEventHandler(System.Object,System.Delegate)">
             <summary>
                 Adds an event handler to an event source.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The event does not have a public add accessor.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The handler that was passed in cannot be used.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have access permission to the member.</exception>
            
             <param name="target">The event source.</param>
             <param name="handler">Encapsulates a method or methods to be invoked when the event is raised by
                 the target.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetAddMethod">
            <summary>
                Returns the method used to add an event handler delegate to the event source.
            </summary>
            <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to add
                an event handler delegate to the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetAddMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, retrieves the MethodInfo object for the
                 Crestron.SimplSharp.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)
                 method of the event, specifying whether to return non-public methods.
             </summary>
             <exception cref="T:System.MethodAccessException">
                 nonPublic is true, the method used to add an event handler delegate is non-public,
                 and the caller does not have permission to reflect on non-public methods.</exception>
            
             <param name="nonPublic">true if non-public methods can be returned; otherwise, false.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to add
                 an event handler delegate to the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetRaiseMethod">
            <summary>
                Returns the method that is called when the event is raised.
            </summary>
            <returns>The method that is called when the event is raised.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetRaiseMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns the method that is called when
                 the event is raised, specifying whether to return non-public methods.
             </summary>
             <exception cref="T:System.MethodAccessException">
                 nonPublic is true, the method used to add an event handler delegate is non-public,
                 and the caller does not have permission to reflect on non-public methods.</exception>
            
             <param name="nonPublic">true if non-public methods can be returned; otherwise, false.</param>
             <returns>A MethodInfo object that was called when the event was raised.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetRemoveMethod">
            <summary>
                Returns the method used to remove an event handler delegate from the event
                source.
            </summary>
            <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to remove
                an event handler delegate from the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetRemoveMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, retrieves the MethodInfo object for removing
                 a method of the event, specifying whether to return non-public methods.
             </summary>
             <exception cref="T:System.MethodAccessException">
                 nonPublic is true, the method used to add an event handler delegate is non-public,
                 and the caller does not have permission to reflect on non-public methods.</exception>
            
             <param name="nonPublic">true if non-public methods can be returned; otherwise, false.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method used to remove
                 an event handler delegate from the event source.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.RemoveEventHandler(System.Object,System.Delegate)">
             <summary>
                 Removes an event handler from an event source.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The event does not have a public remove accessor.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The handler that was passed in cannot be used.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have access permission to the member.</exception>
            
             <param name="target">The event source.</param>
             <param name="handler">The delegate to be disassociated from the events raised by target.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.EventInfoImpl.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.Attributes">
            <summary>
                Gets the attributes for this event.
            </summary>
            <value>The read-only attributes for this event.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.EventHandlerType">
            <summary>
                Gets the Type object of the underlying event-handler delegate associated
                with this event.
            </summary>
            <exception cref="T:System.Security.SecurityException">
                The caller does not have the required permission.</exception>
            <value>A read-only Type object representing the delegate event handler.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.IsMulticast">
            <summary>
                Gets a value indicating whether the event is multicast.
            </summary>
            <exception cref="T:System.Security.SecurityException">
                The caller does not have the required permission.</exception>
            <value>true if the delegate is an instance of a multicast delegate; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.IsSpecialName">
            <summary>
                Gets a value indicating whether the EventInfo has a name with a special meaning.
            </summary>
            <value>true if this event has a special name; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.EventInfoImpl.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.FieldAttributes">
            <summary>
                Specifies flags that describe the attributes of a field.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.PrivateScope">
            <summary>
                Specifies that the field cannot be referenced.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.Private">
            <summary>
                Specifies that the field is accessible only by the parent type.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.FamANDAssem">
            <summary>
                Specifies that the field is accessible only by subtypes in this assembly.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.Assembly">
            <summary>
                Specifies that the field is accessible throughout the assembly.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.Family">
            <summary>
                Specifies that the field is accessible only by type and subtypes.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.FamORAssem">
            <summary>
                Specifies that the field is accessible by subtypes anywhere, as well as throughout
                this assembly.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.Public">
            <summary>
                Specifies that the field is accessible by any member for whom this scope
                is visible.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.FieldAccessMask">
            <summary>
                Specifies the access level of a given field.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.Static">
            <summary>
                Specifies that the field represents the defined type, or else it is per-instance.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.InitOnly">
            <summary>
                Specifies that the field is initialized only, and cannot be written after
                initialization.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.Literal">
            <summary>
                Specifies that the field's value is a compile-time (static or early bound)
                constant. The field can be set only from a constructor; any other attempt
                to set it throws System.FieldAccessException.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.NotSerialized">
            <summary>
                Specifies that the field does not have to be serialized when the type is
                remoted.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.HasFieldRVA">
            <summary>
                Specifies that the field has a relative virtual address (RVA). The RVA is
                the location of the method body in the current image, as an address relative
                to the start of the image file in which it is located.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.SpecialName">
            <summary>
                Specifies a special method, with the name describing how the method is special.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.RTSpecialName">
            <summary>
                Specifies that the common language runtime (metadata internal APIs) should
                check the name encoding.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.HasFieldMarshal">
            <summary>
                Specifies that the field has marshaling information.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.PinvokeImpl">
            <summary>
                Reserved for future use.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.HasDefault">
            <summary>
                Specifies that the field has a default value.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.FieldAttributes.ReservedMask">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.FieldInfo">
            <summary>
                Discovers the attributes of a field and provides access to field metadata.
            Do not derive from this class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfo.#ctor">
            <summary>
                Initializes a new instance of the FieldInfo class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
             <summary>
                 Gets a Crestron.SimplSharp.Reflection.FieldInfo for the field represented by the specified
                 handle.
             </summary>
             <exception cref="T:System.ArgumentException">
                 handle is invalid.</exception>
            
             <param name="handle">A System.RuntimeFieldHandle structure that contains the handle to the internal
                 metadata representation of a field.</param>
             <returns>A Crestron.SimplSharp.Reflection.FieldInfo object representing the field specified by
                 handle.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfo.GetValue(System.Object)">
             <summary>
                 When overridden in a derived class, returns the value of a field supported
                 by a given object.
             </summary>
            
             <exception cref="T:System.NotSupportedException">
                 A field is marked literal, but the field does not have one of the accepted
                 literal types.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The method is neither declared nor inherited by the class of obj.</exception>
            
             <param name="obj">The object whose field value will be returned.</param>
             <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
             <summary>
                 Sets the value of the field supported by the given object.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 The field does not exist on the object.  -or- The value parameter cannot
                 be converted and stored in the field.</exception>
            
             <param name="obj">The object whose field value will be set.</param>
             <param name="value">The value to assign to the field.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfo.SetValue(System.Object,System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, sets the value of the field supported
                 by the given object.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The field does not exist on the object.  -or- The value parameter cannot
                 be converted and stored in the field.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object whose field value will be set.</param>
             <param name="value">The value to assign to the field.</param>
             <param name="invokeAttr"> A field of Binder that specifies the type of binding that is desired (for
                 example, Binder.CreateInstance or Binder.ExactBinding).</param>
             <param name="binder">A set of properties that enables the binding, coercion of argument types,
                 and invocation of members through reflection. If binder is null, then Binder.DefaultBinding
                 is used.</param>
             <param name="culture">The software preferences of a particular culture.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.Attributes">
            <summary>
                Gets the attributes associated with this field.
            </summary>
            <value>The FieldAttributes for this field.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.FieldHandle">
            <summary>
                Gets a RuntimeFieldHandle, which is a handle to the internal metadata representation
                of a field.
            </summary>
            <value>A handle to the internal metadata representation of a field.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.FieldType">
            <summary>
                Gets the type of this field object.
            </summary>
            <value>The type of the field object.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this field is
                described by Crestron.SimplSharp.Reflection.FieldAttributes.Assembly; that is, the field
                is visible at most to other types in the same assembly, and is not visible
                to derived types outside the assembly.
            </summary>
            <value>true if the visibility of this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.Assembly;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsFamily">
            <summary>
                Gets a value indicating whether the visibility of this field is described
                by Crestron.SimplSharp.Reflection.FieldAttributes.Family; that is, the field is visible
                only within its class and derived classes.
            </summary>
            <value>true if access to this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.Family;
                otherwise, false..</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsFamilyAndAssembly">
            <summary>
                Gets a value indicating whether the visibility of this field is described
                by Crestron.SimplSharp.Reflection.FieldAttributes.FamANDAssem; that is, the field can
                be accessed from derived classes, but only if they are in the same assembly.
            </summary>
            <value>true if access to this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.FamANDAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsFamilyOrAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this field is
                described by Crestron.SimplSharp.Reflection.FieldAttributes.FamORAssem; that is, the field
                can be accessed by derived classes wherever they are, and by classes in the
                same assembly.
            </summary>
            <value>true if access to this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.FamORAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsInitOnly">
            <summary>
                Gets a value indicating whether the field can only be set in the body of
                the constructor.
            </summary>
            <value>true if the field has the InitOnly attribute set; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsLiteral">
            <summary>
                Gets a value indicating whether the value is written at compile time and
                cannot be changed.
            </summary>
            <value>true if the field has the Literal attribute set; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsNotSerialized">
            <summary>
                Gets a value indicating whether this field has the NotSerialized attribute.
            </summary>
            <value>true if the field has the NotSerialized attribute set; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsPinvokeImpl">
            <summary>
                Gets a value indicating whether the corresponding PinvokeImpl attribute is
                set in Crestron.SimplSharp.Reflection.FieldAttributes.
            </summary>
            <value>true if the PinvokeImpl attribute is set in Crestron.SimplSharp.Reflection.FieldAttributes;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsPrivate">
            <summary>
                Gets a value indicating whether the field is private.
            </summary>
            <value>true if the field is private; otherwise; false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsPublic">
            <summary>
                Gets a value indicating whether the field is public.
            </summary>
            <value>true if this field is public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsSpecialName">
            <summary>
                Gets a value indicating whether the corresponding SpecialName attribute is
                set in the Crestron.SimplSharp.Reflection.FieldAttributes enumerator.
            </summary>
            <value>true if the SpecialName attribute is set in Crestron.SimplSharp.Reflection.FieldAttributes;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfo.IsStatic">
            <summary>
                Gets a value indicating whether the field is static.
            </summary>
            <value>true if this field is static; otherwise, false.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.FieldInfoImpl">
            <summary>
                Discovers the attributes of a field and provides access to field metadata.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="fieldInfo">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.GetValue(System.Object)">
             <summary>
                 When overridden in a derived class, returns the value of a field supported
                 by a given object.
             </summary>
            
             <exception cref="T:System.NotSupportedException">
                 A field is marked literal, but the field does not have one of the accepted
                 literal types.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The method is neither declared nor inherited by the class of obj.</exception>
            
             <param name="obj">The object whose field value will be returned.</param>
             <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.SetValue(System.Object,System.Object)">
             <summary>
                 Sets the value of the field supported by the given object.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 The field does not exist on the object.  -or- The value parameter cannot
                 be converted and stored in the field.</exception>
            
             <param name="obj">The object whose field value will be set.</param>
             <param name="value">The value to assign to the field.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.SetValue(System.Object,System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, sets the value of the field supported
                 by the given object.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The field does not exist on the object.  -or- The value parameter cannot
                 be converted and stored in the field.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object whose field value will be set.</param>
             <param name="value">The value to assign to the field.</param>
             <param name="invokeAttr"> A field of Binder that specifies the type of binding that is desired (for
                 example, Binder.CreateInstance or Binder.ExactBinding).</param>
             <param name="binder">A set of properties that enables the binding, coercion of argument types,
                 and invocation of members through reflection. If binder is null, then Binder.DefaultBinding
                 is used.</param>
             <param name="culture">The software preferences of a particular culture.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.Attributes">
            <summary>
                Gets the attributes associated with this field.
            </summary>
            <value>The FieldAttributes for this field.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.FieldHandle">
            <summary>
                Gets a RuntimeFieldHandle, which is a handle to the internal metadata representation
                of a field.
            </summary>
            <value>A handle to the internal metadata representation of a field.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.FieldType">
            <summary>
                Gets the type of this field object.
            </summary>
            <value>The type of the field object.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this field is
                described by Crestron.SimplSharp.Reflection.FieldAttributes.Assembly; that is, the field
                is visible at most to other types in the same assembly, and is not visible
                to derived types outside the assembly.
            </summary>
            <value>true if the visibility of this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.Assembly;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsFamily">
            <summary>
                Gets a value indicating whether the visibility of this field is described
                by Crestron.SimplSharp.Reflection.FieldAttributes.Family; that is, the field is visible
                only within its class and derived classes.
            </summary>
            <value>true if access to this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.Family;
                otherwise, false..</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsFamilyAndAssembly">
            <summary>
                Gets a value indicating whether the visibility of this field is described
                by Crestron.SimplSharp.Reflection.FieldAttributes.FamANDAssem; that is, the field can
                be accessed from derived classes, but only if they are in the same assembly.
            </summary>
            <value>true if access to this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.FamANDAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsFamilyOrAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this field is
                described by Crestron.SimplSharp.Reflection.FieldAttributes.FamORAssem; that is, the field
                can be accessed by derived classes wherever they are, and by classes in the
                same assembly.
            </summary>
            <value>true if access to this field is exactly described by Crestron.SimplSharp.Reflection.FieldAttributes.FamORAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsInitOnly">
            <summary>
                Gets a value indicating whether the field can only be set in the body of
                the constructor.
            </summary>
            <value>true if the field has the InitOnly attribute set; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsLiteral">
            <summary>
                Gets a value indicating whether the value is written at compile time and
                cannot be changed.
            </summary>
            <value>true if the field has the Literal attribute set; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsNotSerialized">
            <summary>
                Gets a value indicating whether this field has the NotSerialized attribute.
            </summary>
            <value>true if the field has the NotSerialized attribute set; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsPinvokeImpl">
            <summary>
                Gets a value indicating whether the corresponding PinvokeImpl attribute is
                set in Crestron.SimplSharp.Reflection.FieldAttributes.
            </summary>
            <value>true if the PinvokeImpl attribute is set in Crestron.SimplSharp.Reflection.FieldAttributes;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsPrivate">
            <summary>
                Gets a value indicating whether the field is private.
            </summary>
            <value>true if the field is private; otherwise; false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsPublic">
            <summary>
                Gets a value indicating whether the field is public.
            </summary>
            <value>true if this field is public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsSpecialName">
            <summary>
                Gets a value indicating whether the corresponding SpecialName attribute is
                set in the Crestron.SimplSharp.Reflection.FieldAttributes enumerator.
            </summary>
            <value>true if the SpecialName attribute is set in Crestron.SimplSharp.Reflection.FieldAttributes;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.IsStatic">
            <summary>
                Gets a value indicating whether the field is static.
            </summary>
            <value>true if this field is static; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.FieldInfoImpl.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.CustomAttributeProviderConversionClass">
            <summary>
            Class to convert from System.Reflection.ICustomAttributeProvider to Crestron.SimplSharp.Reflection.ICustomAttributeProvider
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CustomAttributeProviderConversionClass.GetCustomAttributes(System.Boolean)">
             <summary>
                 Returns an array of all of the custom attributes defined on this member,
                 excluding named attributes, or an empty array if there are no custom attributes.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 The custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 There is more than one attribute of type attributeType defined on this member.</exception>
            
             <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
             <returns>An array of Objects representing custom attributes, or an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CustomAttributeProviderConversionClass.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Returns an array of custom attributes defined on this member, identified
                 by type, or an empty array if there are no custom attributes of that type.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 The custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 There is more than one attribute of type attributeType defined on this member.</exception>
            
             <param name="attributeType">The type of the custom attributes.</param>
             <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
             <returns>An array of Objects representing custom attributes, or an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CustomAttributeProviderConversionClass.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                Indicates whether one or more instance of attributeType is defined on this
                member.
            </summary>
            <param name="attributeType">The type of the custom attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>true if the attributeType is defined on this member; false otherwise.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MemberInfoImpl">
            <summary>
                Obtains information about the attributes of a member and provides access
                to member metadata.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfoImpl.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="memberinfo">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfoImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfoImpl.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfoImpl.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MemberInfoImpl.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfoImpl.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfoImpl.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfoImpl.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MemberInfoImpl.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MemberTypes">
            <summary>
                Marks each type of member that is defined as a derived class of MemberInfo.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.Constructor">
            <summary>
                Specifies that the member is a constructor, representing a Crestron.SimplSharp.Reflection.ConstructorInfo
                member. Hexadecimal value of 0x01.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.Event">
            <summary>
                Specifies that the member is an event, representing an Crestron.SimplSharp.Reflection.EventInfo
                member. Hexadecimal value of 0x02.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.Field">
            <summary>
                Specifies that the member is a field, representing a Crestron.SimplSharp.Reflection.FieldInfo
                member. Hexadecimal value of 0x04.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.Method">
            <summary>
                Specifies that the member is a method, representing a Crestron.SimplSharp.Reflection.MethodInfo
                member. Hexadecimal value of 0x08.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.Property">
            <summary>
                Specifies that the member is a property, representing a Crestron.SimplSharp.Reflection.PropertyInfo
                member. Hexadecimal value of 0x10.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.TypeInfo">
            <summary>
                Specifies that the member is a type, representing a Crestron.SimplSharp.Reflection.MemberTypes.TypeInfo
                member. Hexadecimal value of 0x20.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.Custom">
            <summary>
                Specifies that the member is a custom member type. Hexadecimal value of 0x40.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.NestedType">
            <summary>
                Specifies that the member is a nested type, extending Crestron.SimplSharp.Reflection.MemberInfo.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MemberTypes.All">
            <summary>
                Specifies all member types.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MethodAttributes">
            <summary>
                Specifies flags for method attributes. These flags are defined in the corhdr.h
                file.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.PrivateScope">
            <summary>
                Indicates that the member cannot be referenced.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Private">
            <summary>
                Indicates that the method is accessible only to the current class.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.FamANDAssem">
            <summary>
                Indicates that the method is accessible to members of this type and its derived
                types that are in this assembly only.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Assembly">
            <summary>
                Indicates that the method is accessible to any class of this assembly.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Family">
            <summary>
                Indicates that the method is accessible only to members of this class and
                its derived classes.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.FamORAssem">
            <summary>
                Indicates that the method is accessible to derived classes anywhere, as well
                as to any class in the assembly.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Public">
            <summary>
                Indicates that the method is accessible to any object for which this object
                is in scope.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.MemberAccessMask">
            <summary>
                Retrieves accessibility information.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.UnmanagedExport">
            <summary>
                Indicates that the managed method is exported by thunk to unmanaged code.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Static">
            <summary>
                Indicates that the method is defined on the type; otherwise, it is defined
                per instance.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Final">
            <summary>
                Indicates that the method cannot be overridden.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Virtual">
            <summary>
                Indicates that the method is virtual.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.HideBySig">
            <summary>
                Indicates that the method hides by name and signature; otherwise, by name
                only.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.NewSlot">
            <summary>
                Indicates that the method always gets a new slot in the vtable.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.Abstract">
            <summary>
                Indicates that the class does not provide an implementation of this method.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.SpecialName">
            <summary>
                Indicates that the method is special. The name describes how this method
                is special.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.RTSpecialName">
            <summary>
                Indicates that the common language runtime checks the name encoding.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.PinvokeImpl">
            <summary>
                Indicates that the method implementation is forwarded through PInvoke (Platform
                Invocation Services).
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.HasSecurity">
            <summary>
                Indicates that the method has security associated with it. Reserved flag
                for runtime use only.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.RequireSecObject">
            <summary>
                Indicates that the method calls another method containing security code.
                Reserved flag for runtime use only.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodAttributes.ReservedMask">
            <summary>
                Indicates a reserved flag for runtime use only.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MethodImplAttributes">
            <summary>
                Specifies flags for the attributes of a method implementation.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.Managed">
            <summary>
                Specifies that the method is implemented in managed code.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.Native">
            <summary>
                Specifies that the method implementation is native.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.OPTIL">
            <summary>
                Specifies that the method implementation is in Optimized Intermediate Language
                (OPTIL).
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.Runtime">
            <summary>
                Specifies that the method implementation is provided by the runtime.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.Unmanaged">
            <summary>
                Specifies that the method is implemented in unmanaged code.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.NoInlining">
            <summary>
                Specifies that the method cannot be inlined.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.ForwardRef">
            <summary>
                Specifies that the method is not defined.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.Synchronized">
            <summary>
                Specifies that the method is single-threaded through the body. Static methods
                (Shared in Visual Basic) lock on the type, whereas instance methods lock
                on the instance. You can also use the C# lock statement or the Visual Basic
                Lock function for this purpose.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.PreserveSig">
            <summary>
                Specifies that the method signature is exported exactly as declared.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.InternalCall">
            <summary>
                Specifies an internal call.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.MethodImplAttributes.MaxMethodImplVal">
            <summary>
                Specifies a range check value.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MethodInfo">
            <summary>
                Discovers the attributes of a method and provides access to method metadata.
            Do not derive from this class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfo.#ctor">
            <summary>
                Initializes a new instance of the System.Reflection.MethodInfo class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfo.GetBaseDefinition">
            <summary>
                When overridden in a derived class, returns the MethodInfo object for the
                method on the direct or indirect base class in which the method represented
                by this instance was first declared.
            </summary>
            <returns>A MethodInfo object for the first implementation of this method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfo.GetGenericMethodDefinition">
             <summary>
                 Returns a Crestron.SimplSharp.Reflection.MethodInfo object that represents a generic method
                 definition from which the current method can be constructed.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The current method is not a generic method. That is, Crestron.SimplSharp.Reflection.MethodInfo.IsGenericMethod
                 returns false.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 This method is not supported.</exception>
             
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing a generic method definition
                 from which the current method can be constructed.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfo.MakeGenericMethod(Crestron.SimplSharp.Reflection.CType[])">
             <summary>
                 Substitutes the elements of an array of types for the type parameters of
                 the current generic method definition, and returns a Crestron.SimplSharp.Reflection.MethodInfo
                 object representing the resulting constructed method.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The current Crestron.SimplSharp.Reflection.MethodInfo does not represent a generic method
                 definition. That is, Crestron.SimplSharp.Reflection.MethodInfo.IsGenericMethodDefinition
                 returns false.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 typeArguments is null.  -or- Any element of typeArguments is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The number of elements in typeArguments is not the same as the number of
                 type parameters of the current generic method definition.  -or- An element
                 of typeArguments does not satisfy the constraints specified for the corresponding
                 type parameter of the current generic method definition.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 This method is not supported.</exception>
            
             <param name="typeArguments">An array of types to be substituted for the type parameters of the current
                 generic method definition.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object that represents the constructed method
                 formed by substituting the elements of typeArguments for the type parameters
                 of the current generic method definition.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfo.ReturnType">
            <summary>
                Gets the return type of this method.
            </summary>
            <value>The return type of this method.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfo.ReturnTypeCustomAttributes">
            <summary>
                Gets the custom attributes for the return type.
            </summary>
            <value>An ICustomAttributeProvider object representing the custom attributes for
                the return type.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.MethodInfoImpl">
            <summary>
                Discovers the attributes of a method and provides access to method metadata.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="methodInfo">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.GetBaseDefinition">
            <summary>
                When overridden in a derived class, returns the MethodInfo object for the
                method on the direct or indirect base class in which the method represented
                by this instance was first declared.
            </summary>
            <returns>A MethodInfo object for the first implementation of this method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.GetGenericMethodDefinition">
             <summary>
                 Returns a Crestron.SimplSharp.Reflection.MethodInfo object that represents a generic method
                 definition from which the current method can be constructed.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The current method is not a generic method. That is, Crestron.SimplSharp.Reflection.MethodInfo.IsGenericMethod
                 returns false.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 This method is not supported.</exception>
             
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing a generic method definition
                 from which the current method can be constructed.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.MakeGenericMethod(Crestron.SimplSharp.Reflection.CType[])">
             <summary>
                 Substitutes the elements of an array of types for the type parameters of
                 the current generic method definition, and returns a Crestron.SimplSharp.Reflection.MethodInfo
                 object representing the resulting constructed method.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The current Crestron.SimplSharp.Reflection.MethodInfo does not represent a generic method
                 definition. That is, Crestron.SimplSharp.Reflection.MethodInfo.IsGenericMethodDefinition
                 returns false.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 typeArguments is null.  -or- Any element of typeArguments is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The number of elements in typeArguments is not the same as the number of
                 type parameters of the current generic method definition.  -or- An element
                 of typeArguments does not satisfy the constraints specified for the corresponding
                 type parameter of the current generic method definition.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 This method is not supported.</exception>
            
             <param name="typeArguments">An array of types to be substituted for the type parameters of the current
                 generic method definition.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object that represents the constructed method
                 formed by substituting the elements of typeArguments for the type parameters
                 of the current generic method definition.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.GetGenericArguments">
             <summary>
                 Returns an array of CType objects that represent the type arguments
                 of a generic method or the type parameters of a generic method definition.
             </summary>
             <exception cref="T:System.NotSupportedException">
                 The current object is a Crestron.SimplSharp.Reflection.ConstructorInfo. Generic constructors
                 are not supported in the .NET Framework version 2.0. This exception is the
                 default behavior if this method is not overridden in a derived class.</exception>
            
             <returns>An array of CType objects that represent the type arguments of a generic
                 method or the type parameters of a generic method definition. Returns an
                 empty array if the current method is not a generic method..</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.GetParameters">
            <summary>
                When overridden in a derived class, gets the parameters of the specified
                method or constructor.
            </summary>
            <returns>An array of type ParameterInfo containing information that matches the signature
                of the method (or constructor) reflected by this MethodBase instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.Invoke(System.Object,System.Object[])">
             <summary>
                 Invokes the method or constructor represented by the current instance, using
                 the specified parameters.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The elements of the parameters array do not match the signature of the method
                 or constructor reflected by this instance.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked method or constructor throws an exception.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The parameters array does not have the correct number of arguments.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have permission to execute the constructor.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 The type that declares the method is an open generic type. That is, the CType.ContainsGenericParameters
                 property returns true for the declaring type.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="obj">The object on which to invoke the method or constructor. If a method is static,
                 this argument is ignored. If a constructor is static, this argument must
                 be null or an instance of the class that defines the constructor.</param>
             <param name="parameters">An argument list for the invoked method or constructor. This is an array
                 of objects with the same number, order, and type as the parameters of the
                 method or constructor to be invoked. If there are no parameters, parameters
                 should be null.  If the method or constructor represented by this instance
                 takes a ref parameter (ByRef in Visual Basic), no special attribute is required
                 for that parameter in order to invoke the method or constructor using this
                 function. Any object in this array that is not explicitly initialized with
                 a value will contain the default value for that object type. For reference-type
                 elements, this value is null. For value-type elements, this value is 0, 0.0,
                 or false, depending on the specific element type.</param>
             <returns>An object containing the return value of the invoked method, or null in the
                 case of a constructor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.MethodInfoImpl.Invoke(System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, invokes the reflected method or constructor
                 with the given parameters.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 The type of the parameters parameter does not match the signature of the
                 method or constructor reflected by this instance.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The parameters array does not have the correct number of arguments.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The invoked method or constructor throws an exception.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have permission to execute the constructor.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 The type that declares the method is an open generic type. That is, the CType.ContainsGenericParameters
                 property returns true for the declaring type.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object on which to invoke the method or constructor. If a method is static,
                 this argument is ignored. If a constructor is static, this argument must
                 be null or an instance of the class that defines the constructor.</param>
             <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from Crestron.SimplSharp.Reflection.BindingFlags.
                 If binder is null, this parameter is assigned the value Crestron.SimplSharp.Reflection.BindingFlags.Default;
                 thus, whatever you pass in is ignored.</param>
             <param name="binder">An object that enables the binding, coercion of argument types, invocation
                 of members, and retrieval of MemberInfo objects via reflection. If binder
                 is null, the default binder is used.</param>
             <param name="parameters">An argument list for the invoked method or constructor. This is an array
                 of objects with the same number, order, and type as the parameters of the
                 method or constructor to be invoked. If there are no parameters, this should
                 be null.  If the method or constructor represented by this instance takes
                 a ByRef parameter, there is no special attribute required for that parameter
                 in order to invoke the method or constructor using this function. Any object
                 in this array that is not explicitly initialized with a value will contain
                 the default value for that object type. For reference-type elements, this
                 value is null. For value-type elements, this value is 0, 0.0, or false, depending
                 on the specific element type.</param>
             <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this
                 is null, the CultureInfo for the current thread is used. (This is necessary
                 to convert a String that represents 1000 to a Double value, for example,
                 since 1000 is represented differently by different cultures.)</param>
             <returns>An Object containing the return value of the invoked method, or null in the
                 case of a constructor, or null if the method's return type is void. Before
                 calling the method or constructor, Invoke checks to see if the user has access
                 permission and verify that the parameters are valid.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.ReturnType">
            <summary>
                Gets the return type of this method.
            </summary>
            <value>The return type of this method.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.ReturnTypeCustomAttributes">
            <summary>
                Gets the custom attributes for the return type.
            </summary>
            <value>An ICustomAttributeProvider object representing the custom attributes for
                the return type.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.Attributes">
            <summary>
                Gets the attributes associated with this method.
            </summary>
            <value>One of the Crestron.SimplSharp.Reflection.MethodAttributes values.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.CallingConvention">
            <summary>
                Gets a value indicating the calling conventions for this method.
            </summary>
            <value>The Crestron.SimplSharp.Reflection.CallingConventions for this method.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.ContainsGenericParameters">
            <summary>
                Gets a value indicating whether the generic method contains unassigned generic
                type parameters.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase object represents a generic
                method that contains unassigned generic type parameters; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsAbstract">
            <summary>
                Gets a value indicating whether the method is abstract.
            </summary>
            <value>true if the method is abstract; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this method or
                constructor is described by Crestron.SimplSharp.Reflection.MethodAttributes.Assembly;
                that is, the method or constructor is visible at most to other types in the
                same assembly, and is not visible to derived types outside the assembly.
            </summary>
            <value>true if the visibility of this method or constructor is exactly described
                by Crestron.SimplSharp.Reflection.MethodAttributes.Assembly; otherwise, false..</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsConstructor">
            <summary>
                Gets a value indicating whether the method is a constructor.
            </summary>
            <value>true if this method is a constructor represented by a Crestron.SimplSharp.Reflection.ConstructorInfo
                object (see note in Remarks about Crestron.SimplSharp.Reflection.Emit.ConstructorBuilder
                objects); otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsFamily">
            <summary>
                Gets a value indicating whether the visibility of this method or constructor
                is described by Crestron.SimplSharp.Reflection.MethodAttributes.Family; that is, the method
                or constructor is visible only within its class and derived classes.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.Family;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsFamilyAndAssembly">
            <summary>
                Gets a value indicating whether the visibility of this method or constructor
                is described by Crestron.SimplSharp.Reflection.MethodAttributes.FamANDAssem; that is,
                the method or constructor can be called by derived classes, but only if they
                are in the same assembly.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.FamANDAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsFamilyOrAssembly">
            <summary>
                Gets a value indicating whether the potential visibility of this method or
                constructor is described by Crestron.SimplSharp.Reflection.MethodAttributes.FamORAssem;
                that is, the method or constructor can be called by derived classes wherever
                they are, and by classes in the same assembly.
            </summary>
            <value>true if access to this method or constructor is exactly described by Crestron.SimplSharp.Reflection.MethodAttributes.FamORAssem;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsFinal">
            <summary>
                Gets a value indicating whether this method is final.
            </summary>
            <value>true if this method is final; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsGenericMethod">
            <summary>
                Gets a value indicating whether the method is generic.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase represents a generic method;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsGenericMethodDefinition">
            <summary>
                Gets a value indicating whether the method is a generic method definition.
            </summary>
            <value>true if the current Crestron.SimplSharp.Reflection.MethodBase object represents the definition
                of a generic method; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsHideBySig">
            <summary>
                Gets a value indicating whether only a member of the same kind with exactly
                the same signature is hidden in the derived class.
            </summary>
            <value>true if the member is hidden by signature; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsPrivate">
            <summary>
                Gets a value indicating whether this member is private.
            </summary>
            <value>true if access to this method is restricted to other members of the class
                itself; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsPublic">
            <summary>
                Gets a value indicating whether this is a public override method.
            </summary>
            <value>true if this method is public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsSpecialName">
            <summary>
                Gets a value indicating whether this method has a special name.
            </summary>
            <value>true if this method has a special name; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsStatic">
            <summary>
                Gets a value indicating whether the method is static.
            </summary>
            <value>true if this method is static; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.IsVirtual">
            <summary>
                Gets a value indicating whether the method is virtual.
            </summary>
            <value>true if this method is virtual; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.MethodInfoImpl.MethodHandle">
            <summary>
                Gets a handle to the internal metadata representation of a method.
            </summary>
            <value>A System.RuntimeMethodHandle object.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.Module">
            <summary>
                Performs reflection on a module.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.#ctor(System.Reflection.Module)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="module">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.Create(System.Reflection.Module)">
            <summary>
            Creates an object of Module if one does not already exist
            </summary>
            <param name="module">module</param>
            <returns>Assembly</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.GetCustomAttributes(System.Boolean)">
            <summary>
                Returns all custom attributes.
            </summary>
            <param name="inherit">This argument is ignored for objects of this type.</param>
            <returns>An array of type Object containing all custom attributes.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Gets custom attributes of the specified type.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not a CType object supplied by the runtime. For example,
                 attributeType is a Crestron.SimplSharp.Reflection.Emit.TypeBuilder object.</exception>
            
             <param name="attributeType">The type of attribute to get.</param>
             <param name="inherit">This argument is ignored for objects of this type.</param>
             <returns>An array of type Object containing all custom attributes of the specified
                 type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.GetType(System.String)">
             <summary>
                 Returns the specified type, performing a case-sensitive search.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 className is null.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 The class initializers are invoked and an exception is thrown.</exception>
            
             <exception cref="T:System.ArgumentException">
                 className is a zero-length string.</exception>
            
             <exception cref="T:Crestron.SimplSharp.CrestronIO.FileNotFoundException">
                 className requires a dependent assembly that could not be found.</exception>
            
             <exception cref="T:System.BadImageFormatException">
                 className requires a dependent assembly, but the file is not a valid assembly.
                 -or- className requires a dependent assembly which was compiled for a version
                 of the runtime later than the currently loaded version.</exception>
             
             <param name="className">The name of the type to locate. The name must be fully qualified with the
                 namespace.</param>
             <returns>A Type object representing the given type, if the type is in this module;
                 otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.GetTypes">
             <summary>
                 Returns all the types defined within this module.
             </summary>
             <exception cref="T:System.Security.SecurityException">
                 The caller does not have the required permission.</exception>
            
             <returns>An array of type CType containing types defined within the module that is
                 reflected by this instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Determines if the specified attributeType is defined on this module.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not a CType object supplied by the runtime. For example,
                 attributeType is a Crestron.SimplSharp.Reflection.Emit.TypeBuilder object.</exception>
            
             <param name="attributeType">The Type object to which the custom attribute is applied.</param>
             <param name="inherit">This argument is ignored for objects of this type.</param>
             <returns>true if one or more instance of attributeType is defined on this module;
                 otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.ToString">
            <summary>
                Returns the name of the module.
            </summary>
            <returns>A String representing the name of this module.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.Equals(System.Object)">
            <summary>
                Determines if the underlying system type of the current instance is the
                same as the underlying system type of the specified System.Object.
            </summary>
            <param name="o">The System.Object whose underlying system type is to be compared with the
                underlying system type of the current instance.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current instance; otherwise, false. This method also returns
                false if the object specified by the o parameter is not a Module.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Module.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.Module.Assembly">
            <summary>
                Gets the appropriate Crestron.SimplSharp.Reflection.Assembly for this instance of Crestron.SimplSharp.Reflection.Module.
            </summary>
            <value>An Assembly object.</value>
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.Module.FullyQualifiedName">
             <summary>
                 Gets a string representing the fully qualified name and path to this module.
             </summary>
             <exception cref="T:System.Security.SecurityException">
                 The caller does not have the required permissions.</exception>
            
             <value>The fully qualified module name.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.Module.Name">
            <summary>
                Gets a String representing the name of the module with the path removed.
            </summary>
            <value>The module name with no path.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.ParameterAttributes">
            <summary>
                Defines the attributes that can be associated with a parameter. These are
                defined in CorHdr.h.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.None">
            <summary>
                Specifies that there is no parameter attribute.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.In">
            <summary>
                Specifies that the parameter is an input parameter.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.Out">
            <summary>
                Specifies that the parameter is an output parameter.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.Lcid">
            <summary>
                Specifies that the parameter is a locale identifier (lcid).
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.Retval">
            <summary>
                Specifies that the parameter is a return value.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.Optional">
            <summary>
                Specifies that the parameter is optional.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.HasDefault">
            <summary>
                Specifies that the parameter has a default value.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.HasFieldMarshal">
            <summary>
                Specifies that the parameter has field marshaling information.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.Reserved3">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.Reserved4">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.ParameterAttributes.ReservedMask">
            <summary>
                Specifies that the parameter is reserved.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.ParameterInfo">
            <summary>
                Discovers the attributes of a parameter and provides access to parameter
                metadata.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="parameterInfo">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.Create(System.Reflection.ParameterInfo)">
            <summary>
            Creates an object of ParameterInfo if one does not already exist
            </summary>
            <param name="parameterInfo">parameterInfo</param>
            <returns>ParameterInfo</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
             <summary>
                 Gets all the custom attributes defined on this parameter.
             </summary>
             
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">This argument is ignored for objects of this type.</param>
             
             <returns>An array of type Object containing all the custom attributes defined on this
                 parameter.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Gets the custom attributes of the specified type defined on this parameter.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The type must be a type provided by the underlying runtime system.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 attributeType is null.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="attributeType">The custom attributes identified by type.</param>
             <param name="inherit">This argument is ignored for objects of this type.</param>
             <returns>An array of type Object containing the custom attributes of the specified
                 type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Determines if the custom attribute of the specified type is defined on this
                 member.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 inherit does not use the correct type defined by attributeType.</exception>
            
             <param name="attributeType">The Type object to search for.</param>
             <param name="inherit">This argument is ignored for objects of this type.</param>
             <returns>true if one or more instance of attributeType is defined on this member;
                 otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.Equals(System.Object)">
            <summary>
                Determines if the underlying system type of the current instance is the
                same as the underlying system type of the specified System.Object.
            </summary>
            <param name="o">The System.Object whose underlying system type is to be compared with the
                underlying system type of the current instance.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current instance; otherwise, false. This method also returns
                false if the object specified by the o parameter is not a ParameterInfo.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterInfo.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ParameterInfo.Attributes">
            <summary>
                Gets the attributes for this parameter.
            </summary>
            <value>A ParameterAttributes object representing the attributes for this parameter.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ParameterInfo.DefaultValue">
            <summary>
                Gets a value indicating the default value if the parameter has a default
                value.
            </summary>
            <value>The default value of the parameter, or System.DBNull.Value if the parameter
                has no default value.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ParameterInfo.Member">
            <summary>
                Gets a value indicating the member in which the parameter is implemented.
            </summary>
            <value>A MemberInfo object.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ParameterInfo.Name">
            <summary>
                Gets the name of the parameter.
            </summary>
            <value>A String containing the simple name of this parameter.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ParameterInfo.ParameterType">
            <summary>
                Gets the Type of this parameter.
            </summary>
            <value>The Type object that represents the Type of this parameter.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ParameterInfo.Position">
            <summary>
                Gets the zero-based position of the parameter in the formal parameter list.
            </summary>
            <value>An integer representing the position this parameter occupies in the parameter
                list.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.ParameterModifier">
            <summary>
                Attaches a modifier to parameters so that binding can work with parameter
                signatures in which the types have been modified.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterModifier.#ctor(System.Int32)">
             <summary>
                 Initializes a new instance of the Crestron.SimplSharp.Reflection.ParameterModifier structure
                 representing the specified number of parameters.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 parameterCount is negative.</exception>
            
             <param name="parameterCount">The number of parameters.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterModifier.Equals(System.Object)">
            <summary>
                Determines if the underlying system type of the current instance is the
                same as the underlying system type of the specified System.Object.
            </summary>
            <param name="o">The System.Object whose underlying system type is to be compared with the
                underlying system type of the current instance.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current instance; otherwise, false. This method also returns
                false if the object specified by the o parameter is not a ParameterModifier.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.ParameterModifier.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.ParameterModifier.Item(System.Int32)">
            <summary>
                Gets or sets a value that specifies whether the parameter at the specified
                index position is to be modified by the current Crestron.SimplSharp.Reflection.ParameterModifier.
            </summary>
            <param name="index">The index position of the parameter whose modification status is being examined
                or set.</param>
            <returns>true if the parameter at this index position is to be modified by this Crestron.SimplSharp.Reflection.ParameterModifier;
                otherwise, false.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.PropertyAttributes">
            <summary>
                Defines the attributes that can be associated with a property. These attribute
                values are defined in corhdr.h.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.None">
            <summary>
                Specifies that no attributes are associated with a property.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.SpecialName">
            <summary>
                Specifies that the property is special, with the name describing how the
                property is special.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.RTSpecialName">
            <summary>
                Specifies that the metadata internal APIs check the name encoding.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.HasDefault">
            <summary>
                Specifies that the property has a default value.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.Reserved2">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.Reserved3">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.Reserved4">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.PropertyAttributes.ReservedMask">
            <summary>
                Specifies a flag reserved for runtime use only.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.PropertyInfo">
            <summary>
                Discovers the attributes of a property and provides access to property metadata.
            Do not derive from this class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.#ctor">
            <summary>
                Initializes a new instance of the System.Reflection.PropertyInfo class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetAccessors">
            <summary>
                Returns an array whose elements reflect the public get, set, and other accessors
                of the property reflected by the current instance.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects that reflect the public
                get, set, and other accessors of the property reflected by the current instance,
                if found; otherwise, this method returns an array with zero (0) elements.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
            <summary>
                Returns an array whose elements reflect the public and, if specified, non-public
                get, set, and other accessors of the property reflected by the current instance.
            </summary>
            <param name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo
                array. true if non-public methods are to be included; otherwise, false.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects whose elements reflect the
                get, set, and other accessors of the property reflected by the current instance.
                If nonPublic is true, this array contains public and non-public get, set,
                and other accessors. If nonPublic is false, this array contains only public
                get, set, and other accessors. If no accessors with the specified visibility
                are found, this method returns an array with zero (0) elements.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetGetMethod">
            <summary>
                Returns the public get accessor for this property.
            </summary>
            <returns>A MethodInfo object representing the public get accessor for this property,
                or null if the get accessor is non-public or does not exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns the public or non-public get
                 accessor for this property.
             </summary>
             
             <exception cref="T:System.Security.SecurityException">
                 The requested method is non-public and the caller does not have System.Security.Permissions.ReflectionPermission
                 to reflect on this non-public method.</exception>
            
             <param name="nonPublic">Indicates whether a non-public get accessor should be returned. true if a
                 non-public accessor is to be returned; otherwise, false.</param>
             <returns>A MethodInfo object representing the get accessor for this property, if nonPublic
                 is true. Returns null if nonPublic is false and the get accessor is non-public,
                 or if nonPublic is true but no get accessors exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetIndexParameters">
            <summary>
                When overridden in a derived class, returns an array of all the index parameters
                for the property.
            </summary>
            <returns>An array of type ParameterInfo containing the parameters for the indexes.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetSetMethod">
            <summary>
                Returns the public set accessor for this property.
            </summary>
            <returns>The MethodInfo object representing the Set method for this property if the
                set accessor is public, or null if the set accessor is not public.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns the set accessor for this property.
             </summary>
             
             <exception cref="T:System.Security.SecurityException">
                 The requested method is non-public and the caller does not have System.Security.Permissions.ReflectionPermission
                 to reflect on this non-public method.</exception>
            
             <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true
                 if a non-public accessor is to be returned; otherwise, false.</param>
             <returns>Value Condition A Crestron.SimplSharp.Reflection.MethodInfo object representing the Set
                 method for this property. The set accessor is public.  -or- nonPublic is
                 true and the set accessor is non-public. nullnonPublic is true, but the property
                 is read-only.  -or- nonPublic is false and the set accessor is non-public.
                  -or- There is no set accessor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
             <summary>
                 Returns the value of the property with optional index values for indexed
                 properties.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's get accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while retrieving the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
            
             <param name="obj">The object whose property value will be returned.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
             <returns>The property value for the obj parameter.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.GetValue(System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, returns the value of a property having
                 the specified binding, index, and System.Globalization.CultureInfo.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's get accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while retrieving the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object whose property value will be returned.</param>
             <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod,
                 CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty.
                 A suitable invocation attribute must be specified. If a static member is
                 to be invoked, the Static flag of BindingFlags must be set.</param>
             <param name="binder">An object that enables the binding, coercion of argument types, invocation
                 of members, and retrieval of MemberInfo objects via reflection. If binder
                 is null, the default binder is used.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
             <param name="culture">The CultureInfo object that represents the culture for which the resource
                 is to be localized. Note that if the resource is not localized for this culture,
                 the CultureInfo.Parent method will be called successively in search of a
                 match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture
                 property.</param>
             <returns>The property value for obj.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
             <summary>
                 Sets the value of the property with optional index values for index properties.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's set accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while setting the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
            
             <param name="obj">The object whose property value will be set.</param>
             <param name="value">The new value for this property.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfo.SetValue(System.Object,System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, sets the property value for the given
                 object to the given value.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's set accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while setting the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object whose property value will be returned.</param>
             <param name="value">The new value for this property.</param>
             <param name="invokeAttr">The invocation attribute. This must be a bit flag from Crestron.SimplSharp.Reflection.BindingFlags
                 : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty,
                 or SetProperty. A suitable invocation attribute must be specified. If a static
                 member is to be invoked, the Static flag of BindingFlags must be set.</param>
             <param name="binder">An object that enables the binding, coercion of argument types, invocation
                 of members, and retrieval of Crestron.SimplSharp.Reflection.MemberInfo objects through
                 reflection. If binder is null, the default binder is used.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
             <param name="culture">The System.Globalization.CultureInfo object that represents the culture for
                 which the resource is to be localized. Note that if the resource is not localized
                 for this culture, the CultureInfo.Parent method will be called successively
                 in search of a match. If this value is null, the CultureInfo is obtained
                 from the CultureInfo.CurrentUICulture property.</param>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfo.Attributes">
            <summary>
                Gets the attributes for this property.
            </summary>
            <value>Attributes of this property.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfo.CanRead">
            <summary>
                Gets a value indicating whether the property can be read.
            </summary>
            <value>true if this property can be read; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfo.CanWrite">
            <summary>
                Gets a value indicating whether the property can be written to.
            </summary>
            <value>true if this property can be written to; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfo.IsSpecialName">
            <summary>
                Gets a value indicating whether the property is the special name.
            </summary>
            <value>true if this property is the special name; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfo.PropertyType">
            <summary>
                Gets the type of this property.
            </summary>
            <value>The type of this property.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.PropertyInfoImpl">
            <summary>
                Discovers the attributes of a property and provides access to property metadata.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Internal protected Constructor
            </summary>
            <param name="propertyInfo">Instance</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetAccessors">
            <summary>
                Returns an array whose elements reflect the public get, set, and other accessors
                of the property reflected by the current instance.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects that reflect the public
                get, set, and other accessors of the property reflected by the current instance,
                if found; otherwise, this method returns an array with zero (0) elements.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetAccessors(System.Boolean)">
            <summary>
                Returns an array whose elements reflect the public and, if specified, non-public
                get, set, and other accessors of the property reflected by the current instance.
            </summary>
            <param name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo
                array. true if non-public methods are to be included; otherwise, false.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects whose elements reflect the
                get, set, and other accessors of the property reflected by the current instance.
                If nonPublic is true, this array contains public and non-public get, set,
                and other accessors. If nonPublic is false, this array contains only public
                get, set, and other accessors. If no accessors with the specified visibility
                are found, this method returns an array with zero (0) elements.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetGetMethod">
            <summary>
                Returns the public get accessor for this property.
            </summary>
            <returns>A MethodInfo object representing the public get accessor for this property,
                or null if the get accessor is non-public or does not exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetGetMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns the public or non-public get
                 accessor for this property.
             </summary>
             
             <exception cref="T:System.Security.SecurityException">
                 The requested method is non-public and the caller does not have System.Security.Permissions.ReflectionPermission
                 to reflect on this non-public method.</exception>
            
             <param name="nonPublic">Indicates whether a non-public get accessor should be returned. true if a
                 non-public accessor is to be returned; otherwise, false.</param>
             <returns>A MethodInfo object representing the get accessor for this property, if nonPublic
                 is true. Returns null if nonPublic is false and the get accessor is non-public,
                 or if nonPublic is true but no get accessors exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetIndexParameters">
            <summary>
                When overridden in a derived class, returns an array of all the index parameters
                for the property.
            </summary>
            <returns>An array of type ParameterInfo containing the parameters for the indexes.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetSetMethod">
            <summary>
                Returns the public set accessor for this property.
            </summary>
            <returns>The MethodInfo object representing the Set method for this property if the
                set accessor is public, or null if the set accessor is not public.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetSetMethod(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns the set accessor for this property.
             </summary>
             
             <exception cref="T:System.Security.SecurityException">
                 The requested method is non-public and the caller does not have System.Security.Permissions.ReflectionPermission
                 to reflect on this non-public method.</exception>
            
             <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true
                 if a non-public accessor is to be returned; otherwise, false.</param>
             <returns>Value Condition A Crestron.SimplSharp.Reflection.MethodInfo object representing the Set
                 method for this property. The set accessor is public.  -or- nonPublic is
                 true and the set accessor is non-public. nullnonPublic is true, but the property
                 is read-only.  -or- nonPublic is false and the set accessor is non-public.
                  -or- There is no set accessor.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetValue(System.Object,System.Object[])">
             <summary>
                 Returns the value of the property with optional index values for indexed
                 properties.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's get accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while retrieving the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
            
             <param name="obj">The object whose property value will be returned.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
             <returns>The property value for the obj parameter.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetValue(System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, returns the value of a property having
                 the specified binding, index, and System.Globalization.CultureInfo.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's get accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while retrieving the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object whose property value will be returned.</param>
             <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod,
                 CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty.
                 A suitable invocation attribute must be specified. If a static member is
                 to be invoked, the Static flag of BindingFlags must be set.</param>
             <param name="binder">An object that enables the binding, coercion of argument types, invocation
                 of members, and retrieval of MemberInfo objects via reflection. If binder
                 is null, the default binder is used.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
             <param name="culture">The CultureInfo object that represents the culture for which the resource
                 is to be localized. Note that if the resource is not localized for this culture,
                 the CultureInfo.Parent method will be called successively in search of a
                 match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture
                 property.</param>
             <returns>The property value for obj.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.SetValue(System.Object,System.Object,System.Object[])">
             <summary>
                 Sets the value of the property with optional index values for index properties.
             </summary>
            
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's set accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while setting the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
            
             <param name="obj">The object whose property value will be set.</param>
             <param name="value">The new value for this property.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.SetValue(System.Object,System.Object,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
             <summary>
                 When overridden in a derived class, sets the property value for the given
                 object to the given value.
             </summary>
             
             <exception cref="T:System.ArgumentException">
                 The index array does not contain the type of arguments needed.  -or- The
                 property's set accessor is not found.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
                 The number of parameters in index does not match the number of parameters
                 the indexed property takes.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 There was an illegal attempt to access a private or protected method inside
                 a class.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 An error occurred while setting the property value. For example, an index
                 value specified for an indexed property is out of range. The System.Exception.InnerException
                 property indicates the reason for the error.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="obj">The object whose property value will be returned.</param>
             <param name="value">The new value for this property.</param>
             <param name="invokeAttr">The invocation attribute. This must be a bit flag from Crestron.SimplSharp.Reflection.BindingFlags
                 : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty,
                 or SetProperty. A suitable invocation attribute must be specified. If a static
                 member is to be invoked, the Static flag of BindingFlags must be set.</param>
             <param name="binder">An object that enables the binding, coercion of argument types, invocation
                 of members, and retrieval of Crestron.SimplSharp.Reflection.MemberInfo objects through
                 reflection. If binder is null, the default binder is used.</param>
             <param name="index">Optional index values for indexed properties. This value should be null for
                 non-indexed properties.</param>
             <param name="culture">The System.Globalization.CultureInfo object that represents the culture for
                 which the resource is to be localized. Note that if the resource is not localized
                 for this culture, the CultureInfo.Parent method will be called successively
                 in search of a match. If this value is null, the CultureInfo is obtained
                 from the CultureInfo.CurrentUICulture property.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.PropertyInfoImpl.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.Attributes">
            <summary>
                Gets the attributes for this property.
            </summary>
            <value>Attributes of this property.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.CanRead">
            <summary>
                Gets a value indicating whether the property can be read.
            </summary>
            <value>true if this property can be read; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.CanWrite">
            <summary>
                Gets a value indicating whether the property can be written to.
            </summary>
            <value>true if this property can be written to; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.IsSpecialName">
            <summary>
                Gets a value indicating whether the property is the special name.
            </summary>
            <value>true if this property is the special name; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.PropertyType">
            <summary>
                Gets the type of this property.
            </summary>
            <value>The type of this property.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.PropertyInfoImpl.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
            <summary>
                The exception that is thrown by methods invoked through reflection. This
                class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.TargetInvocationException
                class with a specified error message and a reference to the inner exception
                that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter
                is not null, the current exception is raised in a catch block that handles
                the inner exception.</param>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.TargetParameterCountException">
            <summary>
                The exception that is thrown when the number of parameters for an invocation
                does not match the number expected. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the Crestron.SimplSharp.Reflection.TargetParameterCountException
                class with a specified error message and a reference to the inner exception
                that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter
                is not null, the current exception is raised in a catch block that handles
                the inner exception.</param>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.TypeAttributes">
            <summary>
                Specifies type attributes.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.NotPublic">
            <summary>
                Specifies that the class is not public.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.Public">
            <summary>
                Specifies that the class is public.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.NestedPublic">
            <summary>
                Specifies that the class is nested with public visibility.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.NestedPrivate">
            <summary>
                Specifies that the class is nested with private visibility.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.NestedFamily">
            <summary>
                Specifies that the class is nested with family visibility, and is thus accessible
                only by methods within its own type and any subtypes.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.NestedAssembly">
            <summary>
                Specifies that the class is nested with assembly visibility, and is thus
                accessible only by methods within its assembly.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.NestedFamANDAssem">
            <summary>
                Specifies that the class is nested with assembly and family visibility, and
                is thus accessible only by methods lying in the intersection of its family
                and assembly.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.VisibilityMask">
            <summary>
                Specifies type visibility information.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.SequentialLayout">
            <summary>
                Specifies that class fields are laid out sequentially, in the order that
                the fields were emitted to the metadata.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.ExplicitLayout">
            <summary>
                Specifies that class fields are laid out at the specified offsets.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.LayoutMask">
            <summary>
                Specifies class layout information.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.Interface">
            <summary>
                Specifies that the type is an interface.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.Abstract">
            <summary>
                Specifies that the type is abstract.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.Sealed">
            <summary>
                Specifies that the class is concrete and cannot be extended.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.SpecialName">
            <summary>
                Specifies that the class is special in a way denoted by the name.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.RTSpecialName">
            <summary>
                Runtime should check name encoding.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.Import">
            <summary>
                Specifies that the class or interface is imported from another module.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.Serializable">
            <summary>
                Specifies that the class can be serialized.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.UnicodeClass">
            <summary>
                LPTSTR is interpreted as UNICODE.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.AutoClass">
            <summary>
                LPTSTR is interpreted automatically.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.StringFormatMask">
            <summary>
                Used to retrieve string information for native interoperability.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.HasSecurity">
            <summary>
                Type has security associate with it.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.ReservedMask">
            <summary>
                Attributes reserved for runtime use.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.TypeAttributes.BeforeFieldInit">
            <summary>
                Specifies that calling static methods of the type does not force the system
                to initialize the type.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.CAttribute">
            <summary>
                Represents the base class for custom attributes.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.op_Equality(Crestron.SimplSharp.Reflection.CAttribute,Crestron.SimplSharp.Reflection.CAttribute)">
            <summary>
            operator == overload for Attribute
            </summary>
            <param name="a">Left side of compare</param>
            <param name="b">Right side of compare</param>
            <returns>true if the Left side and Right side of compare are equal; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.op_Inequality(Crestron.SimplSharp.Reflection.CAttribute,Crestron.SimplSharp.Reflection.CAttribute)">
            <summary>
            operator != overload for Attribute
            </summary>
            <param name="a">Left side of compare</param>
            <param name="b">Right side of compare</param>
            <returns>false true if the Left side and Right side of compare are equal; otherwise, true.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.Assembly,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves a custom attribute applied to a specified assembly. Parameters
                 specify the assembly and the type of the custom attribute to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.MemberInfo,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves a custom attribute applied to a member of a type. Parameters specify
                 the member, and the type of the custom attribute to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, or property member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.Module,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves a custom attribute applied to a module. Parameters specify the
                 module, and the type of the custom attribute to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.ParameterInfo,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves a custom attribute applied to a method parameter. Parameters specify
                 the method parameter, and the type of the custom attribute to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.Assembly,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves a custom attribute applied to an assembly. Parameters specify the
                 assembly, the type of the custom attribute to search for, and an ignored
                 search option.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.MemberInfo,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves a custom attribute applied to a member of a type. Parameters specify
                 the member, the type of the custom attribute to search for, and whether to
                 search ancestors of the member.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, or property member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.Module,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves a custom attribute applied to a module. Parameters specify the
                 module, the type of the custom attribute to search for, and an ignored search
                 option.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttribute(Crestron.SimplSharp.Reflection.ParameterInfo,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves a custom attribute applied to a method parameter. Parameters specify
                 the method parameter, the type of the custom attribute to search for, and
                 whether to search ancestors of the method parameter.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one of the requested attributes was found.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
             
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>A reference to the single custom attribute of type attributeType that is
                 applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Assembly)">
             <summary>
                 Retrieves an array of the custom attributes applied to an assembly. A parameter
                 specifies the assembly.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element is null.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.MemberInfo)">
             <summary>
                 Retrieves an array of the custom attributes applied to a member of a type.
                 A parameter specifies the member.
            
             <exception cref="T:System.ArgumentNullException">
                 element is null.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
             </summary>
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, or property member of a class.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Module)">
             <summary>
                 Retrieves an array of the custom attributes applied to a module. A parameter
                 specifies the module.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element is null.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.ParameterInfo)">
             <summary>
                 Retrieves an array of the custom attributes applied to a method parameter.
                 A parameter specifies the method parameter.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element is null.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
             
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Assembly,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to an assembly. Parameters
                 specify the assembly, and an ignored search option.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Assembly,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves an array of the custom attributes applied to an assembly. Parameters
                 specify the assembly, and the type of the custom attribute to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>An System.Attribute array that contains the custom attributes of type attributeType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.MemberInfo,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to a member of a type.
                 Parameters specify the member, the type of the custom attribute to search
                 for, and whether to search ancestors of the member.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element is null.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, or property member of a class.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.MemberInfo,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves an array of the custom attributes applied to a member of a type.
                 Parameters specify the member, and the type of the custom attribute to search
                 for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or type is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 type is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, or property member of a class.</param>
             <param name="type">The type, or a base type, of the custom attribute to search for.</param>
             <returns>An System.Attribute array that contains the custom attributes of type CType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Module,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to a module. Parameters
                 specify the module, and an ignored search option.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Module,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves an array of the custom attributes applied to a module. Parameters
                 specify the module, and the type of the custom attribute to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
             
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>An System.Attribute array that contains the custom attributes of type attributeType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.ParameterInfo,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to a method parameter.
                 Parameters specify the method parameter, and whether to search ancestors
                 of the method parameter.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element is null.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>An System.Attribute array that contains the custom attributes applied to
                 element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.ParameterInfo,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Retrieves an array of the custom attributes applied to a method parameter.
                 Parameters specify the method parameter, and the type of the custom attribute
                 to search for.
             </summary> 
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>An System.Attribute array that contains the custom attributes of type attributeType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Assembly,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to an assembly. Parameters
                 specify the assembly, the type of the custom attribute to search for, and
                 an ignored search option.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>An System.Attribute array that contains the custom attributes of type attributeType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.MemberInfo,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to a member of a type.
                 Parameters specify the member, the type of the custom attribute to search
                 for, and whether to search ancestors of the member.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or type is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 type is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, or property member of a class.</param>
             <param name="type">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>An System.Attribute array that contains the custom attributes of type CType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.Module,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to a module. Parameters
                 specify the module, the type of the custom attribute to search for, and an
                 ignored search option.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>An System.Attribute array that contains the custom attributes of type attributeType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetCustomAttributes(Crestron.SimplSharp.Reflection.ParameterInfo,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Retrieves an array of the custom attributes applied to a method parameter.
                 Parameters specify the method parameter, the type of the custom attribute
                 to search for, and whether to search ancestors of the method parameter.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>An System.Attribute array that contains the custom attributes of type attributeType
                 applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.Equals(System.Object)">
            <summary>
                Returns a value that indicates whether this instance is equal to a specified
               object.
            </summary>
            <param name="o">An System.Object to compare with this instance or null.</param>
            <returns>true if obj equals the type and value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.Assembly,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Determines whether any custom attributes are applied to an assembly. Parameters
                 specify the assembly, and the type of the custom attribute to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.MemberInfo,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Determines whether any custom attributes are applied to a member of a type.
                 Parameters specify the member, and the type of the custom attribute to search
                 for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, type, or property member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.Module,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Determines whether any custom attributes of a specified type are applied
                 to a module. Parameters specify the module, and the type of the custom attribute
                 to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.ParameterInfo,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Determines whether any custom attributes are applied to a method parameter.
                 Parameters specify the method parameter, and the type of the custom attribute
                 to search for.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.Assembly,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Determines whether any custom attributes are applied to an assembly. Parameters
                 specify the assembly, the type of the custom attribute to search for, and
                 an ignored search option.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
             
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Assembly class that describes
                 a reusable collection of modules.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.MemberInfo,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Determines whether any custom attributes are applied to a member of a type.
                 Parameters specify the member, the type of the custom attribute to search
                 for, and whether to search ancestors of the member.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 element is not a constructor, method, property, event, type, or field.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.MemberInfo class that describes
                 a constructor, event, field, method, type, or property member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.Module,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Determines whether any custom attributes are applied to a module. Parameters
                 specify the module, the type of the custom attribute to search for, and an
                 ignored search option.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.Module class that describes
                 a portable executable file.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.IsDefined(Crestron.SimplSharp.Reflection.ParameterInfo,Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 Determines whether any custom attributes are applied to a method parameter.
                 Parameters specify the method parameter, the type of the custom attribute
                 to search for, and whether to search ancestors of the method parameter.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 element or attributeType is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 attributeType is not derived from System.Attribute.</exception>
            
             <param name="element">An object derived from the Crestron.SimplSharp.Reflection.ParameterInfo class that describes
                 a parameter of a member of a class.</param>
             <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
             <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
             <returns>true if a custom attribute of type attributeType is applied to element; otherwise,
                 false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CAttribute.Match(System.Object)">
            <summary>
                When overridden in a derived class, returns a value that indicates whether
                this instance equals a specified object.
            </summary>
            <param name="obj">An System.Object to compare with this instance of System.Attribute.</param>
            <returns>true if this instance equals obj; otherwise, false.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.CType">
            <summary>
                Represents type declarations: class types, interface types, array types,
                value types, enumeration types, type parameters, generic type definitions,
                and open or closed constructed generic types. Do not derive from this class.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.CType.Delimiter">
            <summary>
                Separates names in the namespace of the CType. This field is read-only.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharp.Reflection.CType.Missing">
            <summary>
                Represents a missing value in the CType information. This field is
                read-only.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.op_Implicit(System.Type)~Crestron.SimplSharp.Reflection.CType">
            <summary>
            Performs an implicit conversion from Type to CType.
            </summary>
            <param name="typeVal">The type value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.op_Implicit(Crestron.SimplSharp.Reflection.CType)~System.Type">
            <summary>
            Performs an implicit conversion from CType to Type.
            </summary>
            <param name="typeVal">The CType value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.op_Equality(Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType)">
            <summary>
            operator == overload for CType
            </summary>
            <param name="a">Left side of compare</param>
            <param name="b">Right side of compare</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current CType; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.op_Inequality(Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType)">
            <summary>
            operator != overload for CType
            </summary>
            <param name="a">Left side of compare</param>
            <param name="b">Right side of compare</param>
            <returns>false if the underlying system type of o is the same as the underlying system
                type of the current CType; otherwise, true.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.#ctor">
            <summary>
                Initializes a new instance of the CType class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.Equals(System.Object)">
            <summary>
                Determines if the underlying system type of the current CType is the
                same as the underlying system type of the specified System.Object.
            </summary>
            <param name="o">The System.Object whose underlying system type is to be compared with the
                underlying system type of the current CType.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current CType; otherwise, false. This method also returns
                false if the object specified by the o parameter is not a Type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.Equals(Crestron.SimplSharp.Reflection.CType)">
            <summary>
                Determines if the underlying system type of the current CType is the
                same as the underlying system type of the specified CType.
            </summary>
            <param name="o">The CType whose underlying system type is to be compared with the underlying
                system type of the current CType.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current CType; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.Equals(System.Type)">
            <summary>
                Compares the underlying system type of the current CType to
                the specified system type.
            </summary>
            <param name="T">The system type that is to be compared with the underlying
                system type of the current CType.</param>
            <returns>true if the system type of T is the same as the underlying system
                type of the current CType; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetArrayRank">
             <summary>
                 Gets the number of dimensions in an System.Array.
             </summary>
             
             <exception cref="T:System.NotSupportedException">
                 The functionality of this method is unsupported in the base class and must
                 be implemented in a derived class instead.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The current Type is not an array.</exception>
            
             <returns>An System.Int32 containing the number of dimensions in the current Type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetConstructor(Crestron.SimplSharp.Reflection.CType[])">
             <summary>
                 Searches for a public instance constructor whose parameters match the types
                 in the specified array.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 types is null.  -or- One of the elements in types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted constructor not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the desired constructor.  -or- An empty array of CType
                 objects, to get a constructor that takes no parameters. </param>
             <returns>A Crestron.SimplSharp.Reflection.ConstructorInfo object representing the public instance
                 constructor whose parameters match the types in the parameter type array,
                 if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetConstructor(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for a constructor whose parameters match the specified argument
                 types and modifiers, using the specified binding constraints.
             </summary>
            
             <exception cref="T:System.ArgumentNullException">
                 types is null.  -or- One of the elements in types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.  -or- types
                 and modifiers do not have the same length.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag or constructor not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the constructor to get.  -or- An empty array of the
                 type CType (that is, Type[] types = new Type[0]) to get a constructor
                 that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the parameter type
                 array. The default binder does not process this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.ConstructorInfo object representing the constructor that
                 matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetConstructors">
            <summary>
                Returns all the public constructors defined for the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.ConstructorInfo objects representing all the
                public instance constructors defined for the current CType, but not
                including the type initializer (static constructor). If no public instance
                constructors are defined for the current CType, or if the current CType
                represents a type parameter in the definition of a generic type or generic
                method, an empty array of type Crestron.SimplSharp.Reflection.ConstructorInfo is returned.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetConstructors(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the constructors defined
                for the current CType, using the specified BindingFlags.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.ConstructorInfo objects representing all constructors
                defined for the current CType that match the specified binding constraints,
                including the type initializer if it is defined. Returns an empty array of
                type Crestron.SimplSharp.Reflection.ConstructorInfo if no constructors are defined for
                the current CType, if none of the defined constructors match the binding
                constraints, or if the current CType represents a type parameter in
                the definition of a generic type or generic method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetDefaultMembers">
            <summary>
                Searches for the members defined for the current CType whose Crestron.SimplSharp.Reflection.DefaultMemberAttribute
                is set.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing all default
                members of the current CType.  -or- An empty array of type Crestron.SimplSharp.Reflection.MemberInfo,
                if the current CType does not have default members.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetElementType">
            <summary>
                When overridden in a derived class, returns the CType of the object
                encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <returns>The CType of the object encompassed or referred to by the current array,
                pointer, or reference type, or null if the current CType is not an
                array or a pointer, or is not passed by reference, or represents a generic
                type or a type parameter in the definition of a generic type or generic method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetEvent(System.String)">
             <summary>
                 Returns the Crestron.SimplSharp.Reflection.EventInfo object representing the specified
                 public event.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <param name="name">The System.String containing the name of an event which is declared or inherited
                 by the current CType.</param>
             <returns>The Crestron.SimplSharp.Reflection.EventInfo object representing the specified public
                 event which is declared or inherited by the current CType, if found;
                 otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetEvent(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 When overridden in a derived class, returns the Crestron.SimplSharp.Reflection.EventInfo
                 object representing the specified event, using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of an event which is declared or inherited
                 by the current CType.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>The Crestron.SimplSharp.Reflection.EventInfo object representing the specified event which
                 is declared or inherited by the current CType, if found; otherwise,
                 null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetEvents">
            <summary>
                Returns all the public events that are declared or inherited by the current
                CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.EventInfo objects representing all the public
                events which are declared or inherited by the current CType.  -or-
                An empty array of type Crestron.SimplSharp.Reflection.EventInfo, if the current CType
                does not have public events.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetEvents(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for events that are declared
                or inherited by the current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.EventInfo objects representing all events which
                are declared or inherited by the current CType that match the specified
                binding constraints.  -or- An empty array of type Crestron.SimplSharp.Reflection.EventInfo,
                if the current CType does not have events, or if none of the events
                match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetField(System.String)">
             <summary>
                 Searches for the public field with the specified name.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 This CType object is a Crestron.SimplSharp.Reflection.Emit.TypeBuilder whose Crestron.SimplSharp.Reflection.Emit.TypeBuilder.CreateType()
                 method has not yet been called.</exception>
            
             <param name="name">The System.String containing the name of the data field to get.</param>
             <returns>A Crestron.SimplSharp.Reflection.FieldInfo object representing the public field with the
                 specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetField(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified field, using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the data field to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A Crestron.SimplSharp.Reflection.FieldInfo object representing the field that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetFields">
            <summary>
                Returns all the public fields of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.FieldInfo objects representing all the public
                fields defined for the current CType.  -or- An empty array of type
                Crestron.SimplSharp.Reflection.FieldInfo, if no public fields are defined for the current
                CType.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetFields(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the fields defined for the
                current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.FieldInfo objects representing all fields defined
                for the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.FieldInfo, if no fields are
                defined for the current CType, or if none of the defined fields match
                the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetGenericArguments">
            <summary>
                Returns an array of CType objects that represent the type arguments
                of a generic type or the type parameters of a generic type definition.
            </summary>
            <returns>An array of CType objects that represent the type arguments of a generic
                type. Returns an empty array if the current type is not a generic type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetGenericTypeDefinition">
             <summary>
                 Returns a CType object that represents a generic type definition from
                 which the current generic type can be constructed.
             </summary>
             
             <exception cref="T:System.InvalidOperationException">
                 The current type is not a generic type. That is, CType.IsGenericType
                 returns false.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 The invoked method is not supported in the base class. Derived classes must
                 provide an implementation.</exception>
            
             <returns>A CType object representing a generic type from which the current type
                 can be constructed.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetInterfaces">
             <summary>
                 When overridden in a derived class, gets all the interfaces implemented or
                 inherited by the current CType.
             </summary>
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 A static initializer is invoked and throws an exception.</exception>
            
             <returns>An array of CType objects representing all the interfaces implemented
                 or inherited by the current CType.  -or- An empty array of type CType,
                 if no interfaces are implemented or inherited by the current CType.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMember(System.String)">
             <summary>
                 Searches for the public members with the specified name.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <param name="name">The System.String containing the name of the public members to get.</param>
             <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing the public
                 members with the specified name, if found; otherwise, an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMember(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified members, using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the members to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return an empty array.</param>
             <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing the public
                 members with the specified name, if found; otherwise, an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMembers">
            <summary>
                Returns all the public members of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing all the public
                members of the current CType.  -or- An empty array of type Crestron.SimplSharp.Reflection.MemberInfo,
                if the current CType does not have public members.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMembers(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the members defined for
                the current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing all members
                defined for the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.MemberInfo, if no members
                are defined for the current CType, or if none of the defined members
                match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethod(System.String)">
             <summary>
                 Searches for the public method with the specified name.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted method not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the public method to get.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the public method with
                 the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethod(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified method, using the specified binding constraints.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and matching the specified
                 binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethod(System.String,Crestron.SimplSharp.Reflection.CType[])">
             <summary> 
                 Searches for the specified public method whose parameters match the specified
                 argument types.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and specified parameters.
             </exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.</exception>
             
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the public method whose
                 parameters match the specified argument types, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethod(System.String,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for the specified public method whose parameters match the specified
                 argument types and modifiers.
             </summary>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and specified parameters.
             </exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.</exception>
             
             <param name="name">The System.String containing the name of the public method to get</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 To be only used when calling through COM interop, and only parameters that
                 are passed by reference are handled. The default binder does not process
                 this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the public method that
                 matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethod(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Searches for the specified method whose parameters match the specified argument
                 types and modifiers, using the specified binding constraints.
             </summary>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and matching the specified
                 binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 To be only used when calling through COM interop, and only parameters that
                 are passed by reference are handled. The default binder does not process
                 this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method that matches
                 the specified requirements, if found; otherwise, null</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethod(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CallingConventions,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Searches for the specified method whose parameters match the specified argument
                 types and modifiers, using the specified binding constraints and the specified
                 calling convention.
             </summary>
                 
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and matching the specified
                 binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">/exception&gt;:
                 types is multidimensional.  -or- modifiers is multidimensional.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="callConvention">The Crestron.SimplSharp.Reflection.CallingConventions object that specifies the set of
                 rules to use regarding the order and layout of arguments, how the return
                 value is passed, what registers are used for arguments, and how the stack
                 is cleaned up.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 To be only used when calling through COM interop, and only parameters that
                 are passed by reference are handled. The default binder does not process
                 this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethods">
            <summary>
                Returns all the public methods of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects representing all the public
                methods defined for the current CType.  -or- An empty array of type
                Crestron.SimplSharp.Reflection.MethodInfo, if no public methods are defined for the current
                CType..</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetMethods(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the methods defined for
                the current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects representing all methods
                defined for the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.MethodInfo, if no methods
                are defined for the current CType, or if none of the defined methods
                match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetNestedType(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 When overridden in a derived class, searches for the specified nested type,
                 using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The string containing the name of the nested type to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A CType object representing the nested type that matches the specified
                 requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetNestedTypes(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the types nested in the
                current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of CType objects representing all the types nested in the
                current CType that match the specified binding constraints (the search
                is not recursive), or an empty array of type CType, if no nested types
                are found that match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperties">
            <summary>
                Returns all the public properties of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.PropertyInfo objects representing all public
                properties of the current CType.  -or- An empty array of type Crestron.SimplSharp.Reflection.PropertyInfo,
                if the current CType does not have public properties.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperties(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the properties of the current
                CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.PropertyInfo objects representing all properties
                of the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.PropertyInfo, if the current
                CType does not have properties, or if none of the properties match
                the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperty(System.String)">
             <summary>
                 Searches for the public property with the specified name.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name. See Remarks.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <param name="name">The System.String containing the name of the public property to get.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperty(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified property, using the specified binding constraints.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified binding constraints. See Remarks.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the property to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the property that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperty(System.String,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Searches for the public property with the specified name and return type.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null, or returnType is null.</exception>
            
             <param name="name">The System.String containing the name of the public property to get.</param>
             <param name="returnType">The return type of the property.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperty(System.String,Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[])">
             <summary> 
                 Searches for the specified public property whose parameters match the specified
                 argument types.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified argument types and modifiers.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 An element of types is null.</exception>
             
             <param name="name">The System.String containing the name of the public property to get.</param>
             <param name="returnType">The return type of the property.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the indexed property to get.  -or- An empty array of
                 the type CType (that is, Type[] types = new Type[0]) to get a property
                 that is not indexed.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 that matches the specified argument types, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperty(System.String,Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for the specified public property whose parameters match the specified
                 argument types and modifiers.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified argument types and modifiers.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.  -or- types
                 and modifiers do not have the same length.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 An element of types is null.</exception>
             
             <param name="name">The System.String containing the name of the public property to get.</param>
             <param name="returnType">The return type of the property.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the indexed property to get.  -or- An empty array of
                 the type CType (that is, Type[] types = new Type[0]) to get a property
                 that is not indexed.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 The default binder does not process this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetProperty(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for the specified property whose parameters match the specified
                 argument types and modifiers, using the specified binding constraints.
             </summary>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.  -or- types
                 and modifiers do not have the same length.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 An element of types is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="name">The System.String containing the name of the property to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="returnType">The return type of the property.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the indexed property to get.  -or- An empty array of
                 the type CType (that is, Type[] types = new Type[0]) to get a property
                 that is not indexed.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 The default binder does not process this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the property that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetTypeCode(Crestron.SimplSharp.Reflection.CType)">
            <summary>
                Gets the underlying type code of the specified CType.
            </summary>
            <param name="type">The CType whose underlying type code to get.</param>
            <returns>The System.TypeCode value of the underlying type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetTypeFromCLSID(System.Guid)">
            <summary>
                Gets the type associated with the specified class identifier (CLSID).
            </summary>
            <param name="clsid">The CLSID of the type to get.</param>
            <returns>System.__ComObject regardless of whether the CLSID is valid.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetTypeFromCLSID(System.Guid,System.Boolean)">
            <summary>
                Gets the type associated with the specified class identifier (CLSID), specifying
                whether to throw an exception if an error occurs while loading the type.
            </summary>
            <param name="clsid">The CLSID of the type to get.</param>
            <param name="throwOnError">true to throw any exception that occurs.  -or- false to ignore any exception
                that occurs.</param>
            <returns>System.__ComObject regardless of whether the CLSID is valid.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetTypeFromHandle(System.RuntimeTypeHandle)">
             <summary>
                 Gets the type referenced by the specified type handle.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 A class initializer is invoked and throws an exception.</exception>
            
             <param name="handle">The System.RuntimeTypeHandle object that refers to the type.</param>
             <returns>The type referenced by the specified System.RuntimeTypeHandle, or null if
                 the System.RuntimeTypeHandle.Value property of handle is null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetTypeFromProgID(System.String)">
            <summary>
                Gets the type associated with the specified program identifier (ProgID),
                returning null if an error is encountered while loading the CType.
            </summary>
            
            <exception cref="T:System.ArgumentException">
                progID is null.</exception>
            
            <param name="progID">The ProgID of the type to get.</param>
            <returns>The type associated with the specified ProgID, if progID is a valid entry
                in the registry and a type is associated with it; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetTypeFromProgID(System.String,System.Boolean)">
             <summary>
                 Gets the type associated with the specified program identifier (ProgID),
                 specifying whether to throw an exception if an error occurs while loading
                 the type.
             </summary>
             <exception cref="T:System.ArgumentException">
                 progID is null.</exception>
            
             <exception cref="T:System.Runtime.InteropServices.COMException">
                 The specified ProgID is not registered.</exception>
             
             <param name="progID">The ProgID of the type to get.</param>
             <param name="throwOnError">true to throw any exception that occurs.  -or- false to ignore any exception
                 that occurs.</param>
             <returns>The type associated with the specified program identifier (ProgID), if progID
                 is a valid entry in the registry and a type is associated with it; otherwise,
                 null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.IsAssignableFrom(Crestron.SimplSharp.Reflection.CType)">
            <summary>
                Determines whether an instance of the current CType can be assigned
                from an instance of the specified Type.
            </summary>
            <param name="c">The Type to compare with the current Type.</param>
            <returns>true if c and the current Type represent the same type, or if the current
                Type is in the inheritance hierarchy of c, or if the current Type is an interface
                that c implements, or if c is a generic type parameter and the current Type
                represents one of the constraints of c. false if none of these conditions
                are true, or if c is null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.IsInstanceOfType(System.Object)">
            <summary>
                Determines whether the specified object is an instance of the current CType.
            </summary>
            <param name="o">The object to compare with the current Type.</param>
            <returns>true if the current Type is in the inheritance hierarchy of the object represented
                by o, or if the current Type is an interface that o supports. false if neither
                of these conditions is the case, or if o is null, or if the current Type
                is an open generic type (that is, CType.ContainsGenericParameters returns
                true).</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.IsSubclassOf(Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Determines whether the class represented by the current CType derives
                 from the class represented by the specified CType.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 The c parameter is null.</exception>
            
             <param name="c">The Type to compare with the current Type.</param>
             <returns>true if the Type represented by the c parameter and the current Type represent
                 classes, and the class represented by the current Type derives from the class
                 represented by c; otherwise, false. This method also returns false if c and
                 the current Type represent the same class.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.MakeGenericType(Crestron.SimplSharp.Reflection.CType[])">
             <summary>
                 Substitutes the elements of an array of types for the type parameters of
                 the current generic type definition and returns a CType object representing
                 the resulting constructed type.
             </summary>
             
             <exception cref="T:System.InvalidOperationException">
                 The current type does not represent a generic type definition. That is, CType.IsGenericTypeDefinition
                 returns false.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 typeArguments is null.  -or- Any element of typeArguments is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The number of elements in typeArguments is not the same as the number of
                 type parameters in the current generic type definition.  -or- Any element
                 of typeArguments does not satisfy the constraints specified for the corresponding
                 type parameter of the current generic type.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 The invoked method is not supported in the base class. Derived classes must
                 provide an implementation.</exception>
            
             <param name="typeArguments">An array of types to be substituted for the type parameters of the current
                 generic type.</param>
             <returns>A CType representing the constructed type formed by substituting the
                 elements of typeArguments for the type parameters of the current generic
                 type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CType.GetHashCodeImplementation">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.Assembly">
            <summary>
                Gets the Crestron.SimplSharp.Reflection.Assembly in which the type is declared. For generic
                types, gets the Crestron.SimplSharp.Reflection.Assembly in which the generic type is defined.
            </summary>
            <value>An Crestron.SimplSharp.Reflection.Assembly instance that describes the assembly containing
                the current type. For generic types, the instance describes the assembly
                that contains the generic type definition, not the assembly that creates
                and uses a particular constructed type.</value>
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.AssemblyQualifiedName">
            <summary>
                Gets the assembly-qualified name of the CType, which includes the name
                of the assembly from which the CType was loaded.
            </summary>
            <value>The assembly-qualified name of the CType, which includes the name of
                the assembly from which the CType was loaded, or null if the current
                instance represents a generic type parameter.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.Attributes">
            <summary>
                Gets the attributes associated with the CType.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.TypeAttributes object representing the attribute set
                of the CType, unless the CType represents a generic type parameter,
                in which case the value is unspecified.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.BaseType">
            <summary>
                Gets the type from which the current CType directly inherits.
            </summary>
            <value>The CType from which the current CType directly inherits, or
                null if the current Type represents the System.Object class or an interface.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.ContainsGenericParameters">
            <summary>
                Gets a value indicating whether the current CType object has type parameters
                that have not been replaced by specific types.
            </summary>
            <value>true if the CType object is itself a generic type parameter or has
                type parameters for which specific types have not been supplied; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.DefaultBinder">
            <summary>
                Gets a reference to the default binder, which implements internal rules for
                selecting the appropriate members to be called by CType.InvokeMember(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,System.Object,System.Object[],Crestron.SimplSharp.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[]).
            </summary>
            <value>A reference to the default binder used by the system.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.FullName">
            <summary>
                Gets the fully qualified name of the CType, including the namespace
                of the CType but not the assembly.
            </summary>
            <value>The fully qualified name of the CType, including the namespace of the
                CType but not the assembly; or null if the current instance represents
                a generic type parameter, an array type, pointer type, or byref type based
                on a type parameter, or a generic type that is not a generic type definition
                but contains unresolved type parameters.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.HasElementType">
            <summary>
                Gets a value indicating whether the current CType encompasses or refers
                to another type; that is, whether the current CType is an array, a
                pointer, or is passed by reference.
            </summary>
            <value>true if the CType is an array, a pointer, or is passed by reference;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsAbstract">
            <summary>
                Gets a value indicating whether the CType is abstract and must be overridden.
            </summary>
            <value>true if the CType is abstract; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsAnsiClass">
            <summary>
                Gets a value indicating whether the string format attribute AnsiClass is
                selected for the CType.
            </summary>
            <value>true if the string format attribute AnsiClass is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsArray">
            <summary>
                Gets a value indicating whether the CType is an array.
            </summary>
            <value>true if the CType is an array; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsAutoClass">
            <summary>
                Gets a value indicating whether the string format attribute AutoClass is
                selected for the CType.
            </summary>
            <value>true if the string format attribute AutoClass is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsAutoLayout">
            <summary>
                Gets a value indicating whether the class layout attribute AutoLayout is
                selected for the CType.
            </summary>
            <value>true if the class layout attribute AutoLayout is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsByRef">
            <summary>
                Gets a value indicating whether the CType is passed by reference.
            </summary>
            <value>true if the CType is passed by reference; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsClass">
            <summary>
                Gets a value indicating whether the CType is a class; that is, not
                a value type or interface.
            </summary>
            <value>true if the CType is a class; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsCOMObject">
            <summary>
                Gets a value indicating whether the CType is a COM object.
            </summary>
            <value>true if the CType is a COM object; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsEnum">
            <summary>
                Gets a value indicating whether the current CType represents an enumeration.
            </summary>
            <value>true if the current CType represents an enumeration; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsGenericParameter">
            <summary>
                Gets a value indicating whether the current CType represents a type
                parameter in the definition of a generic type or method.
            </summary>
            <value>true if the CType object represents a type parameter of a generic type
                definition or generic method definition; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsGenericType">
            <summary>
                Gets a value indicating whether the current type is a generic type.
            </summary>
            <value>true if the current type is a generic type; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsGenericTypeDefinition">
            <summary>
                Gets a value indicating whether the current CType represents a generic
                type definition, from which other generic types can be constructed.
            </summary>
            <value>true if the CType object represents a generic type definition; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsImport">
            <summary>
                Gets a value indicating whether the CType has a System.Runtime.InteropServices.ComImportAttribute
                attribute applied, indicating that it was imported from a COM type library.
            </summary>
            <value>true if the CType has a System.Runtime.InteropServices.ComImportAttribute;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsInterface">
            <summary>
                Gets a value indicating whether the CType is an interface; that is,
                not a class or a value type.
            </summary>
            <value>true if the CType is an interface; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsNestedAssembly">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                within its own assembly.
            </summary>
            <value>true if the CType is nested and visible only within its own assembly;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsNestedFamANDAssem">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                within its own family.
            </summary>
            <value>true if the CType is nested and visible only within its own family;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsNestedFamily">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                within its own family.
            </summary>
            <value>true if the CType is nested and visible only within its own family;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsNestedFamORAssem">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                to classes that belong to either its own family or to its own assembly.
            </summary>
            <value>true if the CType is nested and visible only to classes that belong
                to its own family or to its own assembly; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsNestedPrivate">
            <summary>
                Gets a value indicating whether the CType is nested and declared private.
            </summary>
            <value>true if the CType is nested and declared private; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsNestedPublic">
            <summary>
                Gets a value indicating whether a class is nested and declared public.
            </summary>
            <value>true if the class is nested and declared public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsNotPublic">
            <summary>
                Gets a value indicating whether the CType is not declared public.
            </summary>
            <value>true if the CType is not declared public and is not a nested type;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsPointer">
            <summary>
                Gets a value indicating whether the CType is a pointer.
            </summary>
            <value>true if the CType is a pointer; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsPrimitive">
            <summary>
                Gets a value indicating whether the CType is one of the primitive types.
            </summary>
            <value>true if the CType is one of the primitive types; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsPublic">
            <summary>
                Gets a value indicating whether the CType is declared public.
            </summary>
            <value>true if the CType is declared public and is not a nested type; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsSealed">
            <summary>
                Gets a value indicating whether the CType is declared sealed.
            </summary>
            <value>true if the CType is declared sealed; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsSpecialName">
            <summary>
                Gets a value indicating whether the CType has a name that requires
                special handling.
            </summary>
            <value>true if the CType has a name that requires special handling; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsUnicodeClass">
            <summary>
                Gets a value indicating whether the string format attribute UnicodeClass
                is selected for the CType.
            </summary>
            <value>true if the string format attribute UnicodeClass is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsValueType">
            <summary>
                Gets a value indicating whether the CType is a value type.
            </summary>
            <value>true if the CType is a value type; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.IsVisible">
            <summary>
                Gets a value indicating whether the CType can be accessed by code outside
                the assembly.
            </summary>
            <value>true if the current CType is a public type or a public nested type
                such that all the enclosing types are public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.Module">
            <summary>
                Gets the module (the DLL) in which the current CType is defined.
            </summary>
            <value>The module in which the current CType is defined.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.Namespace">
            <summary>
                Gets the namespace of the CType.
            </summary>
            <value>The namespace of the CType, or null if the current instance represents
                a generic parameter.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.TypeHandle">
             <summary>
                 Gets the handle for the current CType.
             </summary>
             
             <exception cref="T:System.NotSupportedException">
                 The .NET Compact Framework does not currently support this property.</exception>
            
             <value>The handle for the current CType.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CType.UnderlyingSystemType">
            <summary>
                Indicates the type provided by the common language runtime that represents
                this type.
            </summary>
            <value>The underlying system type for the CType.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.CTypeImpl">
            <summary>
                Represents type declarations: class types, interface types, array types,
                value types, enumeration types, type parameters, generic type definitions,
                and open or closed constructed generic types.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the CType class.
            </summary>
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            <exception cref="T:System.TypeLoadException">type cannot be found.</exception>
            <param name="type">The type.</param>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.Equals(Crestron.SimplSharp.Reflection.CType)">
            <summary>
                Determines if the underlying system type of the current CType is the
                same as the underlying system type of the specified CType.
            </summary>
            <param name="o">The CType whose underlying system type is to be compared with the underlying
                system type of the current CType.</param>
            <returns>true if the underlying system type of o is the same as the underlying system
                type of the current CType; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.Equals(System.Type)">
            <summary>
                Determines if the underlying system type of the current CType is the
                same as the specified system Type.
            </summary>
            <param name="T">The system type that is to be compared with the underlying
                system type of the current CType.</param>
            <returns>true if the system type of T is the same as the underlying system
                type of the current CType; otherwise, false.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetArrayRank">
             <summary>
                 Gets the number of dimensions in an System.Array.
             </summary>
             
             <exception cref="T:System.NotSupportedException">
                 The functionality of this method is unsupported in the base class and must
                 be implemented in a derived class instead.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The current Type is not an array.</exception>
            
             <returns>An System.Int32 containing the number of dimensions in the current Type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetConstructor(Crestron.SimplSharp.Reflection.CType[])">
             <summary>
                 Searches for a public instance constructor whose parameters match the types
                 in the specified array.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 types is null.  -or- One of the elements in types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted constructor not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the desired constructor.  -or- An empty array of CType
                 objects, to get a constructor that takes no parameters. </param>
             <returns>A Crestron.SimplSharp.Reflection.ConstructorInfo object representing the public instance
                 constructor whose parameters match the types in the parameter type array,
                 if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetConstructor(Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for a constructor whose parameters match the specified argument
                 types and modifiers, using the specified binding constraints.
             </summary>
            
             <exception cref="T:System.ArgumentNullException">
                 types is null.  -or- One of the elements in types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.  -or- types
                 and modifiers do not have the same length.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag or constructor not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the constructor to get.  -or- An empty array of the
                 type CType (that is, Type[] types = new Type[0]) to get a constructor
                 that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the parameter type
                 array. The default binder does not process this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.ConstructorInfo object representing the constructor that
                 matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetConstructors">
            <summary>
                Returns all the public constructors defined for the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.ConstructorInfo objects representing all the
                public instance constructors defined for the current CType, but not
                including the type initializer (static constructor). If no public instance
                constructors are defined for the current CType, or if the current CType
                represents a type parameter in the definition of a generic type or generic
                method, an empty array of type Crestron.SimplSharp.Reflection.ConstructorInfo is returned.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetConstructors(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the constructors defined
                for the current CType, using the specified BindingFlags.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.ConstructorInfo objects representing all constructors
                defined for the current CType that match the specified binding constraints,
                including the type initializer if it is defined. Returns an empty array of
                type Crestron.SimplSharp.Reflection.ConstructorInfo if no constructors are defined for
                the current CType, if none of the defined constructors match the binding
                constraints, or if the current CType represents a type parameter in
                the definition of a generic type or generic method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetDefaultMembers">
            <summary>
                Searches for the members defined for the current CType whose Crestron.SimplSharp.Reflection.DefaultMemberAttribute
                is set.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing all default
                members of the current CType.  -or- An empty array of type Crestron.SimplSharp.Reflection.MemberInfo,
                if the current CType does not have default members.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetElementType">
            <summary>
                When overridden in a derived class, returns the CType of the object
                encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <returns>The CType of the object encompassed or referred to by the current array,
                pointer, or reference type, or null if the current CType is not an
                array or a pointer, or is not passed by reference, or represents a generic
                type or a type parameter in the definition of a generic type or generic method.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetEvent(System.String)">
             <summary>
                 Returns the Crestron.SimplSharp.Reflection.EventInfo object representing the specified
                 public event.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <param name="name">The System.String containing the name of an event which is declared or inherited
                 by the current CType.</param>
             <returns>The Crestron.SimplSharp.Reflection.EventInfo object representing the specified public
                 event which is declared or inherited by the current CType, if found;
                 otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetEvent(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 When overridden in a derived class, returns the Crestron.SimplSharp.Reflection.EventInfo
                 object representing the specified event, using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of an event which is declared or inherited
                 by the current CType.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>The Crestron.SimplSharp.Reflection.EventInfo object representing the specified event which
                 is declared or inherited by the current CType, if found; otherwise,
                 null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetEvents">
            <summary>
                Returns all the public events that are declared or inherited by the current
                CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.EventInfo objects representing all the public
                events which are declared or inherited by the current CType.  -or-
                An empty array of type Crestron.SimplSharp.Reflection.EventInfo, if the current CType
                does not have public events.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetEvents(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for events that are declared
                or inherited by the current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.EventInfo objects representing all events which
                are declared or inherited by the current CType that match the specified
                binding constraints.  -or- An empty array of type Crestron.SimplSharp.Reflection.EventInfo,
                if the current CType does not have events, or if none of the events
                match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetField(System.String)">
             <summary>
                 Searches for the public field with the specified name.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 This CType object is a Crestron.SimplSharp.Reflection.Emit.TypeBuilder whose Crestron.SimplSharp.Reflection.Emit.TypeBuilder.CreateType()
                 method has not yet been called.</exception>
            
             <param name="name">The System.String containing the name of the data field to get.</param>
             <returns>A Crestron.SimplSharp.Reflection.FieldInfo object representing the public field with the
                 specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetField(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified field, using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the data field to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A Crestron.SimplSharp.Reflection.FieldInfo object representing the field that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetFields">
            <summary>
                Returns all the public fields of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.FieldInfo objects representing all the public
                fields defined for the current CType.  -or- An empty array of type
                Crestron.SimplSharp.Reflection.FieldInfo, if no public fields are defined for the current
                CType.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetFields(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the fields defined for the
                current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.FieldInfo objects representing all fields defined
                for the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.FieldInfo, if no fields are
                defined for the current CType, or if none of the defined fields match
                the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetGenericArguments">
            <summary>
                Returns an array of CType objects that represent the type arguments
                of a generic type or the type parameters of a generic type definition.
            </summary>
            <returns>An array of CType objects that represent the type arguments of a generic
                type. Returns an empty array if the current type is not a generic type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetGenericTypeDefinition">
             <summary>
                 Returns a CType object that represents a generic type definition from
                 which the current generic type can be constructed.
             </summary>
             
             <exception cref="T:System.InvalidOperationException">
                 The current type is not a generic type. That is, CType.IsGenericType
                 returns false.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 The invoked method is not supported in the base class. Derived classes must
                 provide an implementation.</exception>
            
             <returns>A CType object representing a generic type from which the current type
                 can be constructed.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetHashCodeImplementation">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>An System.Int32 containing the hash code for this instance.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetInterfaces">
             <summary>
                 When overridden in a derived class, gets all the interfaces implemented or
                 inherited by the current CType.
             </summary>
             <exception cref="T:Crestron.SimplSharp.Reflection.TargetInvocationException">
                 A static initializer is invoked and throws an exception.</exception>
            
             <returns>An array of CType objects representing all the interfaces implemented
                 or inherited by the current CType.  -or- An empty array of type CType,
                 if no interfaces are implemented or inherited by the current CType.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMember(System.String)">
             <summary>
                 Searches for the public members with the specified name.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <param name="name">The System.String containing the name of the public members to get.</param>
             <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing the public
                 members with the specified name, if found; otherwise, an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMember(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified members, using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the members to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return an empty array.</param>
             <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing the public
                 members with the specified name, if found; otherwise, an empty array.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMembers">
            <summary>
                Returns all the public members of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing all the public
                members of the current CType.  -or- An empty array of type Crestron.SimplSharp.Reflection.MemberInfo,
                if the current CType does not have public members.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMembers(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the members defined for
                the current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.MemberInfo objects representing all members
                defined for the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.MemberInfo, if no members
                are defined for the current CType, or if none of the defined members
                match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethod(System.String)">
             <summary>
                 Searches for the public method with the specified name.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted method not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the public method to get.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the public method with
                 the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethod(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified method, using the specified binding constraints.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and matching the specified
                 binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethod(System.String,Crestron.SimplSharp.Reflection.CType[])">
             <summary> 
                 Searches for the specified public method whose parameters match the specified
                 argument types.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and specified parameters.
             </exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.</exception>
             
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the public method whose
                 parameters match the specified argument types, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethod(System.String,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for the specified public method whose parameters match the specified
                 argument types and modifiers.
             </summary>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and specified parameters.
             </exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.</exception>
             
             <param name="name">The System.String containing the name of the public method to get</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 To be only used when calling through COM interop, and only parameters that
                 are passed by reference are handled. The default binder does not process
                 this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the public method that
                 matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethod(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Searches for the specified method whose parameters match the specified argument
                 types and modifiers, using the specified binding constraints.
             </summary>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and matching the specified
                 binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 To be only used when calling through COM interop, and only parameters that
                 are passed by reference are handled. The default binder does not process
                 this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method that matches
                 the specified requirements, if found; otherwise, null</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethod(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CallingConventions,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary>
                 Searches for the specified method whose parameters match the specified argument
                 types and modifiers, using the specified binding constraints and the specified
                 calling convention.
             </summary>
                 
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one method is found with the specified name and matching the specified
                 binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.  -or- One of the elements in types is
                 null.</exception>
            
             <exception cref="T:System.ArgumentException">/exception&gt;:
                 types is multidimensional.  -or- modifiers is multidimensional.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="name">The System.String containing the name of the method to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="callConvention">The Crestron.SimplSharp.Reflection.CallingConventions object that specifies the set of
                 rules to use regarding the order and layout of arguments, how the return
                 value is passed, what registers are used for arguments, and how the stack
                 is cleaned up.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the method to get.  -or- An empty array of CType
                 objects to get a method that takes no parameters.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 To be only used when calling through COM interop, and only parameters that
                 are passed by reference are handled. The default binder does not process
                 this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.MethodInfo object representing the method that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethods">
            <summary>
                Returns all the public methods of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects representing all the public
                methods defined for the current CType.  -or- An empty array of type
                Crestron.SimplSharp.Reflection.MethodInfo, if no public methods are defined for the current
                CType..</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetMethods(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the methods defined for
                the current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.MethodInfo objects representing all methods
                defined for the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.MethodInfo, if no methods
                are defined for the current CType, or if none of the defined methods
                match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetNestedType(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 When overridden in a derived class, searches for the specified nested type,
                 using the specified binding constraints.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The string containing the name of the nested type to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A CType object representing the nested type that matches the specified
                 requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetNestedTypes(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the types nested in the
                current CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of CType objects representing all the types nested in the
                current CType that match the specified binding constraints (the search
                is not recursive), or an empty array of type CType, if no nested types
                are found that match the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperties">
            <summary>
                Returns all the public properties of the current CType.
            </summary>
            <returns>An array of Crestron.SimplSharp.Reflection.PropertyInfo objects representing all public
                properties of the current CType.  -or- An empty array of type Crestron.SimplSharp.Reflection.PropertyInfo,
                if the current CType does not have public properties.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperties(Crestron.SimplSharp.Reflection.BindingFlags)">
            <summary>
                When overridden in a derived class, searches for the properties of the current
                CType, using the specified binding constraints.
            </summary>
            
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
            <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                how the search is conducted.  -or- Zero, to return null.</param>
            <returns>An array of Crestron.SimplSharp.Reflection.PropertyInfo objects representing all properties
                of the current CType that match the specified binding constraints.
                 -or- An empty array of type Crestron.SimplSharp.Reflection.PropertyInfo, if the current
                CType does not have properties, or if none of the properties match
                the binding constraints.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperty(System.String)">
             <summary>
                 Searches for the public property with the specified name.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name. See Remarks.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
            
             <param name="name">The System.String containing the name of the public property to get.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperty(System.String,Crestron.SimplSharp.Reflection.BindingFlags)">
             <summary>
                 Searches for the specified property, using the specified binding constraints.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified binding constraints. See Remarks.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            
             <param name="name">The System.String containing the name of the property to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the property that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperty(System.String,Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Searches for the public property with the specified name and return type.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null, or returnType is null.</exception>
            
             <param name="name">The System.String containing the name of the public property to get.</param>
             <param name="returnType">The return type of the property.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperty(System.String,Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[])">
             <summary> 
                 Searches for the specified public property whose parameters match the specified
                 argument types.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified argument types and modifiers.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 An element of types is null.</exception>
             
             <param name="name">The System.String containing the name of the public property to get.</param>
             <param name="returnType">The return type of the property.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the indexed property to get.  -or- An empty array of
                 the type CType (that is, Type[] types = new Type[0]) to get a property
                 that is not indexed.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 that matches the specified argument types, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperty(System.String,Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for the specified public property whose parameters match the specified
                 argument types and modifiers.
             </summary>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified argument types and modifiers.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.  -or- types
                 and modifiers do not have the same length.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 An element of types is null.</exception>
             
             <param name="name">The System.String containing the name of the public property to get.</param>
             <param name="returnType">The return type of the property.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the indexed property to get.  -or- An empty array of
                 the type CType (that is, Type[] types = new Type[0]) to get a property
                 that is not indexed.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 The default binder does not process this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the public property
                 that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetProperty(System.String,Crestron.SimplSharp.Reflection.BindingFlags,Crestron.SimplSharp.Reflection.Binder,Crestron.SimplSharp.Reflection.CType,Crestron.SimplSharp.Reflection.CType[],Crestron.SimplSharp.Reflection.ParameterModifier[])">
             <summary> 
                 Searches for the specified property whose parameters match the specified
                 argument types and modifiers, using the specified binding constraints.
             </summary>
            
             <exception cref="T:Crestron.SimplSharp.Reflection.AmbiguousMatchException">
                 More than one property is found with the specified name and matching the
                 specified binding constraints.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 name is null.  -or- types is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 types is multidimensional.  -or- modifiers is multidimensional.  -or- types
                 and modifiers do not have the same length.</exception>
            
             <exception cref="T:System.NullReferenceException">
                 An element of types is null.</exception>
             
             <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                 Restricted BindingFlag not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
             
             <param name="name">The System.String containing the name of the property to get.</param>
             <param name="bindingAttr">A bitmask comprised of one or more Crestron.SimplSharp.Reflection.BindingFlags that specify
                 how the search is conducted.  -or- Zero, to return null.</param>
             <param name="binder">A Crestron.SimplSharp.Reflection.Binder object that defines a set of properties and enables
                 binding, which can involve selection of an overloaded method, coercion of
                 argument types, and invocation of a member through reflection.  -or- null,
                 to use the CType.DefaultBinder.</param>
             <param name="returnType">The return type of the property.</param>
             <param name="types">An array of CType objects representing the number, order, and type
                 of the parameters for the indexed property to get.  -or- An empty array of
                 the type CType (that is, Type[] types = new Type[0]) to get a property
                 that is not indexed.</param>
             <param name="modifiers">An array of Crestron.SimplSharp.Reflection.ParameterModifier objects representing the
                 attributes associated with the corresponding element in the types array.
                 The default binder does not process this parameter.</param>
             <returns>A Crestron.SimplSharp.Reflection.PropertyInfo object representing the property that matches
                 the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.IsAssignableFrom(Crestron.SimplSharp.Reflection.CType)">
            <summary>
                Determines whether an instance of the current CType can be assigned
                from an instance of the specified Type.
            </summary>
            <param name="c">The Type to compare with the current Type.</param>
            <returns>true if c and the current Type represent the same type, or if the current
                Type is in the inheritance hierarchy of c, or if the current Type is an interface
                that c implements, or if c is a generic type parameter and the current Type
                represents one of the constraints of c. false if none of these conditions
                are true, or if c is null.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.IsInstanceOfType(System.Object)">
            <summary>
                Determines whether the specified object is an instance of the current CType.
            </summary>
            <param name="o">The object to compare with the current Type.</param>
            <returns>true if the current Type is in the inheritance hierarchy of the object represented
                by o, or if the current Type is an interface that o supports. false if neither
                of these conditions is the case, or if o is null, or if the current Type
                is an open generic type (that is, CType.ContainsGenericParameters returns
                true).</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.IsSubclassOf(Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Determines whether the class represented by the current CType derives
                 from the class represented by the specified CType.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 The c parameter is null.</exception>
            
             <param name="c">The Type to compare with the current Type.</param>
             <returns>true if the Type represented by the c parameter and the current Type represent
                 classes, and the class represented by the current Type derives from the class
                 represented by c; otherwise, false. This method also returns false if c and
                 the current Type represent the same class.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.MakeGenericType(Crestron.SimplSharp.Reflection.CType[])">
             <summary>
                 Substitutes the elements of an array of types for the type parameters of
                 the current generic type definition and returns a CType object representing
                 the resulting constructed type.
             </summary>
             
             <exception cref="T:System.InvalidOperationException">
                 The current type does not represent a generic type definition. That is, CType.IsGenericTypeDefinition
                 returns false.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 typeArguments is null.  -or- Any element of typeArguments is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 The number of elements in typeArguments is not the same as the number of
                 type parameters in the current generic type definition.  -or- Any element
                 of typeArguments does not satisfy the constraints specified for the corresponding
                 type parameter of the current generic type.</exception>
            
             <exception cref="T:System.NotSupportedException">
                 The invoked method is not supported in the base class. Derived classes must
                 provide an implementation.</exception>
            
             <param name="typeArguments">An array of types to be substituted for the type parameters of the current
                 generic type.</param>
             <returns>A CType representing the constructed type formed by substituting the
                 elements of typeArguments for the type parameters of the current generic
                 type.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.ToString">
            <summary>
                Returns a String representing the name of the current Type
            </summary>
            <returns>A System.String representing the name of the current CType.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetCustomAttributes(System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array containing all the custom
                 attributes.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array that contains all the custom attributes, or an array with zero elements
                 if no attributes are defined.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.GetCustomAttributes(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
             <summary>
                 When overridden in a derived class, returns an array of custom attributes
                 identified by CType.
             </summary>
             <exception cref="T:System.TypeLoadException">
                 A custom attribute type cannot be loaded.</exception>
            
             <exception cref="T:System.ArgumentNullException">
                 If attributeType is null.</exception>
            
             <exception cref="T:System.InvalidOperationException">
                 This member belongs to a type that is loaded into the reflection-only context.
                 See How to: Load Assemblies into the SimplSharp.Reflection-Only Context.</exception>
            
             <param name="attributeType">The type of attribute to search for. Only attributes that are assignable
                 to this type are returned.</param>
             <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
             <returns>An array of custom attributes applied to this member, or an array with zero
                 (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CTypeImpl.IsDefined(Crestron.SimplSharp.Reflection.CType,System.Boolean)">
            <summary>
                When overridden in a derived class, indicates whether one or more instance
                of attributeType is applied to this member.
            </summary>
            <param name="attributeType">The Type object to which the custom attributes are applied.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>true if one or more instance of attributeType is applied to this member;
                otherwise false.</returns>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.Assembly">
            <summary>
                Gets the Crestron.SimplSharp.Reflection.Assembly in which the type is declared. For generic
                types, gets the Crestron.SimplSharp.Reflection.Assembly in which the generic type is defined.
            </summary>
            <value>An Crestron.SimplSharp.Reflection.Assembly instance that describes the assembly containing
                the current type. For generic types, the instance describes the assembly
                that contains the generic type definition, not the assembly that creates
                and uses a particular constructed type.</value>
                
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.AssemblyQualifiedName">
            <summary>
                Gets the assembly-qualified name of the CType, which includes the name
                of the assembly from which the CType was loaded.
            </summary>
            <value>The assembly-qualified name of the CType, which includes the name of
                the assembly from which the CType was loaded, or null if the current
                instance represents a generic type parameter.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.Attributes">
            <summary>
                Gets the attributes associated with the CType.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.TypeAttributes object representing the attribute set
                of the CType, unless the CType represents a generic type parameter,
                in which case the value is unspecified.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.BaseType">
            <summary>
                Gets the type from which the current CType directly inherits.
            </summary>
            <value>The CType from which the current CType directly inherits, or
                null if the current Type represents the System.Object class or an interface.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.ContainsGenericParameters">
            <summary>
                Gets a value indicating whether the current CType object has type parameters
                that have not been replaced by specific types.
            </summary>
            <value>true if the CType object is itself a generic type parameter or has
                type parameters for which specific types have not been supplied; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.FullName">
            <summary>
                Gets the fully qualified name of the CType, including the namespace
                of the CType but not the assembly.
            </summary>
            <value>The fully qualified name of the CType, including the namespace of the
                CType but not the assembly; or null if the current instance represents
                a generic type parameter, an array type, pointer type, or byref type based
                on a type parameter, or a generic type that is not a generic type definition
                but contains unresolved type parameters.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.HasElementType">
            <summary>
                Gets a value indicating whether the current CType encompasses or refers
                to another type; that is, whether the current CType is an array, a
                pointer, or is passed by reference.
            </summary>
            <value>true if the CType is an array, a pointer, or is passed by reference;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsAbstract">
            <summary>
                Gets a value indicating whether the CType is abstract and must be overridden.
            </summary>
            <value>true if the CType is abstract; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsAnsiClass">
            <summary>
                Gets a value indicating whether the string format attribute AnsiClass is
                selected for the CType.
            </summary>
            <value>true if the string format attribute AnsiClass is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsArray">
            <summary>
                Gets a value indicating whether the CType is an array.
            </summary>
            <value>true if the CType is an array; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsAutoClass">
            <summary>
                Gets a value indicating whether the string format attribute AutoClass is
                selected for the CType.
            </summary>
            <value>true if the string format attribute AutoClass is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsAutoLayout">
            <summary>
                Gets a value indicating whether the class layout attribute AutoLayout is
                selected for the CType.
            </summary>
            <value>true if the class layout attribute AutoLayout is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsByRef">
            <summary>
                Gets a value indicating whether the CType is passed by reference.
            </summary>
            <value>true if the CType is passed by reference; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsClass">
            <summary>
                Gets a value indicating whether the CType is a class; that is, not
                a value type or interface.
            </summary>
            <value>true if the CType is a class; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsCOMObject">
            <summary>
                Gets a value indicating whether the CType is a COM object.
            </summary>
            <value>true if the CType is a COM object; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsEnum">
            <summary>
                Gets a value indicating whether the current CType represents an enumeration.
            </summary>
            <value>true if the current CType represents an enumeration; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsGenericParameter">
            <summary>
                Gets a value indicating whether the current CType represents a type
                parameter in the definition of a generic type or method.
            </summary>
            <value>true if the CType object represents a type parameter of a generic type
                definition or generic method definition; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsGenericType">
            <summary>
                Gets a value indicating whether the current type is a generic type.
            </summary>
            <value>true if the current type is a generic type; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsGenericTypeDefinition">
            <summary>
                Gets a value indicating whether the current CType represents a generic
                type definition, from which other generic types can be constructed.
            </summary>
            <value>true if the CType object represents a generic type definition; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsImport">
            <summary>
                Gets a value indicating whether the CType has a System.Runtime.InteropServices.ComImportAttribute
                attribute applied, indicating that it was imported from a COM type library.
            </summary>
            <value>true if the CType has a System.Runtime.InteropServices.ComImportAttribute;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsInterface">
            <summary>
                Gets a value indicating whether the CType is an interface; that is,
                not a class or a value type.
            </summary>
            <value>true if the CType is an interface; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsNestedAssembly">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                within its own assembly.
            </summary>
            <value>true if the CType is nested and visible only within its own assembly;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsNestedFamANDAssem">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                to classes that belong to both its own family and its own assembly.
            </summary>
            <value>true if the CType is nested and visible only to classes that belong
                to both its own family and its own assembly; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsNestedFamily">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                within its own family.
            </summary>
            <value>true if the CType is nested and visible only within its own family;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsNestedFamORAssem">
            <summary>
                Gets a value indicating whether the CType is nested and visible only
                to classes that belong to either its own family or to its own assembly.
            </summary>
            <value>true if the CType is nested and visible only to classes that belong
                to its own family or to its own assembly; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsNestedPrivate">
            <summary>
                Gets a value indicating whether the CType is nested and declared private.
            </summary>
            <value>true if the CType is nested and declared private; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsNestedPublic">
            <summary>
                Gets a value indicating whether a class is nested and declared public.
            </summary>
            <value>true if the class is nested and declared public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsNotPublic">
            <summary>
                Gets a value indicating whether the CType is not declared public.
            </summary>
            <value>true if the CType is not declared public and is not a nested type;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsPointer">
            <summary>
                Gets a value indicating whether the CType is a pointer.
            </summary>
            <value>true if the CType is a pointer; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsPrimitive">
            <summary>
                Gets a value indicating whether the CType is one of the primitive types.
            </summary>
            <value>true if the CType is one of the primitive types; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsPublic">
            <summary>
                Gets a value indicating whether the CType is declared public.
            </summary>
            <value>true if the CType is declared public and is not a nested type; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsSealed">
            <summary>
                Gets a value indicating whether the CType is declared sealed.
            </summary>
            <value>true if the CType is declared sealed; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsSpecialName">
            <summary>
                Gets a value indicating whether the CType has a name that requires
                special handling.
            </summary>
            <value>true if the CType has a name that requires special handling; otherwise,
                false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsUnicodeClass">
            <summary>
                Gets a value indicating whether the string format attribute UnicodeClass
                is selected for the CType.
            </summary>
            <value>true if the string format attribute UnicodeClass is selected for the CType;
                otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsValueType">
            <summary>
                Gets a value indicating whether the CType is a value type.
            </summary>
            <value>true if the CType is a value type; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.IsVisible">
            <summary>
                Gets a value indicating whether the CType can be accessed by code outside
                the assembly.
            </summary>
            <value>true if the current CType is a public type or a public nested type
                such that all the enclosing types are public; otherwise, false.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.Module">
            <summary>
                Gets the module (the DLL) in which the current CType is defined.
            </summary>
            <value>The module in which the current CType is defined.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.Namespace">
            <summary>
                Gets the namespace of the CType.
            </summary>
            <value>The namespace of the CType, or null if the current instance represents
                a generic parameter.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.TypeHandle">
             <summary>
                 Gets the handle for the current CType.
             </summary>
             
             <exception cref="T:System.NotSupportedException">
                 The .NET Compact Framework does not currently support this property.</exception>
            
             <value>The handle for the current CType.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.UnderlyingSystemType">
            <summary>
                Indicates the type provided by the common language runtime that represents
                this type.
            </summary>
            <value>The underlying system type for the CType.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.DeclaringType">
            <summary>
                Gets the class that declares this member.
            </summary>
            <value>The Type object for the class that declares this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.MemberType">
            <summary>
                When overridden in a derived class, gets a Crestron.SimplSharp.Reflection.MemberTypes
                value indicating the type of the member — method, constructor, event, and
                so on.
            </summary>
            <value>A Crestron.SimplSharp.Reflection.MemberTypes value indicating the type of member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.Name">
            <summary>
                Gets the name of the current member.
            </summary>
            <value>A System.String containing the name of this member.</value>
        </member>
        <member name="P:Crestron.SimplSharp.Reflection.CTypeImpl.ReflectedType">
            <summary>
                Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
            <value>The Type object through which this MemberInfo object was obtained.</value>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.Marshal">
            <summary>
                Partial wrapper for System.Runtime.InteropServices.Marshal
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Marshal.SizeOf(System.Object)">
            <summary>
                Returns the unmanaged size of an object in bytes.
            </summary>
            <exception cref="T:System.ArgumentNullException">The structure parameter is null.</exception>
            <param name="structure">The object whose size is to be returned.</param>
            <returns>The size of the structure parameter in unmanaged code.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Marshal.SizeOf(System.Type)">
            <summary>
                Returns the size of an unmanaged type in bytes.
            </summary>
            <exception cref="T:System.ArgumentException">The t parameter is a generic type.</exception>
            <exception cref="T:System.ArgumentNullException">The t parameter is null</exception>
            <param name="t">The System.Type whose size is to be returned.</param>
            <returns>The size of the structure parameter in unmanaged code.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.Activator">
            <summary>
                Partial wrapper for System.Activator
            </summary>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Activator.CreateInstance``1">
            <summary>
                Creates an instance of the type designated by the specified generic type
            </summary>
            <exception cref="T:Crestron.SimplSharp.Reflection.RestrictionViolationException">
                not allowed in Crestron's sandbox due to sandbox restrictions.</exception>
            <typeparam name="T">Type</typeparam>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.Activator.CreateInstance(Crestron.SimplSharp.Reflection.CType)">
             <summary>
                 Creates an instance of the specified type using that type's default constructor.
             </summary>
             <exception cref="T:System.ArgumentNullException">
                 type is null.</exception>
            
             <exception cref="T:System.ArgumentException">
                 type is not a RuntimeType. -or- type is an open generic type (that is, the
                 System.Type.ContainsGenericParameters property returns true).</exception>
            
             <exception cref="T:System.NotSupportedException">
                 type cannot be a System.Reflection.Emit.TypeBuilder.  -or- Creation of System.TypedReference,
                 System.ArgIterator, System.Void, and System.RuntimeArgumentHandle types,
                 or arrays of those types, is not supported.</exception>
            
             <exception cref="T:System.Reflection.TargetInvocationException">
                 The constructor being called throws an exception.</exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have permission to call this constructor.</exception>
            
             <exception cref="T:System.MemberAccessException">
                 Cannot create an instance of an abstract class, or this member was invoked
                 with a late-binding mechanism.</exception>
            
             <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">
                 The COM type was not obtained through Overload:System.Type.GetTypeFromProgID
                 or Overload:System.Type.GetTypeFromCLSID.</exception>
            
             <exception cref="T:System.MissingMethodException">
                 No matching public constructor was found.</exception>
            
             <exception cref="T:System.Runtime.InteropServices.COMException">
                 type is a COM object but the class identifier used to obtain the type is
                 invalid, or the identified class is not registered.</exception>
            
             <exception cref="T:System.TypeLoadException">
                 type is not a valid type.</exception>
             
             <param name="type">The type of object to create.</param>
             <returns>A reference to the newly created object.</returns>
             
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.CDelegate">
            <summary> 
            Class to extend the System.Delegate class 
            </summary> 
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CDelegate.GetMethod(System.Delegate)">
            <summary>
            Gets the method represented by the delegate.
            </summary>
            
            <exception cref="T:System.MemberAccessException">
            The caller does not have access to the method represented by the delegate
            (for example, if the method is private).</exception>
            
            <param name="paramDelegate">this delegate</param>
            
            <returns>
            A Crestron.SimplSharp.Reflection.MethodInfo describing the method represented by the delegate.
            </returns>
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.CDelegate.CreateDelegate(Crestron.SimplSharp.Reflection.CType,System.Object,Crestron.SimplSharp.Reflection.MethodInfo)">
             <summary>
             Creates a delegate of the specified type that represents the specified static
             or instance method, with the specified first argument.
             </summary>
             
             <exception cref="T:System.ArgumentNullException">
                 type is null.  -or- method is null.
             </exception>
            
             <exception cref="T:System.ArgumentException">
                 type does not inherit System.MulticastDelegate.  -or- type is not a RuntimeType.
                 See Runtime Types in Reflection. -or- method cannot be bound.  -or- method
                 is not a RuntimeMethodInfo. See Runtime Types in Reflection.
             </exception>
            
             <exception cref="T:System.MissingMethodException">
                 The Invoke method of type is not found.
             </exception>
            
             <exception cref="T:System.MethodAccessException">
                 The caller does not have the permissions necessary to access method.
             </exception>
             
             <param name="type">The System.Type of delegate to create</param>
             <param name="firstArgument">The object to which the delegate is bound, or null to treat method as static
                 (Shared in Visual Basic).</param>
             <param name="method">The System.Reflection.MethodInfo describing the static or instance method
                 the delegate is to represent.</param>
             
             <returns>A delegate of the specified type that represents the specified static or
                 instance method.</returns>
        </member>
        <member name="T:Crestron.SimplSharp.Reflection.TypeExtensions">
            <summary> 
            Class to extend the System.Type class 
            </summary> 
        </member>
        <member name="M:Crestron.SimplSharp.Reflection.TypeExtensions.GetCType(System.Type)">
            <summary> 
            Get the CType of this current instance. 
            </summary> 
            <param name="type">Instance to return the type of.</param> 
            <returns>The Crestron.CType instance that represents the exact runtime crestron type of the current instance.</returns>  
        </member>
    </members>
</doc>
