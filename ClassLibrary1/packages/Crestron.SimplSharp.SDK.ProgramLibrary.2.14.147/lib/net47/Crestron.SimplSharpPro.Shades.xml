<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Crestron.SimplSharpPro.Shades</name>
    </assembly>
    <members>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn">
            <summary>
            Cresnet based 1Nm digital QMT shade motor for 17.5-Inch roller shades and larger, with Digital Quiet Motor Technology, and Horizontal Sheer Tilt Control.
            This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.
            </summary>
            <example>See <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn"/> for usage example.</example>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass">
            <summary>
            Base class for the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/>, <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn"/>  and the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn"/> devices.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.ShadeWithBasicSettings">
            <summary>
            Base class for shades that contain the basic shade settings.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeWithBasicSettings.#ctor(System.String,System.Object)">
            <summary>
            Constructor to generate a new shade of group one.
            </summary>
            <param name="paramDeviceName">Name of the device.</param>
            <param name="paramParent">The parent that a given object was added to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeWithBasicSettings.InitializeSpecificShadeDevice">
            <summary>
            Method to initialize the shade settings slot.
            </summary>        
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeWithBasicSettings.ShadeSettings">
            <summary>
            Sub class that contains configuration methods and property for the shade.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger with <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds"/>.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <param name="deviceName"> Name of the device</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> device is attached to. </param>
            <param name="deviceName"> Name of the device</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 10 to 30, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.DeviceGroups">
            <summary>
            Shade groups that this shade has been added to.
            The keys are the shade group IDs.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.CresnetCsmQmtdc2562Cn">
            <summary>
            Auto generated class for <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.CresnetCsmQmtdc2562Cn.CsmQmtdc2562CnErrorStatus">
            <summary>
            Error Status Class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.CresnetCsmQmtdc2562Cn.CsmQmtdc2562CnErrorStatus.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.CresnetCsmQmtdc2562Cn.CsmQmtdc2562CnShadeSettings">
            <summary>
            Shade Settings Class. 
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.CresnetCsmQmtdc2562Cn.CsmQmtdc2562CnShadeSettings.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            Integer Parameters:
            	"UseMinimalRcb"     	        Default Value:0                       	Type: Decimal
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.CresnetCsmQmtdc2562Cn.CsmQmtdc2562CnShadeControls">
            <summary>
            Shade Controls Class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcCnBaseClass.CresnetCsmQmtdc2562Cn.CsmQmtdc2562CnShadeControls.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn"/> device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn"/> device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn"/> device is attached to. </param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.InitializeShadeInputs">
            <summary>
            Initialize the Tilt input join for this device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.InitializeShadeOutputs">
            <summary>
            Initialized the Tilt output join for this device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.OpenTilt">
            <summary>
            Method to tilt the shade all the way to the Tilt Open Limit.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.CloseTilt">
            <summary>
            Method to tilt the Shade all the way to the Tilt Closed Limit.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.Tilt">
            <summary>
            Set the Tilt of this device. A tilt of 0 is equivalent to 0 degrees vertical; 100 is equivalent to 90 degrees horizontal. Valid values are from 0 to 100 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.TiltFeedback">
            <summary>
            Feedback to report the current Tilt of this device. Valid values are from 0 to 100
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.ShadeBase.TiltFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.TiltFullOpenedFeedback">
            <summary>
            Indicates that the Tilt feature has reached its open limit.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.ShadeBase.TiltFullOpenedEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.TiltFullClosedFeedback">
            <summary>
            Indicates that the Tilt feature has reached its closed limit.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.ShadeBase.TiltFullClosedEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.TiltUp">
            <summary>
            Tilts the shade toward the Tilt Open limit of travel when the value is changed from false to true and stops when set to false.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerCn.TiltDown">
            <summary>
            Tilts the shade toward the Tilt Closed limit of travel when the value is changed from false to true and stops when set to false.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx">
            <summary>
            infiNET EX based 1Nm digital QMT shade motor for 17.5-Inch roller shades and larger , with Digital Quiet Motor Technology, and Horizontal Sheer Tilt Control.
            This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.
            </summary>
            <example>See <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Ex"/> for usage example.</example>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass">
            <summary>
            Base class for the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/>, <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Ex"/> and the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Ex"/> devices.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/> device.</param>
            <param name="paramGateway">RF gateway to attach this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/> device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
            <param name="deviceName"> Name of the device</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 10 to 30, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.DeviceGroups">
            <summary>
            Shade groups that this shade has been added to.
            The keys are the shade group IDs.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.RfCsmQmtdc2562Ex">
            <summary>
            Auto generated class for <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.RfCsmQmtdc2562Ex.CsmQmtdc2562ExErrorStatus">
            <summary>
            Error status Class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.RfCsmQmtdc2562Ex.CsmQmtdc2562ExErrorStatus.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.RfCsmQmtdc2562Ex.CsmQmtdc2562ExShadeControls">
            <summary>
            Shade Controls Class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.RfCsmQmtdc2562Ex.CsmQmtdc2562ExShadeControls.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.RfCsmQmtdc2562Ex.CsmQmtdc2562ExShadeSettings">
            <summary>
            Shade Settings Class.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcExBaseClass.RfCsmQmtdc2562Ex.CsmQmtdc2562ExShadeSettings.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            Integer Parameters:
            	"UseMinimalRcb"     	        Default Value:0                       	Type: Decimal
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramId">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx"/> device.</param>
            <param name="paramGateway">RF gateway to attach this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx"/> device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.InitializeShadeInputs">
            <summary>
            Initialize the Tilt input join for this device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.InitializeShadeOutputs">
            <summary>
            Initialized the Tilt output join for this device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.OpenTilt">
            <summary>
            Method to tilt the shade all the way to the Tilt Open Limit.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.CloseTilt">
            <summary>
            Method to tilt the Shade all the way to the Tilt Closed Limit.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.Tilt">
            <summary>
            Set the Tilt of this device. A tilt of 0 is equivalent to 0 degrees vertical; 100 is equivalent to 90 degrees horizontal. Valid values are from 0 to 100 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.TiltFeedback">
            <summary>
            Feedback to report the current Tilt of this device. Valid values are from 0 to 100
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.ShadeBase.TiltFeedbackEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.TiltFullOpenedFeedback">
            <summary>
            Indicates that the Tilt feature has reached its open limit.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.ShadeBase.TiltFullOpenedEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.TiltFullClosedFeedback">
            <summary>
            Indicates that the Tilt feature has reached its closed limit.
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.DeviceSupport.ShadeBase.TiltFullClosedEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.TiltUp">
            <summary>
            Tilts the shade toward the Tilt Open limit of travel when the value is changed from false to true and stops when set to false.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcHsheerEx.TiltDown">
            <summary>
            Tilts the shade toward the Tilt Closed limit of travel when the value is changed from false to true and stops when set to false.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CscDrpcn">
            <summary>
            The CSC-DRPCN Drapery Control allow for control of the position and direction of motion of the drapery
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpcn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpcn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device is attached to. </param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpcn.Cresnet_CSC_DRPCN.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor used to add the device to a CresnetBranch.            
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">CresnetBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpcn.Cresnet_CSC_DRPCN.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.            
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpcn.Cresnet_CSC_DRPCN.CSC_DRPCN_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.                
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpcn.Cresnet_CSC_DRPCN.CSC_DRPCN_Drapery_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn">
             <summary>
             Cresnet based digital QMT drapery track motor for Drapery tracks up to 16 feet. It allows for control of the position and direction of motion of the drapery
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdcDrp3Cn device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CsmQmtdcDrp3Cn myShadeDevice;
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdcDrp3Cn(0x95,this);
                 
                 // Now register the event handlers
                 myShadeDevice.OnlineStatusChange += new OnlineStatusChangeEventHandler(ShadeDevice_OnlineStatusChange);
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the device
                 if (myShadeDevice.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             
             // Online Offline Status Change Event Handler
                void ShadeDevice_OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                {
                    CrestronConsole.PrintLine(" device named {1} state {0} ", args.DeviceOnLine ? "Online" : "Offline", currentDevice.ToString());
                }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.DisableTouchReaction">
            <summary>
            Method to disable the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn"/> device's reaction to touch sensitivity.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.EnableTouchReaction">
            <summary>
            Method to enable the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn"/> device's reaction to touch sensitivity.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.InitializeDevice(Crestron.SimplSharpPro.CrestronDeviceWithEvents)">
            <summary>
            Function to initialize the device
            </summary>
            <param name="paramShadeDevice"> base class for the shade device</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpcn"/> device is attached to. </param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.InitializeSpecificShadeDevice">
            <summary>
            Method to initialize the shade settings slot.
            </summary>        
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 10 to 30, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.DeviceGroups">
            <summary>
            Shade groups that this shade has been added to.
            The keys are the shade group IDs.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.Cresnet_CSM_QMTDC_DRP_3_CN.#ctor(System.UInt32,System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,Crestron.SimplSharpPro.IntegerParameterCollection@)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="cId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
            <param name="paramDeviceGroupsInternal"> parameter collection for the broadcasts</param>
            <param name="paramGroupsParametersSlot"> Slot for the broadcast parameter</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.Cresnet_CSM_QMTDC_DRP_3_CN.Controls.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramID">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.Cresnet_CSM_QMTDC_DRP_3_CN.Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            Integer Parameters:
            	"UseMinimalRcb"     	        Default Value:0                       	Type: Decimal
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Cn.Cresnet_CSM_QMTDC_DRP_3_CN.Error_Status.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramID">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CscDrpEx">
            <summary>
            The CSC-DRPEX Drapery Control allow for control of the position and direction of motion of the drapery
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpEx.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDrpEx"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpEx.RF_CSC_DRPEX.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to add the device to any gateway.          
            </summary>
            <param name="rfId">ID of this device</param>            
            <param name="paramBaseDevice"></param>
            <param name="paramGateway"></param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpEx.RF_CSC_DRPEX.CSC_DRPEX_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDrpEx.RF_CSC_DRPEX.CSC_DRPEX_Drapery_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex">
             <summary>
              infiNET EX based digital QMT drapery track motor for Drapery tracks up to 16 feet. It allows for control of the position and direction of motion of the drapery
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdcDrp3Ex device. The device is added to an external CenRfgwEx device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CenRfgwEx   myEXGateway;
                 CsmQmtdcDrp3Ex myShadeDevice;
                 
                 // Instantiate the CenRfgwEx gateway
                 myEXGateway = new CenRfgwEx(0x14,this);
            
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdcDrp3Ex(0x10,myEXGateway);
                 
                 // Now register the event handlers
                 // There is OnlineStatusChange handler for an EX device. However, you can subscribe to the  LinkStateChange handler on the ExtenderLinkState on the 
                 // Gateway device.
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the gateway. This will register the all the devices which have been added to the gateway.
                 if (myEXGateway.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.DisableTouchReaction">
            <summary>
            Method to disable the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex"/> device's reaction to touch sensitivity.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.EnableTouchReaction">
            <summary>
            Method to enable the <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex"/> device's reaction to touch sensitivity.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.InitializeSpecificShadeDevice">
            <summary>
            Method to initialize the shade settings slot.
            </summary>        
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.InitializeDevice(Crestron.SimplSharpPro.CrestronDeviceWithEvents)">
            <summary>
            Function to initialize the device
            </summary>
            <param name="paramShadeDevice"> base class for the shade device</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 10 to 30, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.DeviceGroups">
            <summary>
            Shade groups that this shade has been added to.
            The keys are the shade group IDs.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.RF_CSC_DRP_3_EX.Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            Integer Parameters:
            	"UseMinimalRcb"     	        Default Value:0                       	Type: Decimal
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.RF_CSC_DRP_3_EX.Controls.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramID">ID of this device.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdcDrp3Ex.RF_CSC_DRP_3_EX.Error_Status.#ctor(System.UInt32,Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
            <param name="paramID">ID of this device.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds">
            <summary>
            Event Ids used on the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass"/> that will trigger the "BaseEvent" event.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.MovingFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.MovingFeedback"/> has changed.
            <para>The "BaseEvent" event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.LastDirOpenFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.LastDirOpenFeedback"/> has changed.
            <para>The "BaseEvent" event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.LastDirCloseFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.LastDirCloseFeedback"/> has changed.
            <para>The "BaseEvent" event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.NotPresentEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.NotPresentFeedback"/> has changed.
            <para>The "BaseEvent" event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.PositionFeedbackEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.PositionFeedback"/> has changed.
            <para>The "BaseEvent" event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.ShadeDrapeController">
            <summary>
            Shade Drape Controller
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.ShadeOrDrape_CueChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> SubClass Sig change events.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds"/> class.
            </summary>
            <param name="currentDevice">Current <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> SubClass Internal device.</param>
            <param name="args">Sig Event Arguments.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Open">
            <summary>
            Opens Shade to the upper limit of travel.
            On the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> or <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> device, the shade will stop when <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.MaxTime"/> expires or <see cref="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Stop"/> is called.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Close">
            <summary>
            Closes shade to the lower limit of travel
            On the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> or <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> device, the shade will stop when <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.MaxTime"/> expires or <see cref="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Stop"/> is called.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Stop">
            <summary>
            Stops the shade movement
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.OpenJog">
            <summary>
            Opens Shade toward the upper limit of travel for <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.JogTime"/> seconds.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.CloseJog">
            <summary>
            Closes Shade toward the lower limit of travel for <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.JogTime"/> seconds.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.SetPreset">
            <summary>
            Stores the current position of Shade  to the preset number given by <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.PresetNumber"/>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.RecallPreset">
            <summary>
            Moves the Shade to the stored position corresponding to preset number given by <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.PresetNumber"/>
            The has no effect if the <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.PresetNumber"/> is invalid, or if the preset has no position stored.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Reverse">
            <summary>
            Reverses the direction of motor rotation.Reversing the rotation will set the upper and lower limits to the current position of the shade.
            For this reason the upper and lower limits must be reset after the reverse command is triggered.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.OpenMomentary">
            <summary>
            Opens Shade toward the upper limit of travel when set to true, and stops when set to false
            On the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> or <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> device, the shade will stop when <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.MaxTime"/> expires.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.CloseMomentary">
            <summary>
            Closes Shade toward the lower limit of travel when set to true, and stops when set to false
            On the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> or <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> device, the shade will stop when <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.MaxTime"/> expires.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.ReportPosition">
            <summary>
            Reports the position of the Shade via the <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.PositionFeedback"/> when set to true.
            Subsequent changes in position continue to be reported for as long as the input remains true.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.UpperLimitUp">
            <summary>
            Opens Shade while the input is true, and sets the upper travel limit when set to false.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.UpperLimitDown">
            <summary>
            Close Shade while the input is true, and sets the upper travel limit when set to false.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.LowerLimitUp">
            <summary>
            Opens Shade while the input is true, and sets the lower travel limit when set to false.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.LowerLimitDown">
            <summary>
            Close Shade while the input is true, and sets the lower travel limit when set to false.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.PresetNumber">
            <summary>
            Sets the preset number for which a position will be saved when the <see cref="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.SetPreset"/> is called or recalled when the <see cref="M:Crestron.SimplSharpPro.Shades.ShadeDrapeController.RecallPreset"/> is called.
            This property is only valid on the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSsc2"/> device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Position">
            <summary>
            Sets the position of the Shade relative to the full range of travel between the upper and lower limits.
            Valid values range from 0d to 65,535d (upper limit), which is 0000h to FFFFh (upper limit).  
            Note: Only the most significant bits affect the position.
            0000h = No movement
            00xxh (where xx is any value between 01 and FF) = Lower limit
            FFxxh (where xx is any value between 01 through FF) = Upper limit
            This property is only valid on the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSsc2"/> device.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.JogTime">
            <summary>
            Defines the period that Shade will jog open or jog closed.
            Valid values range from 0.05s (5) to 2s (200).
            Values above 2s will set the jog time to 2 seconds; values below 0.05s will set the jog time to 0.05s
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.MaxTime">
            <summary>
            Defines the maximum period that Shade will operate while opening or closing.
            Valid values range from 10 seconds to 360 seconds (6 minutes). The default is 10 seconds.
            This property is only valid on the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> and <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> devices. 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.LockOutTime">
            <summary>
            Defines the minimum period that Shade must remain in the stop state before changing directions.
            Valid values range from 0.2s (2) to 2s (200). The default is 1s.
            This property is only valid on the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> and <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> devices. 
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.MovingFeedback">
            <summary>
            Sig to indicate that the shade is moving.
            <para>The "BaseEvent" event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.MovingFeedbackEventId"/>.</para>
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.MovingFeedbackEventId"/> for "ClsC6xBase.ClsC6ShadeController" and with <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> will indicate the index into the "ClsC6xBase.ShadeGroups" collection.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.LastDirOpenFeedback">
            <summary>
            Indicates that the current direction of movement is toward the upper limit. If not currently moving, indicates that the previous direction of movement 
            was toward the upper limit.
            <para>The "BaseEvent" event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.LastDirOpenFeedbackEventId"/>.</para>
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.LastDirOpenFeedbackEventId"/> for "ClsC6xBase.ClsC6ShadeController" and with <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> will indicate the index into the "ClsC6xBase.ShadeGroups" collection.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.LastDirCloseFeedback">
            <summary>
            Indicates that the current direction of movement is toward the lower limit. If not currently moving, indicates that the previous direction of movement
            was toward the lower limit.
            <para>The "BaseEvent" event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.LastDirCloseFeedbackEventId"/>.</para>
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.LastDirCloseFeedbackEventId"/> for "ClsC6xBase.ClsC6ShadeController" and with <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> will indicate the index into the "ClsC6xBase.ShadeGroups" collection.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.NotPresentFeedback">
            <summary>
            Indicates if the shade is present or not.
            <para>The "BaseEvent" event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.NotPresentEventId"/>.</para>
            </summary>
            This is only present on the <see cref="T:Crestron.SimplSharpPro.Shades.C2nSsc2"/> device.
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.PositionFeedback">
            <summary>
            Indicates the position of Shade when <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.ReportPosition"/> is set to true, and all subsequent changes in position for as long as <see cref="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.ReportPosition"/> is set to true.
            Reported values range from 0 to 65,535 (upper limit), which is 0000h to FFFFh (upper limit).  
            <para>The "BaseEvent" event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.PositionFeedbackEventId"/>.</para>
            <para>The <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds.PositionFeedbackEventId"/> for "ClsC6xBase.ClsC6ShadeController" and with <see cref="P:Crestron.SimplSharpPro.BaseEventArgs.Index"/> will indicate the index into the "ClsC6xBase.ShadeGroups" collection.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Number">
            <summary>
            Controller number
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.Parent">
            <summary>
            The parent that a given object was added to.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.ShadeDrapeController.UserSpecifiedObject">
            <summary>
            User specified object.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass">
            <summary>
            Base class for the C2nSxC family of shade and drape controllers.
            This will fire the"BaseEvent" with the event Id's defined in <see cref="T:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds"/>.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass.OnShadeDrapePropertyChange(Crestron.SimplSharpPro.DeviceSupport.GenericEventArgs)">
            <summary>
            Method to trigger the "BaseEvent" event.
            </summary>
            <param name="args">Argument information for the event.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass.NumberOfControllers">
            <summary>
            Indicates number of controllers on the device
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
            <param name="deviceName"> Name of the device</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem,System.String)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass"/> device is attached to. </param>
            <param name="deviceName"> Name of the device</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass.Controllers">
            <summary>
            Collection of Shade/Drape controllers on the device.
            This will fire the "BaseEvent" with the event Id specified in <see cref="T:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds"/> and the index is the 
            controller number in <see cref="P:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass.Controllers"/>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.C2nSxcBaseClass.C2nSSC2">
            <summary>
            Auto generated class for <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.C2nSdcDc">
            <summary>
            The C2nSdcDc module operates two bi-directional motors (labeled Shade 1 and Shade 2) that control shades and drapes.
            This device uses DC power to control the motors
            This will fire the"BaseEvent" with the event Id's defined in <see cref="T:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds"/>.
            </summary>
            <example>
            Please refer to the C2nSdc class
            </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSdcDc.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSdcDc.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> device is attached to. </param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.C2nSdc">
             <summary>
             The C2nSdc module operates two bi-directional motors (labeled Shade 1 and Shade 2) that control shades and drapes.
             This will fire the"BaseEvent" with the event Id's defined in <see cref="T:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds"/>.
             </summary>
             <example>
             This is an example of how to instantiate and use the C2nSdc device. The same construct will apply for
             the C2nSdcDc device
             <code>
                 // Instantiate the device
                 mySdcDevice = new C2nSdc(0xE, this);
                 // Add the event handlers
                 mySdcDevice.BaseEvent += new BaseEventHandler(myDevice_BaseEvent);
                 mySdcDevice.OnlineStatusChange += new OnlineStatusChangeEventHandler(myDevice_OnlineStatusChange);
            
                 // Register the device
                 mySdcDevice.Register();
                 
                 // Online Status Change event handler
                 void myDevice_OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                 {
                     CrestronConsole.PrintLine(" Device named {0} is now {1} \r\n", currentDevice.ToString(), args.DeviceOnLine);
                     if (currentDevice.IsOnline)
                     {
                         // Close the shades/drapes
                         mySdcDevice.Controllers[1].Close();
                         mySdcDevice.Controllers[2].Close();
            
                         // open the shades/drapes
                         mySdcDevice.Controllers[1].Open();
                         mySdcDevice.Controllers[2].Open();
            
                         // Stop the shades/drapes
                         mySdcDevice.Controllers[1].Stop();
                         mySdcDevice.Controllers[2].Stop();
            
                         // Set the MAX time if supported
                         if (mySdcDevice.Controllers[1].MaxTime != CrestronControlSystem.NullUShortInputSig)
                         {
                             mySdcDevice.Controllers[1].MaxTime.UShortValue = 105;
                         }
            
                         // Set the lockout time to be 0.02 seconds
                         if (mySdcDevice.Controllers[2].LockOutTime != CrestronControlSystem.NullUShortInputSig)
                         {
                             mySdcDevice.Controllers[2].LockOutTime.UShortValue = 20;
                         }
                     }
                 }         
            
                 // Base event handler
                 void myDevice_BaseEvent(GenericBase device, BaseEventArgs args)
                 {
                     // Args.Index is the controller number.
                     CrestronConsole.PrintLine(" Base event fired on device {0} with {1} and index {2} \r\n", device.Name, args.EventId, args.Index);
                     
                     switch (args.EventId)
                     {
                         case ShadeDrapeControllerEventIds.LastDirCloseFeedbackEventId:
                              CrestronConsole.PrintLine(" Value for LastDirCloseFeedback is {0} \r\n", mySdcDevice.Controllers[(uint)args.Index].LastDirCloseFeedback.BoolValue);
                             break;
                         case ShadeDrapeControllerEventIds.LastDirOpenFeedbackEventId
                              CrestronConsole.PrintLine(" Value for LastDirOpenFeedback is {0} \r\n", mySdcDevice.Controllers[(uint)args.Index].LastDirOpenFeedback.BoolValue);
                             break;
                         case ShadeDrapeControllerEventIds.MovingFeedbackEventId:
                             CrestronConsole.PrintLine(" Value for MovingFeedback is {0} \r\n", mySdcDevice.Controllers[(uint)args.Index].MovingFeedback.BoolValue);
                             break;
                         case ShadeDrapeControllerEventIds.NotPresentEventId:
                             break;
                         case ShadeDrapeControllerEventIds.PositionFeedbackEventId:
                             break;
                     }
                 }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSdc.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSdc.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdcDc"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSdc"/> device is attached to. </param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.C2nSsc2">
             <summary>
             The C2nSsc2 shade control module communicates with up to two Somfy ILT Intelligent Shade Motors, via two RJ-11 connectors labeled Shade 1 and Shade 2.
             The module controls the position and direction of motion of each shade, with programmable settings for the upper and lower limits of travel for each shade.
             Commands to move to a specific location will position the shades relative to the full range of travel between these upper and lower limits. Subsequent commands
             to move a shade in the open or close direction will activate shade movement until a limit of travel is reached, the command is de-activated, or a stop command is sent.
             The C2sSsc2 supports up to 20 shade presets.
             This will fire the"BaseEvent" with the event Id's defined in <see cref="T:Crestron.SimplSharpPro.Shades.ShadeDrapeControllerEventIds"/>.
             </summary>
             <example>
             This is an example of how to instantiate and use the C2nSsc2 device. 
             <code>
                 // Instantiate the device
                 mySsc2Device = new C2nSsc2(0xC, this);
                 // Add the event handlers
                 mySsc2Device.BaseEvent += new BaseEventHandler(myDevice_BaseEvent);
                 mySsc2Device.OnlineStatusChange += new OnlineStatusChangeEventHandler(myDevice_OnlineStatusChange);
            
                 // Register the device
                 mySsc2Device.Register();
                 
                 // Online Status Change event handler
                 void myDevice_OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                 {
                     CrestronConsole.PrintLine(" Device named {0} is now {1} \r\n", currentDevice.ToString(), args.DeviceOnLine);
                     if (currentDevice.IsOnline)
                     {
                         // Close the shades/drapes
                         mySsc2Device.Controllers[1].Close();
                         mySsc2Device.Controllers[2].Close();
            
                         // open the shades/drapes
                         mySsc2Device.Controllers[1].Open();
                         mySsc2Device.Controllers[2].Open();
            
                         // Stop the shades/drapes
                         mySsc2Device.Controllers[1].Stop();
                         mySsc2Device.Controllers[2].Stop();
            
                         // Set the Position if supported
                         if (mySsc2Device.Controllers[1].Position != CrestronControlSystem.NullUShortInputSig)
                         {
                             mySsc2Device.Controllers[1].Position.UShortValue = 0x2030;
                         }
            
                         // Set the Preset Number
                         if (mySsc2Device.Controllers[2].PresetNumber != CrestronControlSystem.NullUShortInputSig)
                         {
                             mySsc2Device.Controllers[2].PresetNumber.UShortValue = 5;
                         }
                     }
                 }         
            
                 // Base event handler
                 void myDevice_BaseEvent(GenericBase device, BaseEventArgs args)
                 {
                     // Args.Index is the controller number.
                     CrestronConsole.PrintLine(" Base event fired on device {0} with {1} and index {2} \r\n", device.Name, args.EventId, args.Index);
                     
                     switch (args.EventId)
                     {
                         case ShadeDrapeControllerEventIds.LastDirCloseFeedbackEventId:
                              CrestronConsole.PrintLine(" Value for LastDirCloseFeedback is {0} \r\n", mySsc2Device.Controllers[(uint)args.Index].LastDirCloseFeedback.BoolValue);
                             break;
                         case ShadeDrapeControllerEventIds.LastDirOpenFeedbackEventId
                              CrestronConsole.PrintLine(" Value for LastDirOpenFeedback is {0} \r\n", mySsc2Device.Controllers[(uint)args.Index].LastDirOpenFeedback.BoolValue);
                             break;
                         case ShadeDrapeControllerEventIds.MovingFeedbackEventId:
                             CrestronConsole.PrintLine(" Value for MovingFeedback is {0} \r\n", mySsc2Device.Controllers[(uint)args.Index].MovingFeedback.BoolValue);
                             break;
                         case ShadeDrapeControllerEventIds.NotPresentEventId:
                             CrestronConsole.PrintLine(" Value for NotPresentFeedback is {0} \r\n", mySSC2Device.Controllers[(uint)args.Index].NotPresentFeedback.BoolValue);
                             break;
                         case ShadeDrapeControllerEventIds.PositionFeedbackEventId:
                             CrestronConsole.PrintLine(" Value for PositionFeedback is {0} \r\n", mySSC2Device.Controllers[(uint)args.Index].PositionFeedback.UShortValue);
                             break;
                     }
                 }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSsc2.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSsc2"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.C2nSsc2.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.C2nSsc2"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSsc2"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.C2nSsc2"/> device is attached to. </param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds">
            <summary>
            Event Ids used on the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> that will trigger the <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.UpperLimitSetEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.UpperLimitSet"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.LowerLimitSetEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.LowerLimitSet"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.RaiseIsClockWiseEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.RaiseIsClockwise"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.FindingLimitsEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.FindingLimits"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.PositionKnownEventId">
            <summary>
            The state of <see cref="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.PositionKnown"/> has changed.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger for this event id.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.BasicDrapeSettings">
            <summary>
            Basic drape configuration object.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event.</para>
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings">
            <summary>
            Basic shade configuration object.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.OnShadeSettingsPropertyChange(Crestron.SimplSharpPro.DeviceSupport.GenericEventArgs)">
            <summary>
            Method to trigger the <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event.
            </summary>
            <param name="args">Argument information for the event.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._shadeSettingsSlot">
            <summary>
            Reference to the shade settings slot.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.#ctor(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> sub class. This class is used to configure the shade.
            </summary>
            <param name="paramShadeSettingsSlot">Reference to the actual shade device.</param>
            <param name="paramDeviceApartOf">Reference to the generic shade.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ToString">
            <summary>
            String representation of the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/>.
            </summary>
            <returns>String that indicates which device this <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> is apart of.</returns>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.InitializeInputs">
            <summary>
            Method to initialize all the input sigs going in to the shade device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.InitializeOutputs">
            <summary>
            Method to initialize all of the output sigs received from the shade device.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings._ShadeSettingsSlot_CueChange(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.SigEventArgs)">
            <summary>
            Method to handle the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> SubClass Sig change events.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds"/> class.
            </summary>
            <param name="currentDevice">Current <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> SubClass Internal device.</param>
            <param name="args">Sig Event Arguments.</param>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._ClearUpperLimitCue">
            <summary>
            Storage of the Clear Upper Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._ClearLowerLimitCue">
            <summary>
            Storage of the Clear Lower Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._RaiseLimitCue">
            <summary>
            Storage of the Raise Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._LowerLimitCue">
            <summary>
            Storage of the Lower Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._SetUpperLimitCue">
            <summary>
            Storage of the Set Upper Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._SetLowerLimitCue">
            <summary>
            Storage of the Set Lower Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._ReverseDirectionCue">
            <summary>
            Storage of the Reverse Direction Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._JogUpLimitCue">
            <summary>
            Storage of the Jog Up Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._JogDownLimitCue">
            <summary>
            Storage of the Jog Down Limit Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._FindLimits">
             <summary>
            Storage of the Find Limits Sig.
             </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._UpperLimitSetCue">
            <summary>
            Storage of the Upper Limit Set Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._LowerLimitSetCue">
            <summary>
            Storage of the Lower Limit Set Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._RaiseIsClockwise">
            <summary>
            Storage of the Raise Is ClockWise Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._FindingLimits">
            <summary>
            Storage of the Finding Limits Sig.
            </summary>
        </member>
        <member name="F:Crestron.SimplSharpPro.Shades.BasicShadeSettings._PositionKnown">
            <summary>
            Storage of the Position Known Sig.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ClearUpperLimit">
            <summary>
            Temporarily disables the upper limit of the shade or the open limit of a drape. Limit shall not be permanently erased until the limit setting process is completed.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ClearLowerLimit">
            <summary>
            Temporarily disables the lower limit of the shade or the close limit of the drape. Limit shall not be permanently erased until the limit setting process is completed.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.SetUpperLimit">
            <summary>
            Method to set the upper limit for a shade or the open limit for a drape to the current position. This shall terminate the limit setting process.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.SetLowerLimit">
            <summary>
            Method to set the lower limit for a shade or the close limit for a drape to the current position. This shall terminate the limit setting process.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ReverseDirection">
            <summary>
            Method to toggle the rolling direction that was configured as the open direction. Action shall clear both upper/open and lower/close limits.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.JogUpLimit">
            <summary>
            For the CSC-DCCN/DCEX and CSM-QMT50-DCCN/DCEX this method will raise the shade for a short period of time or a fixed amount of encoder positions.  Each subsequent resumes movement.
            All shade jogs are a fixed number of ticks for the CSC-ACCN/ACEX - 7 encoder ticks, 200 ticks per tube revolution). Drape jogs are defined by a fixed time.
            </summary>
            <remarks>Movement of the shade might be restricted by either the Upper or Lower limit. JogUpLimit() is valid only after a ClearUpperLimit() or ClearLowerLimit() is called first.</remarks>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.JogDownLimit">
            <summary>
            For the CSC-DCCN/DCEX and CSM-QMT50-DCCN/DCEX this method will lower the shade for a short period of time or a fixed amount of encoder positions.  Each subsequent resumes movement.
            All shade jogs are a fixed number of ticks for the CSC-ACCN/ACEX - 7 encoder ticks, 200 ticks per tube revolution). Drape jogs are defined by a fixed time.
            </summary>
            <remarks>Movement of the shade might be restricted by either the Upper or Lower limit. JogDownLimit() is valid only after a ClearUpperLimit() or ClearLowerLimit() is called first.</remarks>        
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicShadeSettings.FindLimits">
            <summary>
            This method will allow the drape to automatically find hard limits.
            </summary>
        </member>
        <member name="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange">
            <summary>
            Event fired when a property of the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> has changed.
            EventIds for this event are located in the <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds"/> class.
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.RaiseLimit">
            <summary>
            Moves the shade or drape in the open direction. This signal is equivalent to "OPEN" while in Upper Limit Setup Mode or Lower Limit Setup Mode.
            </summary>
            <remarks>Movement of the shade might be restricted by either the Upper or Lower limit. RaiseLimit is valid only after a ClearUpperLimit() or ClearLowerLimit() is called first.  </remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.LowerLimit">
            <summary>
            Moves the shade or drape in the close direction. This signal is equivalent to "CLOSE" while in Upper Limit Setup Mode or Lower Limit Setup Mode.
            </summary>
            <remarks>Movement of the shade might be restricted by either the Upper or Lower limit. LowerLimit is valid only after a ClearUpperLimit() or ClearLowerLimit() is called first.  </remarks>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.UpperLimitSet">
            <summary>
            Sig to indicate that the shade's upper limit or the drape's open limit has been set.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.UpperLimitSetEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.LowerLimitSet">
            <summary>
            Sig to indicate that the shade's lower limit or the drape's close limit has been set.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.LowerLimitSetEventId"/>.</para>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.RaiseIsClockwise">
            <summary>
            Sig to indicate the direction the motor will rotate to open the shade or drape. Default is CounterClockWise (false).
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.RaiseIsClockWiseEventId"/>.</para>
            <remarks>'true' = the raise/open direction is clockwise; 'false' = the raise/open direction is counter clockwise</remarks>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.FindingLimits">
            <summary>
            Sig to indicate that the Open Limit and Close Limit values are being found for a drape.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.FindingLimitsEventId"/>.</para>
            <remarks>'true' = finding limits; 'false' = not finding limits</remarks>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.PositionKnown">
            <summary>
            Sig to indicate if the position is known  for a drape.
            <para>The <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> event will trigger with <see cref="F:Crestron.SimplSharpPro.Shades.BasicShadeSettingEventIds.PositionKnownEventId"/>.</para>
            <remarks>'true' = position known; 'false' = position unknown</remarks>
            </summary>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ParameterUseMinimalRcb">
            <summary>
            If set to 1, the device will send only one estimated RCB during the start of any motion.
            Default value is 0. Values from 0 to 65535 are valid.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicDrapeSettings.#ctor(Crestron.SimplSharpPro.CrestronDeviceWithEvents,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.BasicShadeSettings"/> sub class. This class is used to configure a drape.
            </summary>
            <param name="paramDrapeSettingsSlot">Reference to the actual drape settings device.</param>
            <param name="paramDeviceApartOf">Reference to the generic drape.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicDrapeSettings.InitializeInputs">
            <summary>
            Override of setting sig inputs that are unique for a drape over a shade.
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.BasicDrapeSettings.InitializeOutputs">
            <summary>
            Override of setting sig outputs that are unique for a drape over a shade.
            </summary>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CscAccn">
            <summary>
            Crestron AC Powered Cresnet CSC-ACN Shade Control.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAccn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscAccn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAccn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscAccn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to. </param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAccn.Cresnet_CSC_ACCN.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor used to add the device to a CresnetBranch.
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">CresnetBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAccn.Cresnet_CSC_ACCN.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAccn.Cresnet_CSC_ACCN.CSC_ACCN_Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAccn.Cresnet_CSC_ACCN.CSC_ACCN_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAccn.Cresnet_CSC_ACCN.CSC_ACCN_Shade_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CscDccn">
            <summary>
            The CSC-DCCN Shade Control allow for control of the position and direction of Crestron's QMT30 shades.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDccn"/> that resides on the specified IDeviceBranch. </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>       
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDccn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to. </param>       
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 6 to 28, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.Cresnet_CSC_DCCN.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IInternalBridgeSlots)">
            <summary>
            Constructor used to add the device to a CresnetBranch.
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="owner">CresnetBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.Cresnet_CSC_DCCN.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor used to add the device to the controller.
            
            </summary>
            <param name="paramCresnetId">ID of this device</param>
            <param name="Owner">Control System to add to. Currently only supports 'this'.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.Cresnet_CSC_DCCN.CSC_DCCN_Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.Cresnet_CSC_DCCN.CSC_DCCN_Shade_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDccn.Cresnet_CSC_DCCN.CSC_DCCN_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn">
            <summary>
            The CSM-QMT50-DCCN Shade Control allow for control of the position and direction of Crestron's QMT50 shades.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramControlSystem">Control system this device is attached to. </param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 10 to 30, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn.DeviceGroups">
            <summary>
            Shade groups that this shade has been added to.
            The keys are the shade group IDs.  
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn.Cresnet_CSM_QMT50_DCCN.CSM_QMT50_DCCN_Shade_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn.Cresnet_CSM_QMT50_DCCN.CSM_QMT50_DCCN_Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.                
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50Dccn.Cresnet_CSM_QMT50_DCCN.CSM_QMT50_DCCN_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.                
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CscAcEx">
            <summary>
            Crestron AC Powered RF CSC-ACEX Shade Control.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAcEx.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscAcEx"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAcEx.RF_CSC_ACEX.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to add the device to any gateway.          
            </summary>
            <param name="rfId">ID of this device</param>            
            <param name="paramBaseDevice"></param>
            <param name="paramGateway"></param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAcEx.RF_CSC_ACEX.CSC_ACEX_Shade_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAcEx.RF_CSC_ACEX.CSC_ACEX_Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscAcEx.RF_CSC_ACEX.CSC_ACEX_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CscDcEx">
            <summary>
            The CSC-DCEX Shade Control allow for control of the position and direction of Crestron's QMT30 shades.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDcEx.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CscDcEx"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param>        
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDcEx.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 6 to 28, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDcEx.RF_CSC_DCEX.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase,Crestron.SimplSharpPro.GenericBase)">
            <summary>
            Constructor used to add the device to any gateway.          
            </summary>
            <param name="rfId">ID of this device</param>            
            <param name="paramBaseDevice"></param>
            <param name="paramGateway"></param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDcEx.RF_CSC_DCEX.CSC_DCEX_Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDcEx.RF_CSC_DCEX.CSC_DCEX_Shade_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.                
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CscDcEx.RF_CSC_DCEX.CSC_DCEX_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.                
            </summary>
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx">
            <summary>
            The CSM-QMT50-DCEX Shade Control allow for control of the position and direction of Crestron's QMT50 shades.
            <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this device.</param>
            <param name="paramGateway">RF gateway to attach this device to.</param> 
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx.Speed(System.UInt16)">
            <summary>
            Method to set the rotational speed of the shade's motor. Valid Range is from 10 to 30, if set to zero the default of 25 is used.
            </summary>
            <param name="paramRpm">New rotational speed in RPM.</param>
        </member>
        <member name="P:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx.DeviceGroups">
            <summary>
            Shade groups that this shade has been added to.
            The keys are the shade group IDs.  
            </summary>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx.RF_CSM_QMT50_DCEX.CSM_QMT50_DCEX_Shade_Controls.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.                
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx.RF_CSM_QMT50_DCEX.CSM_QMT50_DCEX_Error_Status.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmt50DcEx.RF_CSM_QMT50_DCEX.CSM_QMT50_DCEX_Shade_Settings.#ctor(Crestron.SimplSharpProInternal.CrestronDevice)">
            <summary>
            Device Constructor.
            </summary>                
            <param name="paramParentDevice">Device to add this device to.</param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn">
             <summary>
             Cresnet based 2 Nm Digital QMT Shade Motor for 21-Inch Roller Shades and Larger, with Digital Quiet Motor Technology.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdc2562Cn device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CsmQmtdc2562Cn myShadeDevice;
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdc2562Cn(0x95,this);
                 
                 // Now register the event handlers
                 myShadeDevice.OnlineStatusChange += new OnlineStatusChangeEventHandler(ShadeDevice_OnlineStatusChange);
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the device
                 if (myShadeDevice.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             
             // Online Offline Status Change Event Handler
                void ShadeDevice_OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                {
                    CrestronConsole.PrintLine(" device named {1} state {0} ", args.DeviceOnLine ? "Online" : "Offline", currentDevice.ToString());
                }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Cn"/> device is attached to. </param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn">
             <summary>
             Cresnet based 4 Nm Digital QMT Shade Motor for 21-Inch Roller Shades and Larger, with Digital Quiet Motor Technology.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdc2564Cn device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CsmQmtdc2564Cn myShadeDevice;
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdc2564Cn(0x95,this);
                 
                 // Now register the event handlers
                 myShadeDevice.OnlineStatusChange += new OnlineStatusChangeEventHandler(ShadeDevice_OnlineStatusChange);
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the device
                 if (myShadeDevice.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             
             // Online Offline Status Change Event Handler
                void ShadeDevice_OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                {
                    CrestronConsole.PrintLine(" device named {1} state {0} ", args.DeviceOnLine ? "Online" : "Offline", currentDevice.ToString());
                }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Cn"/> device is attached to. </param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn">
             <summary>
             Cresnet based 1Nm digital QMT shade motor for 17.5-Inch roller shades and larger, with Digital Quiet Motor Technology.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdc1631Cn device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CsmQmtdc1631Cn myShadeDevice;
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdc1631Cn(0x95,this);
                 
                 // Now register the event handlers
                 myShadeDevice.OnlineStatusChange += new OnlineStatusChangeEventHandler(ShadeDevice_OnlineStatusChange);
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the device
                 if (myShadeDevice.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             
             // Online Offline Status Change Event Handler
                void ShadeDevice_OnlineStatusChange(GenericBase currentDevice, OnlineOfflineEventArgs args)
                {
                    CrestronConsole.PrintLine(" device named {1} state {0} ", args.DeviceOnLine ? "Online" : "Offline", currentDevice.ToString());
                }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn"/> that resides on the specified IDeviceBranch.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this device.</param>
            <param name="paramCresnetBranch">IDeviceBranch this device is a part of.</param>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn.#ctor(System.UInt32,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn"/> that resides on the cresnet bus for the specified control system.
            </summary>
            <param name="paramCresnetId">Cresnet ID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn"/> device.</param>
            <param name="paramControlSystem">Control system this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Cn"/> device is attached to. </param>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex">
             <summary>
             infiNET EX based 2 Nm Digital QMT Shade Motor for 21-Inch Roller Shades and Larger, with Digital Quiet Motor Technology.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdc2562Ex device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CenRfgwEx   myEXGateway;
                 CsmQmtdc2562Ex myShadeDevice;
                 
                 // Instantiate the CenRfgwEx gateway
                 myEXGateway = new CenRfgwEx(0x14,this);
            
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdc2562Ex(0x10,myEXGateway);
                 
                 // Now register the event handlers
                 // There is OnlineStatusChange handler for an EX device. However, you can subscribe to the  LinkStateChange handler on the ExtenderLinkState on the 
                 // Gateway device.
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the gateway. This will register the all the devices which have been added to the gateway.
                 if (myEXGateway.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/> device.</param>
            <param name="paramGateway">RF gateway to attach this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2562Ex"/> device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Ex">
             <summary>
             infiNET EX based 4 Nm Digital QMT Shade Motor for 21-Inch Roller Shades and Larger, with Digital Quiet Motor Technology.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdc2564Ex device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CenRfgwEx   myEXGateway;
                 CsmQmtdc2564Ex myShadeDevice;
                 
                 // Instantiate the CenRfgwEx gateway
                 myEXGateway = new CenRfgwEx(0x14,this);
            
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdc2564Ex(0x10,myEXGateway);
                 
                 // Now register the event handlers
                 // There is OnlineStatusChange handler for an EX device. However, you can subscribe to the  LinkStateChange handler on the ExtenderLinkState on the 
                 // Gateway device.
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the gateway. This will register the all the devices which have been added to the gateway.
                 if (myEXGateway.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Ex.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Ex"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Ex"/> device.</param>
            <param name="paramGateway">RF gateway to attach this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc2564Ex"/> device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
        <member name="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Ex">
             <summary>
             infiNET EX based 1Nm digital QMT shade motor for 17.5-Inch roller shades and larger , with Digital Quiet Motor Technology.
             <para>This class will trigger <see cref="E:Crestron.SimplSharpPro.GenericBase.BaseEvent"/> and <see cref="E:Crestron.SimplSharpPro.Shades.BasicShadeSettings.ShadeSettingsPropertyChange"/> events.</para>
             </summary>
             <example>
             This is an example of how to instantiate and use the CsmQmtdc1631Ex device. The device is added to an external CenRfgwEx device.
             <code>
             // Register the device within the constructor or InitializeSystem function
             public ControlSystem() : base()
             {
                 CenRfgwEx   myEXGateway;
                 CsmQmtdc1631Ex myShadeDevice;
                 
                 // Instantiate the CenRfgwEx gateway
                 myEXGateway = new CenRfgwEx(0x14,this);
            
                 // Instantiate the device
                 myShadeDevice = new CsmQmtdc1631Ex(0x10,myEXGateway);
                 
                 // Now register the event handlers
                 // There is OnlineStatusChange handler for an EX device. However, you can subscribe to the  LinkStateChange handler on the ExtenderLinkState on the 
                 // Gateway device.
                 myShadeDevice.BaseEvent += new BaseEventHandler(ShadeDevice_BaseEventHandler);
                 myShadeDevice.ShadeSettings.ShadeSettingsPropertyChange += new GenericEventHandler(ShadeDevice_ShadeSettingsPropertyChange);
            
                 // Now register the gateway. This will register the all the devices which have been added to the gateway.
                 if (myEXGateway.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
                     CrestronConsole.PrintLine(" Unable to register for device ");
                 else
                    CrestronConsole.PrintLine(" Device successfully registered "); 
             }
             
             // Event handler for the ShadeSettings
             void ShadeDevice_ShadeSettingsPropertyChange(object sender, GenericEventArgs args)
             {
                 switch (args.EventId)
                 {
                     case BasicShadeSettingEventIds.LowerLimitSetEventId:
                         break;
                     case BasicShadeSettingEventIds.RaiseIsClockWiseEventId:
                         break;
                     case BasicShadeSettingEventIds.UpperLimitSetEventId:
                         break;
                 }
             }
             
             // Base Event Handler for the shade device
             void ShadeDevice_BaseEventHandler(GenericBase device, BaseEventArgs args)
                {
            
                 CrestronConsole.PrintLine(" Device named {0} - event Id is {1} ", device.ToString(), args.EventId.ToString());
                 switch (args.EventId)
                 {
                     case ShadeBase.ErrorFeedbackEventId:
                         CrestronConsole.PrintLine(" Shade error feedback bits are {0} ", myShadeDevice.ErrorFeedback.UShortValue);
                         break;
                     case ShadeBase.IsFullyClosedEventId:
                         if (myShadeDevice.IsFullyClosed.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully closed ");
                         else
                             CrestronConsole.PrintLine(" Shade fully closed ");
                         break;
                     case ShadeBase.IsFullyOpenedEventId:
                         if (myShadeDevice.IsFullyOpened.BoolValue == false)
                             CrestronConsole.PrintLine(" Shade not fully opened");
                         else
                             CrestronConsole.PrintLine(" Shade fully opened ");
                         break;
                     case ShadeBase.TouchDetectedFeedbackEventId:
                         // This is only valid for the CsmQmtdcDrp3Ex and the CsmQmtdcDrp3Cn
                         if (myShadeDevice.TouchDetectedFeedback.BoolValue == false)
                             CrestronConsole.PrintLine(" Touch not detected");
                         else
                             CrestronConsole.PrintLine(" Touch detected ");
                         break;
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Ex.#ctor(System.UInt32,Crestron.SimplSharpPro.GatewayBase)">
            <summary>
            Constructor to generate a new <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Ex"/> that is attached to the specified RF gateway.
            </summary>
            <param name="paramRfId">RFID of this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Ex"/> device.</param>
            <param name="paramGateway">RF gateway to attach this <see cref="T:Crestron.SimplSharpPro.Shades.CsmQmtdc1631Ex"/> device to.</param>
            <exception cref="T:System.ArgumentNullException">The gateway specified is not initialized.</exception>
        </member>
    </members>
</doc>
